
d_watch_v2_wb55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013104  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031e8  08013248  08013248  00023248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016430  08016430  00026430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016434  08016434  00026434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000280  20000008  08016438  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000343c  20000288  080166b8  00030288  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200036c4  080166b8  000336c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002b747  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005549  00000000  00000000  0005b9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000029b8  00000000  00000000  00060f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002788  00000000  00000000  00063900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00029336  00000000  00000000  00066088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027fc1  00000000  00000000  0008f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00103ec8  00000000  00000000  000b737f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001bb247  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000c7e8  00000000  00000000  001bb298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000288 	.word	0x20000288
 800015c:	00000000 	.word	0x00000000
 8000160:	0801322c 	.word	0x0801322c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000028c 	.word	0x2000028c
 800017c:	0801322c 	.word	0x0801322c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_d2lz>:
 8000e54:	b538      	push	{r3, r4, r5, lr}
 8000e56:	2200      	movs	r2, #0
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	460d      	mov	r5, r1
 8000e5e:	f7ff fe15 	bl	8000a8c <__aeabi_dcmplt>
 8000e62:	b928      	cbnz	r0, 8000e70 <__aeabi_d2lz+0x1c>
 8000e64:	4620      	mov	r0, r4
 8000e66:	4629      	mov	r1, r5
 8000e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e6c:	f000 b80a 	b.w	8000e84 <__aeabi_d2ulz>
 8000e70:	4620      	mov	r0, r4
 8000e72:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e76:	f000 f805 	bl	8000e84 <__aeabi_d2ulz>
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e80:	bd38      	pop	{r3, r4, r5, pc}
 8000e82:	bf00      	nop

08000e84 <__aeabi_d2ulz>:
 8000e84:	b5d0      	push	{r4, r6, r7, lr}
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__aeabi_d2ulz+0x34>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4606      	mov	r6, r0
 8000e8c:	460f      	mov	r7, r1
 8000e8e:	f7ff fb8b 	bl	80005a8 <__aeabi_dmul>
 8000e92:	f7ff fe61 	bl	8000b58 <__aeabi_d2uiz>
 8000e96:	4604      	mov	r4, r0
 8000e98:	f7ff fb0c 	bl	80004b4 <__aeabi_ui2d>
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <__aeabi_d2ulz+0x38>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f7ff fb82 	bl	80005a8 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	4639      	mov	r1, r7
 8000eac:	f7ff f9c4 	bl	8000238 <__aeabi_dsub>
 8000eb0:	f7ff fe52 	bl	8000b58 <__aeabi_d2uiz>
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000eb8:	3df00000 	.word	0x3df00000
 8000ebc:	41f00000 	.word	0x41f00000

08000ec0 <MPR121_setRegister>:
I2C_HandleTypeDef *i2c_handle;

//extern MPR121_type MPR121;


void MPR121_setRegister(uint8_t reg, uint8_t value){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]

  bool wasRunning = false;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint8_t temp_reg = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73bb      	strb	r3, [r7, #14]

  if(reg==MPR121_ECR){  // if we are modding MPR121_ECR, update our internal running status
 8000ed8:	225e      	movs	r2, #94	; 0x5e
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10c      	bne.n	8000efa <MPR121_setRegister+0x3a>
    if(value&0x3F){
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <MPR121_setRegister+0x32>
      running = true;
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <MPR121_setRegister+0x134>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e00f      	b.n	8000f12 <MPR121_setRegister+0x52>
    } else {
      running = false;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <MPR121_setRegister+0x134>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e00b      	b.n	8000f12 <MPR121_setRegister+0x52>
    }
  } else if(reg<MPR121_CTL0){
 8000efa:	2273      	movs	r2, #115	; 0x73
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d207      	bcs.n	8000f12 <MPR121_setRegister+0x52>
    wasRunning = running;
 8000f02:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <MPR121_setRegister+0x134>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	73fb      	strb	r3, [r7, #15]
    if(wasRunning) MPR121_stop();  // we should ALWAYS be in stop mode for this
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MPR121_setRegister+0x52>
 8000f0e:	f000 f9ad 	bl	800126c <MPR121_stop>
                // unless modding MPR121_ECR or GPIO / LED register
  }

  taskENTER_CRITICAL();
 8000f12:	f00c fef7 	bl	800dd04 <vPortEnterCritical>
    if(HAL_I2C_Mem_Write(i2c_handle, address << 1, reg, 1, &value, 1, I2C_TIMEOUT) != HAL_OK){
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <MPR121_setRegister+0x138>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <MPR121_setRegister+0x13c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	b299      	uxth	r1, r3
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	2302      	movs	r3, #2
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	f007 f865 	bl	8008004 <HAL_I2C_Mem_Write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <MPR121_setRegister+0x90>
      error |= 1<<ADDRESS_UNKNOWN_BIT; // set address unknown bit
 8000f40:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <MPR121_setRegister+0x140>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <MPR121_setRegister+0x140>)
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e045      	b.n	8000fdc <MPR121_setRegister+0x11c>
    } else {
      error &= ~(1<<ADDRESS_UNKNOWN_BIT);
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <MPR121_setRegister+0x140>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f023 0302 	bic.w	r3, r3, #2
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MPR121_setRegister+0x140>)
 8000f5c:	701a      	strb	r2, [r3, #0]
      if (HAL_I2C_Mem_Read(i2c_handle, address << 1, reg, 1, &temp_reg, 1, I2C_TIMEOUT) == HAL_OK) {
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MPR121_setRegister+0x138>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MPR121_setRegister+0x13c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	2302      	movs	r3, #2
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 030e 	add.w	r3, r7, #14
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f007 f954 	bl	800822c <HAL_I2C_Mem_Read>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d128      	bne.n	8000fdc <MPR121_setRegister+0x11c>
    	  if (value == temp_reg) write_fail = false;
 8000f8a:	79ba      	ldrb	r2, [r7, #6]
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d103      	bne.n	8000f9a <MPR121_setRegister+0xda>
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MPR121_setRegister+0x144>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e020      	b.n	8000fdc <MPR121_setRegister+0x11c>
    	  else {
    		  HAL_I2C_Mem_Read(i2c_handle, address << 1, MPR121_TS2, 1, &temp_reg, 1, I2C_TIMEOUT);
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MPR121_setRegister+0x138>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MPR121_setRegister+0x13c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	2301      	movs	r3, #1
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	2302      	movs	r3, #2
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 030e 	add.w	r3, r7, #14
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f007 f936 	bl	800822c <HAL_I2C_Mem_Read>
    		  if((temp_reg&0x80)!=0){
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	da06      	bge.n	8000fd6 <MPR121_setRegister+0x116>
    		        error |= 1<<OVERCURRENT_FLAG_BIT;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <MPR121_setRegister+0x140>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MPR121_setRegister+0x140>)
 8000fd4:	701a      	strb	r2, [r3, #0]
    		  }
    		  write_fail = true;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MPR121_setRegister+0x144>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
    	  }
      }
    }
    taskEXIT_CRITICAL();
 8000fdc:	f00c fec2 	bl	800dd64 <vPortExitCritical>
    if(wasRunning) MPR121_run();   // restore run mode if necessary
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MPR121_setRegister+0x12a>
 8000fe6:	f000 f92b 	bl	8001240 <MPR121_run>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002c7 	.word	0x200002c7
 8000ff8:	20000308 	.word	0x20000308
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000009 	.word	0x20000009
 8001004:	200002c8 	.word	0x200002c8

08001008 <MPR121_getRegister>:

uint8_t MPR121_getRegister(uint8_t reg){
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	uint8_t scratch = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]

	taskENTER_CRITICAL();
 8001016:	f00c fe75 	bl	800dd04 <vPortEnterCritical>
    if(HAL_I2C_Mem_Read(i2c_handle, address << 1, reg, 1, &scratch, 1, I2C_TIMEOUT) == HAL_OK){  // just a single byte
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <MPR121_getRegister+0xcc>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MPR121_getRegister+0xd0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b299      	uxth	r1, r3
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	b29a      	uxth	r2, r3
 800102c:	2302      	movs	r3, #2
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	f107 030f 	add.w	r3, r7, #15
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	f007 f8f6 	bl	800822c <HAL_I2C_Mem_Read>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d107      	bne.n	8001056 <MPR121_getRegister+0x4e>
      error &= ~(1<<ADDRESS_UNKNOWN_BIT); // all good, clear the bit
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MPR121_getRegister+0xd4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f023 0302 	bic.w	r3, r3, #2
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MPR121_getRegister+0xd4>)
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e006      	b.n	8001064 <MPR121_getRegister+0x5c>
    } else {
      error |= 1<<ADDRESS_UNKNOWN_BIT; //set the bit - something went wrong
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MPR121_getRegister+0xd4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MPR121_getRegister+0xd4>)
 8001062:	701a      	strb	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8001064:	f00c fe7e 	bl	800dd64 <vPortExitCritical>
    // auto update errors for registers with error data
    if(reg == MPR121_TS2 && ((scratch&0x80)!=0)){
 8001068:	2201      	movs	r2, #1
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4293      	cmp	r3, r2
 800106e:	d10b      	bne.n	8001088 <MPR121_getRegister+0x80>
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	da07      	bge.n	8001088 <MPR121_getRegister+0x80>
      error |= 1<<OVERCURRENT_FLAG_BIT;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MPR121_getRegister+0xd4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MPR121_getRegister+0xd4>)
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e006      	b.n	8001096 <MPR121_getRegister+0x8e>
    } else {
      error &= ~(1<<OVERCURRENT_FLAG_BIT);
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MPR121_getRegister+0xd4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f023 0308 	bic.w	r3, r3, #8
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MPR121_getRegister+0xd4>)
 8001094:	701a      	strb	r2, [r3, #0]
    }
    if((reg == MPR121_OORS1 || reg == MPR121_OORS2) && (scratch!=0)){
 8001096:	2202      	movs	r2, #2
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4293      	cmp	r3, r2
 800109c:	d003      	beq.n	80010a6 <MPR121_getRegister+0x9e>
 800109e:	2203      	movs	r2, #3
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10a      	bne.n	80010bc <MPR121_getRegister+0xb4>
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <MPR121_getRegister+0xb4>
      error |= 1<<OUT_OF_RANGE_BIT;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MPR121_getRegister+0xd4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MPR121_getRegister+0xd4>)
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e006      	b.n	80010ca <MPR121_getRegister+0xc2>
    } else {
      error &= ~(1<<OUT_OF_RANGE_BIT);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MPR121_getRegister+0xd4>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f023 0310 	bic.w	r3, r3, #16
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <MPR121_getRegister+0xd4>)
 80010c8:	701a      	strb	r2, [r3, #0]
    }
    return scratch;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000308 	.word	0x20000308
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000009 	.word	0x20000009

080010e0 <MPR121_begin>:

bool MPR121_begin(I2C_HandleTypeDef *h_i2c, uint8_t touchThreshold, uint8_t releaseThreshold){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	4613      	mov	r3, r2
 80010ee:	70bb      	strb	r3, [r7, #2]

  // SDA and SCL should idle high, but MPR121 can get stuck waiting to complete a transaction
  // this code detects this state and releases us from it
	i2c_handle = h_i2c;
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <MPR121_begin+0x150>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]

  // addresses only valid 0x5A to 0x5D - if we don't change the address it stays at default
  if(address>=0x5A && address<=0x5D)
 80010f6:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <MPR121_begin+0x154>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b59      	cmp	r3, #89	; 0x59
 80010fc:	d907      	bls.n	800110e <MPR121_begin+0x2e>
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <MPR121_begin+0x154>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b5d      	cmp	r3, #93	; 0x5d
 8001104:	d803      	bhi.n	800110e <MPR121_begin+0x2e>
  {
    address = address; // need to be specific here
 8001106:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <MPR121_begin+0x154>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <MPR121_begin+0x154>)
 800110c:	701a      	strb	r2, [r3, #0]
  }

  error &= ~(1<<NOT_INITED_BIT); // clear NOT_INITED error flag
 800110e:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <MPR121_begin+0x158>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b47      	ldr	r3, [pc, #284]	; (8001238 <MPR121_begin+0x158>)
 800111a:	701a      	strb	r2, [r3, #0]

  if( MPR121_reset() ){
 800111c:	f000 f8c8 	bl	80012b0 <MPR121_reset>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d07e      	beq.n	8001224 <MPR121_begin+0x144>
    // default values...
	  // default values in initialisation list
	  	defaultSettings.TTHRESH = 40;
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <MPR121_begin+0x15c>)
 8001128:	2228      	movs	r2, #40	; 0x28
 800112a:	701a      	strb	r2, [r3, #0]
	  	defaultSettings.RTHRESH = 20;
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <MPR121_begin+0x15c>)
 800112e:	2214      	movs	r2, #20
 8001130:	705a      	strb	r2, [r3, #1]
	  	defaultSettings.INTERRUPT = 4;   // note that this is not a hardware interrupt, just the digital
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <MPR121_begin+0x15c>)
 8001134:	2204      	movs	r2, #4
 8001136:	709a      	strb	r2, [r3, #2]
	                    // pin that the MPR121 ~INT pin is connected to
	  	defaultSettings.MHDR = 		0x01;
 8001138:	4b40      	ldr	r3, [pc, #256]	; (800123c <MPR121_begin+0x15c>)
 800113a:	2201      	movs	r2, #1
 800113c:	70da      	strb	r2, [r3, #3]
	  	defaultSettings.NHDR = 		0x01;
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <MPR121_begin+0x15c>)
 8001140:	2201      	movs	r2, #1
 8001142:	711a      	strb	r2, [r3, #4]
	  	defaultSettings.NCLR = 		0x10;
 8001144:	4b3d      	ldr	r3, [pc, #244]	; (800123c <MPR121_begin+0x15c>)
 8001146:	2210      	movs	r2, #16
 8001148:	715a      	strb	r2, [r3, #5]
	  	defaultSettings.FDLR = 		0x20;
 800114a:	4b3c      	ldr	r3, [pc, #240]	; (800123c <MPR121_begin+0x15c>)
 800114c:	2220      	movs	r2, #32
 800114e:	719a      	strb	r2, [r3, #6]
	  	defaultSettings.MHDF = 		0x01;
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <MPR121_begin+0x15c>)
 8001152:	2201      	movs	r2, #1
 8001154:	71da      	strb	r2, [r3, #7]
	  	defaultSettings.NHDF = 		0x01;
 8001156:	4b39      	ldr	r3, [pc, #228]	; (800123c <MPR121_begin+0x15c>)
 8001158:	2201      	movs	r2, #1
 800115a:	721a      	strb	r2, [r3, #8]
	  	defaultSettings.NCLF =		0x10;
 800115c:	4b37      	ldr	r3, [pc, #220]	; (800123c <MPR121_begin+0x15c>)
 800115e:	2210      	movs	r2, #16
 8001160:	725a      	strb	r2, [r3, #9]
	  	defaultSettings.FDLF = 		0x20;
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <MPR121_begin+0x15c>)
 8001164:	2220      	movs	r2, #32
 8001166:	729a      	strb	r2, [r3, #10]
	  	defaultSettings.NHDT = 		0x01;
 8001168:	4b34      	ldr	r3, [pc, #208]	; (800123c <MPR121_begin+0x15c>)
 800116a:	2201      	movs	r2, #1
 800116c:	72da      	strb	r2, [r3, #11]
	  	defaultSettings.NCLT = 		0x10;
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <MPR121_begin+0x15c>)
 8001170:	2210      	movs	r2, #16
 8001172:	731a      	strb	r2, [r3, #12]
	  	defaultSettings.FDLT = 		0xFF;
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <MPR121_begin+0x15c>)
 8001176:	22ff      	movs	r2, #255	; 0xff
 8001178:	735a      	strb	r2, [r3, #13]
	  	defaultSettings.MHDPROXR = 	0x0F;
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <MPR121_begin+0x15c>)
 800117c:	220f      	movs	r2, #15
 800117e:	739a      	strb	r2, [r3, #14]
	  	defaultSettings.NHDPROXR = 	0x0F;
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <MPR121_begin+0x15c>)
 8001182:	220f      	movs	r2, #15
 8001184:	73da      	strb	r2, [r3, #15]
	  	defaultSettings.NCLPROXR = 	0x00;
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MPR121_begin+0x15c>)
 8001188:	2200      	movs	r2, #0
 800118a:	741a      	strb	r2, [r3, #16]
	  	defaultSettings.FDLPROXR = 	0x00;
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <MPR121_begin+0x15c>)
 800118e:	2200      	movs	r2, #0
 8001190:	745a      	strb	r2, [r3, #17]
	  	defaultSettings.MHDPROXF = 	0x01;
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MPR121_begin+0x15c>)
 8001194:	2201      	movs	r2, #1
 8001196:	749a      	strb	r2, [r3, #18]
	  	defaultSettings.NHDPROXF = 	0x01;
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <MPR121_begin+0x15c>)
 800119a:	2201      	movs	r2, #1
 800119c:	74da      	strb	r2, [r3, #19]
	  	defaultSettings.NCLPROXF = 	0xFF;
 800119e:	4b27      	ldr	r3, [pc, #156]	; (800123c <MPR121_begin+0x15c>)
 80011a0:	22ff      	movs	r2, #255	; 0xff
 80011a2:	751a      	strb	r2, [r3, #20]
	  	defaultSettings.FDLPROXF = 	0xFF;
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <MPR121_begin+0x15c>)
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	755a      	strb	r2, [r3, #21]
	  	defaultSettings.NHDPROXT = 	0x00;
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <MPR121_begin+0x15c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	759a      	strb	r2, [r3, #22]
	  	defaultSettings.NCLPROXT = 	0x00;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MPR121_begin+0x15c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	75da      	strb	r2, [r3, #23]
	  	defaultSettings.FDLPROXT = 	0x00;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MPR121_begin+0x15c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	761a      	strb	r2, [r3, #24]
	  	defaultSettings.DTR = 		0x11;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MPR121_begin+0x15c>)
 80011be:	2211      	movs	r2, #17
 80011c0:	765a      	strb	r2, [r3, #25]
	  	defaultSettings.AFE1 = 		0xFF;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MPR121_begin+0x15c>)
 80011c4:	22ff      	movs	r2, #255	; 0xff
 80011c6:	769a      	strb	r2, [r3, #26]
	  	defaultSettings.AFE2 = 		0x30;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MPR121_begin+0x15c>)
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	76da      	strb	r2, [r3, #27]
	  	defaultSettings.ECR = 		0xCC; // default to fast baseline startup and 12 electrodes enabled, no prox
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MPR121_begin+0x15c>)
 80011d0:	22cc      	movs	r2, #204	; 0xcc
 80011d2:	771a      	strb	r2, [r3, #28]
	  	defaultSettings.ACCR0 = 	0x00;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MPR121_begin+0x15c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	775a      	strb	r2, [r3, #29]
	  	defaultSettings.ACCR1 = 	0x00;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MPR121_begin+0x15c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	779a      	strb	r2, [r3, #30]
	  	defaultSettings.USL =		0x00;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MPR121_begin+0x15c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	77da      	strb	r2, [r3, #31]
	  	defaultSettings.LSL = 		0x00;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MPR121_begin+0x15c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
	  	defaultSettings.TL = 		0x00;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MPR121_begin+0x15c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	  MPR121_applySettings( &defaultSettings );
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <MPR121_begin+0x15c>)
 80011f8:	f000 f8a0 	bl	800133c <MPR121_applySettings>

    // only apply thresholds if they differ from existing defaults
    if( touchThreshold != defaultSettings.TTHRESH ){
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MPR121_begin+0x15c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	78fa      	ldrb	r2, [r7, #3]
 8001202:	429a      	cmp	r2, r3
 8001204:	d003      	beq.n	800120e <MPR121_begin+0x12e>
    	MPR121_setTouchThreshold_all( touchThreshold );
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fb6b 	bl	80018e4 <MPR121_setTouchThreshold_all>
    }

    if( releaseThreshold != defaultSettings.RTHRESH ){
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MPR121_begin+0x15c>)
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	78ba      	ldrb	r2, [r7, #2]
 8001214:	429a      	cmp	r2, r3
 8001216:	d003      	beq.n	8001220 <MPR121_begin+0x140>
    	MPR121_setReleaseThreshold_all( releaseThreshold );
 8001218:	78bb      	ldrb	r3, [r7, #2]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fbb6 	bl	800198c <MPR121_setReleaseThreshold_all>
    }

    return true;
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <MPR121_begin+0x146>

  } else {
    return false;
 8001224:	2300      	movs	r3, #0
  }
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000308 	.word	0x20000308
 8001234:	20000008 	.word	0x20000008
 8001238:	20000009 	.word	0x20000009
 800123c:	200002a4 	.word	0x200002a4

08001240 <MPR121_run>:

void MPR121_goFast(){
    //Wire.setClock(400000L); // set I2C clock to 400kHz
}

void MPR121_run(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  if(!MPR121_isInited()) return;
 8001244:	f000 f9ba 	bl	80015bc <MPR121_isInited>
 8001248:	4603      	mov	r3, r0
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d107      	bne.n	8001264 <MPR121_run+0x24>
  MPR121_setRegister(MPR121_ECR, ECR_backup); // restore backup to return to run mode
 8001254:	225e      	movs	r2, #94	; 0x5e
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <MPR121_run+0x28>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f7ff fe2f 	bl	8000ec0 <MPR121_setRegister>
 8001262:	e000      	b.n	8001266 <MPR121_run+0x26>
  if(!MPR121_isInited()) return;
 8001264:	bf00      	nop
}
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200002c6 	.word	0x200002c6

0800126c <MPR121_stop>:

void MPR121_stop(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  if(!MPR121_isInited()) return;
 8001270:	f000 f9a4 	bl	80015bc <MPR121_isInited>
 8001274:	4603      	mov	r3, r0
 8001276:	f083 0301 	eor.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d112      	bne.n	80012a6 <MPR121_stop+0x3a>
  ECR_backup = MPR121_getRegister(MPR121_ECR); // backup MPR121_ECR to restore when we enter run
 8001280:	235e      	movs	r3, #94	; 0x5e
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fec0 	bl	8001008 <MPR121_getRegister>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MPR121_stop+0x40>)
 800128e:	701a      	strb	r2, [r3, #0]
  MPR121_setRegister(MPR121_ECR, ECR_backup & 0xC0); // turn off all electrodes to stop
 8001290:	225e      	movs	r2, #94	; 0x5e
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MPR121_stop+0x40>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff fe0e 	bl	8000ec0 <MPR121_setRegister>
 80012a4:	e000      	b.n	80012a8 <MPR121_stop+0x3c>
  if(!MPR121_isInited()) return;
 80012a6:	bf00      	nop
}
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002c6 	.word	0x200002c6

080012b0 <MPR121_reset>:

bool MPR121_reset(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  // MPR121_AFE2 is one of the few registers that defaults to a non-zero value -
  // checking it is sensible as reading back an incorrect value implies
  // something went wrong - we also check MPR121_TS2 bit 7 to see if we have an
  // overcurrent flag set

	MPR121_setRegister(MPR121_SRST, 0x63); // soft reset
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	2163      	movs	r1, #99	; 0x63
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe01 	bl	8000ec0 <MPR121_setRegister>

  if(MPR121_getRegister(MPR121_AFE2)!=0x24){
 80012be:	235d      	movs	r3, #93	; 0x5d
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fea1 	bl	8001008 <MPR121_getRegister>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b24      	cmp	r3, #36	; 0x24
 80012ca:	d007      	beq.n	80012dc <MPR121_reset+0x2c>
    error |= 1<<READBACK_FAIL_BIT;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MPR121_reset+0x88>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MPR121_reset+0x88>)
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e006      	b.n	80012ea <MPR121_reset+0x3a>
  } else {
    error &= ~(1<<READBACK_FAIL_BIT);
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MPR121_reset+0x88>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MPR121_reset+0x88>)
 80012e8:	701a      	strb	r2, [r3, #0]
  }

  if((MPR121_getRegister(MPR121_TS2)&0x80)!=0){
 80012ea:	2301      	movs	r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe8b 	bl	8001008 <MPR121_getRegister>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da07      	bge.n	800130a <MPR121_reset+0x5a>
    error |= 1<<OVERCURRENT_FLAG_BIT;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MPR121_reset+0x88>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MPR121_reset+0x88>)
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e006      	b.n	8001318 <MPR121_reset+0x68>
  } else {
    error &= ~(1<<OVERCURRENT_FLAG_BIT);
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MPR121_reset+0x88>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f023 0308 	bic.w	r3, r3, #8
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MPR121_reset+0x88>)
 8001316:	701a      	strb	r2, [r3, #0]
  }

  if(MPR121_getError()==NOT_INITED || MPR121_getError()==NO_ERROR){ // if our only error is that we are not inited...
 8001318:	f000 f916 	bl	8001548 <MPR121_getError>
 800131c:	4603      	mov	r3, r0
 800131e:	2b06      	cmp	r3, #6
 8001320:	d004      	beq.n	800132c <MPR121_reset+0x7c>
 8001322:	f000 f911 	bl	8001548 <MPR121_getError>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <MPR121_reset+0x80>
    return true;
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <MPR121_reset+0x82>
  } else {
    return false;
 8001330:	2300      	movs	r3, #0
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000009 	.word	0x20000009

0800133c <MPR121_applySettings>:

void MPR121_applySettings(MPR121_settings_type *settings){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  bool wasRunning = running;
 8001344:	4b7e      	ldr	r3, [pc, #504]	; (8001540 <MPR121_applySettings+0x204>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	73fb      	strb	r3, [r7, #15]
  if(wasRunning) MPR121_stop();  // can't change most regs when running - checking
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MPR121_applySettings+0x18>
 8001350:	f7ff ff8c 	bl	800126c <MPR121_stop>
              // here avoids multiple stop() / run() calls

  MPR121_setRegister(MPR121_MHDR,settings->MHDR);
 8001354:	222b      	movs	r2, #43	; 0x2b
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	78db      	ldrb	r3, [r3, #3]
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f7ff fdaf 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NHDR,settings->NHDR);
 8001362:	222c      	movs	r2, #44	; 0x2c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	791b      	ldrb	r3, [r3, #4]
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f7ff fda8 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NCLR,settings->NCLR);
 8001370:	222d      	movs	r2, #45	; 0x2d
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fda1 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_FDLR,settings->FDLR);
 800137e:	222e      	movs	r2, #46	; 0x2e
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	799b      	ldrb	r3, [r3, #6]
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff fd9a 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_MHDF,settings->MHDF);
 800138c:	222f      	movs	r2, #47	; 0x2f
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	79db      	ldrb	r3, [r3, #7]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fd93 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NHDF,settings->NHDF);
 800139a:	2230      	movs	r2, #48	; 0x30
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7a1b      	ldrb	r3, [r3, #8]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f7ff fd8c 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NCLF,settings->NCLF);
 80013a8:	2231      	movs	r2, #49	; 0x31
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7a5b      	ldrb	r3, [r3, #9]
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff fd85 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_FDLF,settings->FDLF);
 80013b6:	2232      	movs	r2, #50	; 0x32
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7a9b      	ldrb	r3, [r3, #10]
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f7ff fd7e 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NHDT,settings->NHDT);
 80013c4:	2233      	movs	r2, #51	; 0x33
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7adb      	ldrb	r3, [r3, #11]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7ff fd77 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NCLT,settings->NCLT);
 80013d2:	2234      	movs	r2, #52	; 0x34
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7b1b      	ldrb	r3, [r3, #12]
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff fd70 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_FDLT,settings->FDLT);
 80013e0:	2235      	movs	r2, #53	; 0x35
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b5b      	ldrb	r3, [r3, #13]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4610      	mov	r0, r2
 80013ea:	f7ff fd69 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_MHDPROXR,settings->MHDPROXR);
 80013ee:	2236      	movs	r2, #54	; 0x36
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b9b      	ldrb	r3, [r3, #14]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f7ff fd62 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NHDPROXR,settings->NHDPROXR);
 80013fc:	2237      	movs	r2, #55	; 0x37
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7bdb      	ldrb	r3, [r3, #15]
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f7ff fd5b 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NCLPROXR,settings->NCLPROXR);
 800140a:	2238      	movs	r2, #56	; 0x38
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7c1b      	ldrb	r3, [r3, #16]
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f7ff fd54 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_FDLPROXR,settings->FDLPROXR);
 8001418:	2239      	movs	r2, #57	; 0x39
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7c5b      	ldrb	r3, [r3, #17]
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f7ff fd4d 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_MHDPROXF,settings->MHDPROXF);
 8001426:	223a      	movs	r2, #58	; 0x3a
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7c9b      	ldrb	r3, [r3, #18]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff fd46 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NHDPROXF,settings->NHDPROXF);
 8001434:	223b      	movs	r2, #59	; 0x3b
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7cdb      	ldrb	r3, [r3, #19]
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff fd3f 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NCLPROXF,settings->NCLPROXF);
 8001442:	223c      	movs	r2, #60	; 0x3c
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7d1b      	ldrb	r3, [r3, #20]
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f7ff fd38 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_FDLPROXF,settings->FDLPROXF);
 8001450:	223d      	movs	r2, #61	; 0x3d
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7d5b      	ldrb	r3, [r3, #21]
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff fd31 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NHDPROXT,settings->NHDPROXT);
 800145e:	223e      	movs	r2, #62	; 0x3e
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7d9b      	ldrb	r3, [r3, #22]
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f7ff fd2a 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_NCLPROXT,settings->NCLPROXT);
 800146c:	223f      	movs	r2, #63	; 0x3f
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7ddb      	ldrb	r3, [r3, #23]
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff fd23 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_FDLPROXT,settings->FDLPROXT);
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f7ff fd1c 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_DTR, settings->DTR);
 8001488:	225b      	movs	r2, #91	; 0x5b
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e5b      	ldrb	r3, [r3, #25]
 800148e:	4619      	mov	r1, r3
 8001490:	4610      	mov	r0, r2
 8001492:	f7ff fd15 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_AFE1, settings->AFE1);
 8001496:	225c      	movs	r2, #92	; 0x5c
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff fd0e 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_AFE2, settings->AFE2);
 80014a4:	225d      	movs	r2, #93	; 0x5d
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7edb      	ldrb	r3, [r3, #27]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f7ff fd07 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_ACCR0, settings->ACCR0);
 80014b2:	227b      	movs	r2, #123	; 0x7b
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7f5b      	ldrb	r3, [r3, #29]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f7ff fd00 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_ACCR1, settings->ACCR1);
 80014c0:	227c      	movs	r2, #124	; 0x7c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7f9b      	ldrb	r3, [r3, #30]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f7ff fcf9 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_USL, settings->USL);
 80014ce:	227d      	movs	r2, #125	; 0x7d
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7fdb      	ldrb	r3, [r3, #31]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f7ff fcf2 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_LSL, settings->LSL);
 80014dc:	227e      	movs	r2, #126	; 0x7e
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff fcea 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setRegister(MPR121_TL, settings->TL);
 80014ec:	227f      	movs	r2, #127	; 0x7f
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f7ff fce2 	bl	8000ec0 <MPR121_setRegister>

  MPR121_setRegister(MPR121_ECR, settings->ECR);
 80014fc:	225e      	movs	r2, #94	; 0x5e
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7f1b      	ldrb	r3, [r3, #28]
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f7ff fcdb 	bl	8000ec0 <MPR121_setRegister>

  error &= ~(1<<NOT_INITED_BIT); // clear not inited error as we have just inited!
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MPR121_applySettings+0x208>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MPR121_applySettings+0x208>)
 8001516:	701a      	strb	r2, [r3, #0]
  MPR121_setTouchThreshold_all(settings->TTHRESH);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f9e1 	bl	80018e4 <MPR121_setTouchThreshold_all>
  MPR121_setReleaseThreshold_all(settings->RTHRESH);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fa30 	bl	800198c <MPR121_setReleaseThreshold_all>


  if(wasRunning) MPR121_run();
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MPR121_applySettings+0x1fa>
 8001532:	f7ff fe85 	bl	8001240 <MPR121_run>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002c7 	.word	0x200002c7
 8001544:	20000009 	.word	0x20000009

08001548 <MPR121_getError>:

mpr121_error_type MPR121_getError(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  // important - this resets the IRQ pin - as does any I2C comms

	MPR121_getRegister(MPR121_OORS1);  // OOR registers - we may not have read them yet,
 800154c:	2302      	movs	r3, #2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd5a 	bl	8001008 <MPR121_getRegister>
	MPR121_getRegister(MPR121_OORS2);  // whereas the other errors should have been caught
 8001554:	2303      	movs	r3, #3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd56 	bl	8001008 <MPR121_getRegister>

  // order of error precedence is determined in this logic block

  if(!MPR121_isInited()) return NOT_INITED; // this has its own checker function
 800155c:	f000 f82e 	bl	80015bc <MPR121_isInited>
 8001560:	4603      	mov	r3, r0
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MPR121_getError+0x28>
 800156c:	2306      	movs	r3, #6
 800156e:	e020      	b.n	80015b2 <MPR121_getError+0x6a>

  if((error & (1<<ADDRESS_UNKNOWN_BIT)) != 0){
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MPR121_getError+0x70>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MPR121_getError+0x38>
    return ADDRESS_UNKNOWN;
 800157c:	2302      	movs	r3, #2
 800157e:	e018      	b.n	80015b2 <MPR121_getError+0x6a>
  } else if((error & (1<<READBACK_FAIL_BIT)) != 0){
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MPR121_getError+0x70>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MPR121_getError+0x48>
    return READBACK_FAIL;
 800158c:	2303      	movs	r3, #3
 800158e:	e010      	b.n	80015b2 <MPR121_getError+0x6a>
  } else if((error & (1<<OVERCURRENT_FLAG_BIT)) != 0){
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MPR121_getError+0x70>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MPR121_getError+0x58>
    return OVERCURRENT_FLAG;
 800159c:	2304      	movs	r3, #4
 800159e:	e008      	b.n	80015b2 <MPR121_getError+0x6a>
  } else if((error & (1<<OUT_OF_RANGE_BIT)) != 0){
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <MPR121_getError+0x70>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MPR121_getError+0x68>
    return OUT_OF_RANGE;
 80015ac:	2305      	movs	r3, #5
 80015ae:	e000      	b.n	80015b2 <MPR121_getError+0x6a>
  } else return NO_ERROR;
 80015b0:	2300      	movs	r3, #0

}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000009 	.word	0x20000009

080015bc <MPR121_isInited>:

bool MPR121_isRunning(){
  return running;
}

bool MPR121_isInited(){
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return (error & (1<<NOT_INITED_BIT)) == 0;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MPR121_isInited+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	20000009 	.word	0x20000009

080015e0 <MPR121_updateTouchData>:

void MPR121_updateTouchData(){
 80015e0:	b598      	push	{r3, r4, r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  if(!MPR121_isInited()) return;
 80015e4:	f7ff ffea 	bl	80015bc <MPR121_isInited>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f083 0301 	eor.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d119      	bne.n	8001628 <MPR121_updateTouchData+0x48>

  autoTouchStatusFlag = false;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <MPR121_updateTouchData+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]

  lastTouchData = touchData;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MPR121_updateTouchData+0x50>)
 80015fc:	881a      	ldrh	r2, [r3, #0]
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <MPR121_updateTouchData+0x54>)
 8001600:	801a      	strh	r2, [r3, #0]
  touchData = (unsigned int)MPR121_getRegister(MPR121_TS1) + ((unsigned int)MPR121_getRegister(MPR121_TS2)<<8);
 8001602:	2300      	movs	r3, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fcff 	bl	8001008 <MPR121_getRegister>
 800160a:	4603      	mov	r3, r0
 800160c:	b29c      	uxth	r4, r3
 800160e:	2301      	movs	r3, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fcf9 	bl	8001008 <MPR121_getRegister>
 8001616:	4603      	mov	r3, r0
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	4423      	add	r3, r4
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <MPR121_updateTouchData+0x50>)
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	e000      	b.n	800162a <MPR121_updateTouchData+0x4a>
  if(!MPR121_isInited()) return;
 8001628:	bf00      	nop
}
 800162a:	bd98      	pop	{r3, r4, r7, pc}
 800162c:	20000306 	.word	0x20000306
 8001630:	20000302 	.word	0x20000302
 8001634:	20000304 	.word	0x20000304

08001638 <MPR121_getTouchData>:

bool MPR121_getTouchData(uint8_t electrode){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if(electrode>12 || !MPR121_isInited()) return false; // avoid out of bounds behaviour
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d807      	bhi.n	8001658 <MPR121_getTouchData+0x20>
 8001648:	f7ff ffb8 	bl	80015bc <MPR121_isInited>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MPR121_getTouchData+0x24>
 8001658:	2300      	movs	r3, #0
 800165a:	e00c      	b.n	8001676 <MPR121_getTouchData+0x3e>

  return((touchData>>electrode)&1);
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MPR121_getTouchData+0x48>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	fa42 f303 	asr.w	r3, r2, r3
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000302 	.word	0x20000302

08001684 <MPR121_getLastTouchData>:
  }

  return(scratch);
}

bool MPR121_getLastTouchData(uint8_t electrode){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if(electrode>12 || !MPR121_isInited()) return false; // avoid out of bounds behaviour
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d807      	bhi.n	80016a4 <MPR121_getLastTouchData+0x20>
 8001694:	f7ff ff92 	bl	80015bc <MPR121_isInited>
 8001698:	4603      	mov	r3, r0
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MPR121_getLastTouchData+0x24>
 80016a4:	2300      	movs	r3, #0
 80016a6:	e00c      	b.n	80016c2 <MPR121_getLastTouchData+0x3e>

  return((lastTouchData>>electrode)&1);
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MPR121_getLastTouchData+0x48>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	fa42 f303 	asr.w	r3, r2, r3
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000304 	.word	0x20000304

080016d0 <MPR121_updateFilteredData>:

bool MPR121_updateFilteredData(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af04      	add	r7, sp, #16
  if(!MPR121_isInited()) return(false);
 80016d6:	f7ff ff71 	bl	80015bc <MPR121_isInited>
 80016da:	4603      	mov	r3, r0
 80016dc:	f083 0301 	eor.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MPR121_updateFilteredData+0x1a>
 80016e6:	2300      	movs	r3, #0
 80016e8:	e052      	b.n	8001790 <MPR121_updateFilteredData+0xc0>


  uint8_t MSB = 0, LSB = 0, index = 0, reg_addr = MPR121_E0FDL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	717b      	strb	r3, [r7, #5]
 80016ee:	2300      	movs	r3, #0
 80016f0:	713b      	strb	r3, [r7, #4]
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	2304      	movs	r3, #4
 80016f8:	71bb      	strb	r3, [r7, #6]
  taskENTER_CRITICAL();
 80016fa:	f00c fb03 	bl	800dd04 <vPortEnterCritical>
  do {
	  if (HAL_I2C_Mem_Read(i2c_handle, address << 1, reg_addr, 1, &LSB, 1, I2C_TIMEOUT) != HAL_OK) return false;
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MPR121_updateFilteredData+0xc8>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <MPR121_updateFilteredData+0xcc>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	b299      	uxth	r1, r3
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	b29a      	uxth	r2, r3
 8001710:	2302      	movs	r3, #2
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	2301      	movs	r3, #1
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	f006 fd85 	bl	800822c <HAL_I2C_Mem_Read>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MPR121_updateFilteredData+0x5c>
 8001728:	2300      	movs	r3, #0
 800172a:	e031      	b.n	8001790 <MPR121_updateFilteredData+0xc0>
	  reg_addr++;
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	3301      	adds	r3, #1
 8001730:	71bb      	strb	r3, [r7, #6]
	  if (HAL_I2C_Mem_Read(i2c_handle, address << 1, reg_addr, 1, &MSB, 1, I2C_TIMEOUT) != HAL_OK) return false;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MPR121_updateFilteredData+0xc8>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <MPR121_updateFilteredData+0xcc>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	b299      	uxth	r1, r3
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2302      	movs	r3, #2
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2301      	movs	r3, #1
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	1d7b      	adds	r3, r7, #5
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	f006 fd6b 	bl	800822c <HAL_I2C_Mem_Read>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MPR121_updateFilteredData+0x90>
 800175c:	2300      	movs	r3, #0
 800175e:	e017      	b.n	8001790 <MPR121_updateFilteredData+0xc0>
	  reg_addr++;
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	3301      	adds	r3, #1
 8001764:	71bb      	strb	r3, [r7, #6]
	  filteredData[index] = ((MSB << 8) | LSB);
 8001766:	797b      	ldrb	r3, [r7, #5]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b219      	sxth	r1, r3
 800176c:	793b      	ldrb	r3, [r7, #4]
 800176e:	b21a      	sxth	r2, r3
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	430a      	orrs	r2, r1
 8001774:	b211      	sxth	r1, r2
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <MPR121_updateFilteredData+0xd0>)
 8001778:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  index++;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3301      	adds	r3, #1
 8001780:	71fb      	strb	r3, [r7, #7]
  } while (reg_addr <= MPR121_E12FDH);
 8001782:	221d      	movs	r2, #29
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	4293      	cmp	r3, r2
 8001788:	d9b9      	bls.n	80016fe <MPR121_updateFilteredData+0x2e>
  taskEXIT_CRITICAL();
 800178a:	f00c faeb 	bl	800dd64 <vPortExitCritical>
return true;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000308 	.word	0x20000308
 800179c:	20000008 	.word	0x20000008
 80017a0:	200002cc 	.word	0x200002cc

080017a4 <MPR121_getFilteredData>:

int MPR121_getFilteredData(uint8_t electrode){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if(electrode>12 || !MPR121_isInited()) return(0xFFFF); // avoid out of bounds behaviour
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d807      	bhi.n	80017c4 <MPR121_getFilteredData+0x20>
 80017b4:	f7ff ff02 	bl	80015bc <MPR121_isInited>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <MPR121_getFilteredData+0x26>
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	e003      	b.n	80017d2 <MPR121_getFilteredData+0x2e>

  return(filteredData[electrode]);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <MPR121_getFilteredData+0x38>)
 80017ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002cc 	.word	0x200002cc

080017e0 <MPR121_updateBaselineData>:

bool MPR121_updateBaselineData(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af04      	add	r7, sp, #16
  if(!MPR121_isInited()) return(false);
 80017e6:	f7ff fee9 	bl	80015bc <MPR121_isInited>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f083 0301 	eor.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MPR121_updateBaselineData+0x1a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	e032      	b.n	8001860 <MPR121_updateBaselineData+0x80>
  uint8_t index = 0, reg_data = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	2300      	movs	r3, #0
 8001800:	717b      	strb	r3, [r7, #5]
  taskENTER_CRITICAL();
 8001802:	f00c fa7f 	bl	800dd04 <vPortEnterCritical>
  for (uint8_t reg_addr = MPR121_E0BV; reg_addr <= MPR121_E12BV; reg_addr++) {
 8001806:	231e      	movs	r3, #30
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	e022      	b.n	8001852 <MPR121_updateBaselineData+0x72>
	  if (HAL_I2C_Mem_Read(i2c_handle, address << 1, reg_addr, 1, &reg_data, 1, I2C_TIMEOUT) != HAL_OK) return false;
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MPR121_updateBaselineData+0x88>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <MPR121_updateBaselineData+0x8c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b299      	uxth	r1, r3
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	b29a      	uxth	r2, r3
 800181e:	2302      	movs	r3, #2
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2301      	movs	r3, #1
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	1d7b      	adds	r3, r7, #5
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	f006 fcfe 	bl	800822c <HAL_I2C_Mem_Read>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MPR121_updateBaselineData+0x5a>
 8001836:	2300      	movs	r3, #0
 8001838:	e012      	b.n	8001860 <MPR121_updateBaselineData+0x80>
	  baselineData[index] = reg_data;
 800183a:	797a      	ldrb	r2, [r7, #5]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	b211      	sxth	r1, r2
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <MPR121_updateBaselineData+0x90>)
 8001842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  index++;
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3301      	adds	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t reg_addr = MPR121_E0BV; reg_addr <= MPR121_E12BV; reg_addr++) {
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	3301      	adds	r3, #1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	222a      	movs	r2, #42	; 0x2a
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	4293      	cmp	r3, r2
 8001858:	d9d8      	bls.n	800180c <MPR121_updateBaselineData+0x2c>
  }
  taskEXIT_CRITICAL();
 800185a:	f00c fa83 	bl	800dd64 <vPortExitCritical>
return true;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000308 	.word	0x20000308
 800186c:	20000008 	.word	0x20000008
 8001870:	200002e8 	.word	0x200002e8

08001874 <MPR121_isNewTouch>:
  if(electrode>12 || !MPR121_isInited()) return(0xFFFF); // avoid out of bounds behaviour

  return(baselineData[electrode]);
}

bool MPR121_isNewTouch(uint8_t electrode){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if(electrode>12 || !MPR121_isInited()) return(false); // avoid out of bounds behaviour
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d807      	bhi.n	8001894 <MPR121_isNewTouch+0x20>
 8001884:	f7ff fe9a 	bl	80015bc <MPR121_isInited>
 8001888:	4603      	mov	r3, r0
 800188a:	f083 0301 	eor.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MPR121_isNewTouch+0x24>
 8001894:	2300      	movs	r3, #0
 8001896:	e016      	b.n	80018c6 <MPR121_isNewTouch+0x52>
  return((MPR121_getLastTouchData(electrode) == false) && (MPR121_getTouchData(electrode) == true));
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fef2 	bl	8001684 <MPR121_getLastTouchData>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f083 0301 	eor.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <MPR121_isNewTouch+0x4a>
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fec2 	bl	8001638 <MPR121_getTouchData>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MPR121_isNewTouch+0x4a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <MPR121_isNewTouch+0x4c>
 80018be:	2300      	movs	r3, #0
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <MPR121_updateAll>:
bool MPR121_isNewRelease(uint8_t electrode){
  if(electrode>12 || !MPR121_isInited()) return(false); // avoid out of bounds behaviour
  return((MPR121_getLastTouchData(electrode) == true) && (MPR121_getTouchData(electrode) == false));
}

void MPR121_updateAll(){
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
	MPR121_updateTouchData();
 80018d2:	f7ff fe85 	bl	80015e0 <MPR121_updateTouchData>
	MPR121_updateBaselineData();
 80018d6:	f7ff ff83 	bl	80017e0 <MPR121_updateBaselineData>
	MPR121_updateFilteredData();
 80018da:	f7ff fef9 	bl	80016d0 <MPR121_updateFilteredData>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <MPR121_setTouchThreshold_all>:

void MPR121_setTouchThreshold_all(uint8_t val){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if(!MPR121_isInited()) return;
 80018ee:	f7ff fe65 	bl	80015bc <MPR121_isInited>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f083 0301 	eor.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d11c      	bne.n	8001938 <MPR121_setTouchThreshold_all+0x54>
  bool wasRunning = running;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MPR121_setTouchThreshold_all+0x5c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	73bb      	strb	r3, [r7, #14]

  if(wasRunning) MPR121_stop();  // can only change thresholds when not running
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MPR121_setTouchThreshold_all+0x2a>
 800190a:	f7ff fcaf 	bl	800126c <MPR121_stop>
              // checking here avoids multiple stop() / run()
              // calls

  for(uint8_t i=0; i<13; i++){
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e008      	b.n	8001926 <MPR121_setTouchThreshold_all+0x42>
	  MPR121_setTouchThreshold(i, val);
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f812 	bl	8001944 <MPR121_setTouchThreshold>
  for(uint8_t i=0; i<13; i++){
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	3301      	adds	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d9f3      	bls.n	8001914 <MPR121_setTouchThreshold_all+0x30>
  }

  if(wasRunning) MPR121_run();
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <MPR121_setTouchThreshold_all+0x56>
 8001932:	f7ff fc85 	bl	8001240 <MPR121_run>
 8001936:	e000      	b.n	800193a <MPR121_setTouchThreshold_all+0x56>
  if(!MPR121_isInited()) return;
 8001938:	bf00      	nop
}
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002c7 	.word	0x200002c7

08001944 <MPR121_setTouchThreshold>:
    int addr = len - maxElectrodes - (electrode + 1);
    EEPROM.write(addr, val - 1); // val - 1 so 255 stays as never-written-to
  #endif
}

void MPR121_setTouchThreshold(uint8_t electrode, uint8_t val){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
  if(electrode>12 || !MPR121_isInited()) return; // avoid out of bounds behaviour
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d813      	bhi.n	8001982 <MPR121_setTouchThreshold+0x3e>
 800195a:	f7ff fe2f 	bl	80015bc <MPR121_isInited>
 800195e:	4603      	mov	r3, r0
 8001960:	f083 0301 	eor.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10b      	bne.n	8001982 <MPR121_setTouchThreshold+0x3e>

  // this relies on the internal register map of the MPR121
  MPR121_setRegister(MPR121_E0TTH + (electrode<<1), val);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2241      	movs	r2, #65	; 0x41
 8001972:	4413      	add	r3, r2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	79ba      	ldrb	r2, [r7, #6]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff faa0 	bl	8000ec0 <MPR121_setRegister>
 8001980:	e000      	b.n	8001984 <MPR121_setTouchThreshold+0x40>
  if(electrode>12 || !MPR121_isInited()) return; // avoid out of bounds behaviour
 8001982:	bf00      	nop
}
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <MPR121_setReleaseThreshold_all>:

void MPR121_setReleaseThreshold_all(uint8_t val){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if(!MPR121_isInited()) return;
 8001996:	f7ff fe11 	bl	80015bc <MPR121_isInited>
 800199a:	4603      	mov	r3, r0
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11c      	bne.n	80019e0 <MPR121_setReleaseThreshold_all+0x54>
  bool wasRunning = running;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MPR121_setReleaseThreshold_all+0x5c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	73bb      	strb	r3, [r7, #14]

  if(wasRunning) MPR121_stop();  // can only change thresholds when not running
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MPR121_setReleaseThreshold_all+0x2a>
 80019b2:	f7ff fc5b 	bl	800126c <MPR121_stop>
              // checking here avoids multiple stop / starts

  for(uint8_t i=0; i<13; i++){
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e008      	b.n	80019ce <MPR121_setReleaseThreshold_all+0x42>
	  MPR121_setReleaseThreshold(i,val);
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f812 	bl	80019ec <MPR121_setReleaseThreshold>
  for(uint8_t i=0; i<13; i++){
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	3301      	adds	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d9f3      	bls.n	80019bc <MPR121_setReleaseThreshold_all+0x30>
  }

  if(wasRunning) MPR121_run();
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <MPR121_setReleaseThreshold_all+0x56>
 80019da:	f7ff fc31 	bl	8001240 <MPR121_run>
 80019de:	e000      	b.n	80019e2 <MPR121_setReleaseThreshold_all+0x56>
  if(!MPR121_isInited()) return;
 80019e0:	bf00      	nop
}
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002c7 	.word	0x200002c7

080019ec <MPR121_setReleaseThreshold>:

void MPR121_setReleaseThreshold(uint8_t electrode, uint8_t val){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
  if(electrode>12 || !MPR121_isInited()) return; // avoid out of bounds behaviour
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d813      	bhi.n	8001a2a <MPR121_setReleaseThreshold+0x3e>
 8001a02:	f7ff fddb 	bl	80015bc <MPR121_isInited>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10b      	bne.n	8001a2a <MPR121_setReleaseThreshold+0x3e>

  // this relies on the internal register map of the MPR121
  MPR121_setRegister(MPR121_E0RTH + (electrode<<1), val);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2242      	movs	r2, #66	; 0x42
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	79ba      	ldrb	r2, [r7, #6]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa4c 	bl	8000ec0 <MPR121_setRegister>
 8001a28:	e000      	b.n	8001a2c <MPR121_setReleaseThreshold+0x40>
  if(electrode>12 || !MPR121_isInited()) return; // avoid out of bounds behaviour
 8001a2a:	bf00      	nop
}
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <MPR121_setElectrodeCDC>:
  if(CDC > 63) return; // current is only valid 0..63uA

  MPR121_setRegister(MPR121_AFE1, (MPR121_getRegister(MPR121_AFE1) & 0xC0) | CDC);
}

void MPR121_setElectrodeCDC(uint8_t electrode, uint8_t CDC){
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71bb      	strb	r3, [r7, #6]
  if(CDC > 63 || electrode > 12) return; // current is only valid 0..63uA, electrode only valid 0..12
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	2b3f      	cmp	r3, #63	; 0x3f
 8001a46:	d80c      	bhi.n	8001a62 <MPR121_setElectrodeCDC+0x30>
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d809      	bhi.n	8001a62 <MPR121_setElectrodeCDC+0x30>

  MPR121_setRegister(MPR121_CDC0 + electrode, CDC);
 8001a4e:	225f      	movs	r2, #95	; 0x5f
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	4413      	add	r3, r2
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	79ba      	ldrb	r2, [r7, #6]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa30 	bl	8000ec0 <MPR121_setRegister>
 8001a60:	e000      	b.n	8001a64 <MPR121_setElectrodeCDC+0x32>
  if(CDC > 63 || electrode > 12) return; // current is only valid 0..63uA, electrode only valid 0..12
 8001a62:	bf00      	nop
}
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <MPR121_setGlobalCDT>:

void MPR121_setGlobalCDT(mpr121_CDT_type CDT){
 8001a6a:	b590      	push	{r4, r7, lr}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
	MPR121_setRegister(MPR121_AFE2, (MPR121_getRegister(MPR121_AFE2) & 0x1F) | (CDT << 5));
 8001a74:	245d      	movs	r4, #93	; 0x5d
 8001a76:	235d      	movs	r3, #93	; 0x5d
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fac5 	bl	8001008 <MPR121_getRegister>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	015b      	lsls	r3, r3, #5
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4619      	mov	r1, r3
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff fa12 	bl	8000ec0 <MPR121_setRegister>
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <MPR121_autoSetElectrodeCDC>:

void MPR121_setElectrodeCDT(uint8_t electrode, mpr121_CDT_type CDT){
	MPR121_setRegister(MPR121_CDT01 + (electrode >> 1), (MPR121_getRegister(MPR121_CDT01 + (electrode >> 1)) & (0x0F << (((electrode + 1) % 2)<<2))) | (CDT << ((electrode % 2)<<2)));
}

bool MPR121_autoSetElectrodeCDC(uint8_t electrode, uint16_t VCC_mV) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80bb      	strh	r3, [r7, #4]
  uint16_t upper_limit_FDAT = (uint16_t)((((uint32_t)VCC_mV - 700)*256)/VCC_mV) << 2;
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001aba:	021a      	lsls	r2, r3, #8
 8001abc:	88bb      	ldrh	r3, [r7, #4]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	833b      	strh	r3, [r7, #24]
  uint16_t target_FDAT = (uint16_t)(((uint32_t)upper_limit_FDAT * 90) / 100);
 8001ac8:	8b3b      	ldrh	r3, [r7, #24]
 8001aca:	225a      	movs	r2, #90	; 0x5a
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	4a4c      	ldr	r2, [pc, #304]	; (8001c04 <MPR121_autoSetElectrodeCDC+0x160>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	82fb      	strh	r3, [r7, #22]
  uint16_t lower_limit_FDAT = (uint16_t)(((uint32_t)upper_limit_FDAT * 65) / 100);
 8001ada:	8b3a      	ldrh	r2, [r7, #24]
 8001adc:	4613      	mov	r3, r2
 8001ade:	019b      	lsls	r3, r3, #6
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <MPR121_autoSetElectrodeCDC+0x160>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	82bb      	strh	r3, [r7, #20]

  uint16_t this_value;
  int16_t last_distance;
  int16_t this_distance;

  const uint8_t max_num_delay_loops = 100;
 8001aec:	2364      	movs	r3, #100	; 0x64
 8001aee:	74fb      	strb	r3, [r7, #19]
  uint8_t num_delay_loops;

  bool scratch = false; // default to failure
 8001af0:	2300      	movs	r3, #0
 8001af2:	773b      	strb	r3, [r7, #28]
  uint8_t saved_num_enabled_electrodes = MPR121_getNumEnabledElectrodes();
 8001af4:	f000 f8fa 	bl	8001cec <MPR121_getNumEnabledElectrodes>
 8001af8:	4603      	mov	r3, r0
 8001afa:	74bb      	strb	r3, [r7, #18]

  MPR121_setNumEnabledElectrodes(electrode + 1); // reducing the number of running electrodes to a minimum speeds things up
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f8ba 	bl	8001c7c <MPR121_setNumEnabledElectrodes>
  if(!running) MPR121_run();
 8001b08:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <MPR121_autoSetElectrodeCDC+0x164>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MPR121_autoSetElectrodeCDC+0x76>
 8001b16:	f7ff fb93 	bl	8001240 <MPR121_run>

  for(uint8_t CDC = 1; CDC < 63; CDC ++){
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	76fb      	strb	r3, [r7, #27]
 8001b1e:	e059      	b.n	8001bd4 <MPR121_autoSetElectrodeCDC+0x130>
	  MPR121_setElectrodeCDC(electrode, CDC);
 8001b20:	7efa      	ldrb	r2, [r7, #27]
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff83 	bl	8001a32 <MPR121_setElectrodeCDC>
    num_delay_loops = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	777b      	strb	r3, [r7, #29]

    do{
    	MPR121_updateFilteredData();
 8001b30:	f7ff fdce 	bl	80016d0 <MPR121_updateFilteredData>
    } while((MPR121_getFilteredData(electrode) == 0) && (num_delay_loops++ < max_num_delay_loops));
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fe34 	bl	80017a4 <MPR121_getFilteredData>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <MPR121_autoSetElectrodeCDC+0xaa>
 8001b42:	7f7b      	ldrb	r3, [r7, #29]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	777a      	strb	r2, [r7, #29]
 8001b48:	7cfa      	ldrb	r2, [r7, #19]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d8f0      	bhi.n	8001b30 <MPR121_autoSetElectrodeCDC+0x8c>

    this_value = MPR121_getFilteredData(electrode);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fe27 	bl	80017a4 <MPR121_getFilteredData>
 8001b56:	4603      	mov	r3, r0
 8001b58:	823b      	strh	r3, [r7, #16]

    this_distance = (uint16_t)(abs((int16_t)this_value - (int16_t)target_FDAT)); // TODO: tidy up signed / unsigned types here
 8001b5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bfb8      	it	lt
 8001b6a:	425b      	neglt	r3, r3
 8001b6c:	81fb      	strh	r3, [r7, #14]
    if(CDC > 1){ // only need to see if we need to quit once we have at least two measurements to compare
 8001b6e:	7efb      	ldrb	r3, [r7, #27]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d92a      	bls.n	8001bca <MPR121_autoSetElectrodeCDC+0x126>
      if(this_distance > last_distance){ // if we got further away from our target this setting should work (slightly prefer higher values)
 8001b74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dd10      	ble.n	8001ba2 <MPR121_autoSetElectrodeCDC+0xfe>
    	  MPR121_setElectrodeCDC(electrode, CDC);
 8001b80:	7efa      	ldrb	r2, [r7, #27]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff53 	bl	8001a32 <MPR121_setElectrodeCDC>
        if((this_value >= lower_limit_FDAT) && (this_value <= upper_limit_FDAT)){
 8001b8c:	8a3a      	ldrh	r2, [r7, #16]
 8001b8e:	8abb      	ldrh	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d323      	bcc.n	8001bdc <MPR121_autoSetElectrodeCDC+0x138>
 8001b94:	8a3a      	ldrh	r2, [r7, #16]
 8001b96:	8b3b      	ldrh	r3, [r7, #24]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d81f      	bhi.n	8001bdc <MPR121_autoSetElectrodeCDC+0x138>
          scratch = true; // success
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	773b      	strb	r3, [r7, #28]
        }
        break;
 8001ba0:	e01c      	b.n	8001bdc <MPR121_autoSetElectrodeCDC+0x138>
      } else if(CDC == 63){ // or if we're at the end of the available adjustment, see if we're close enough
 8001ba2:	7efb      	ldrb	r3, [r7, #27]
 8001ba4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ba6:	d110      	bne.n	8001bca <MPR121_autoSetElectrodeCDC+0x126>
    	  MPR121_setElectrodeCDC(electrode, CDC);
 8001ba8:	7efa      	ldrb	r2, [r7, #27]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff3f 	bl	8001a32 <MPR121_setElectrodeCDC>
        if((this_value >= lower_limit_FDAT) && (this_value <= upper_limit_FDAT)){
 8001bb4:	8a3a      	ldrh	r2, [r7, #16]
 8001bb6:	8abb      	ldrh	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d311      	bcc.n	8001be0 <MPR121_autoSetElectrodeCDC+0x13c>
 8001bbc:	8a3a      	ldrh	r2, [r7, #16]
 8001bbe:	8b3b      	ldrh	r3, [r7, #24]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d80d      	bhi.n	8001be0 <MPR121_autoSetElectrodeCDC+0x13c>
          scratch = true; // success
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	773b      	strb	r3, [r7, #28]
        }
        break;
 8001bc8:	e00a      	b.n	8001be0 <MPR121_autoSetElectrodeCDC+0x13c>
      }
    }
    last_distance = this_distance;
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	83fb      	strh	r3, [r7, #30]
  for(uint8_t CDC = 1; CDC < 63; CDC ++){
 8001bce:	7efb      	ldrb	r3, [r7, #27]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	76fb      	strb	r3, [r7, #27]
 8001bd4:	7efb      	ldrb	r3, [r7, #27]
 8001bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8001bd8:	d9a2      	bls.n	8001b20 <MPR121_autoSetElectrodeCDC+0x7c>
 8001bda:	e002      	b.n	8001be2 <MPR121_autoSetElectrodeCDC+0x13e>
        break;
 8001bdc:	bf00      	nop
 8001bde:	e000      	b.n	8001be2 <MPR121_autoSetElectrodeCDC+0x13e>
        break;
 8001be0:	bf00      	nop
  }

  MPR121_setRegister(MPR121_ECR, ECR_backup);
 8001be2:	225e      	movs	r2, #94	; 0x5e
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MPR121_autoSetElectrodeCDC+0x168>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff f968 	bl	8000ec0 <MPR121_setRegister>
  MPR121_setNumEnabledElectrodes(saved_num_enabled_electrodes); // have to do this separately as ECR_backup gets invalidated by setNumEnabledElectrodes(electrode + 1);
 8001bf0:	7cbb      	ldrb	r3, [r7, #18]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f842 	bl	8001c7c <MPR121_setNumEnabledElectrodes>

  return(scratch);
 8001bf8:	7f3b      	ldrb	r3, [r7, #28]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	51eb851f 	.word	0x51eb851f
 8001c08:	200002c7 	.word	0x200002c7
 8001c0c:	200002c6 	.word	0x200002c6

08001c10 <MPR121_autoSetElectrodeCDC_default>:

bool MPR121_autoSetElectrodeCDC_default(uint8_t electrode){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  // default to 3.3V VCC if not explicitly stated
  return(MPR121_autoSetElectrodeCDC(electrode, 3300));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f640 41e4 	movw	r1, #3300	; 0xce4
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff3f 	bl	8001aa4 <MPR121_autoSetElectrodeCDC>
 8001c26:	4603      	mov	r3, r0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <MPR121_autoSetElectrodeCDC_all>:

bool MPR121_autoSetElectrodeCDC_all(){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  bool scratch = true;
 8001c36:	2301      	movs	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i=0; i < MPR121_getNumEnabledElectrodes(); i++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71bb      	strb	r3, [r7, #6]
 8001c3e:	e010      	b.n	8001c62 <MPR121_autoSetElectrodeCDC_all+0x32>
    scratch = MPR121_autoSetElectrodeCDC_default(i) ? scratch : false;
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ffe4 	bl	8001c10 <MPR121_autoSetElectrodeCDC_default>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <MPR121_autoSetElectrodeCDC_all+0x28>
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MPR121_autoSetElectrodeCDC_all+0x28>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <MPR121_autoSetElectrodeCDC_all+0x2a>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i=0; i < MPR121_getNumEnabledElectrodes(); i++){
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	71bb      	strb	r3, [r7, #6]
 8001c62:	f000 f843 	bl	8001cec <MPR121_getNumEnabledElectrodes>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d3e7      	bcc.n	8001c40 <MPR121_autoSetElectrodeCDC_all+0x10>
  }

  return(scratch);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MPR121_setNumEnabledElectrodes>:
  if(wasRunning){
	  MPR121_run();
  }
}

void MPR121_setNumEnabledElectrodes(uint8_t numElectrodes){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if(!MPR121_isInited()) return;
 8001c86:	f7ff fc99 	bl	80015bc <MPR121_isInited>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d122      	bne.n	8001cdc <MPR121_setNumEnabledElectrodes+0x60>
  bool wasRunning = running;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MPR121_setNumEnabledElectrodes+0x68>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	73fb      	strb	r3, [r7, #15]

  if(numElectrodes>12) numElectrodes = 12; // avoid out-of-bounds behaviour
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d901      	bls.n	8001ca6 <MPR121_setNumEnabledElectrodes+0x2a>
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	71fb      	strb	r3, [r7, #7]

  if(wasRunning){
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MPR121_setNumEnabledElectrodes+0x34>
	  MPR121_stop(); // have to stop to change MPR121_ECR
 8001cac:	f7ff fade 	bl	800126c <MPR121_stop>
  }
  ECR_backup = (0x0F&numElectrodes) | (ECR_backup&0xF0);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	b25a      	sxtb	r2, r3
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MPR121_setNumEnabledElectrodes+0x6c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	f023 030f 	bic.w	r3, r3, #15
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MPR121_setNumEnabledElectrodes+0x6c>)
 8001cce:	701a      	strb	r2, [r3, #0]
  if(wasRunning){
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <MPR121_setNumEnabledElectrodes+0x62>
	  MPR121_run();
 8001cd6:	f7ff fab3 	bl	8001240 <MPR121_run>
 8001cda:	e000      	b.n	8001cde <MPR121_setNumEnabledElectrodes+0x62>
  if(!MPR121_isInited()) return;
 8001cdc:	bf00      	nop
  }
}
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200002c7 	.word	0x200002c7
 8001ce8:	200002c6 	.word	0x200002c6

08001cec <MPR121_getNumEnabledElectrodes>:

uint8_t MPR121_getNumEnabledElectrodes(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  if(!MPR121_isInited()) return(0xFF);
 8001cf0:	f7ff fc64 	bl	80015bc <MPR121_isInited>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MPR121_getNumEnabledElectrodes+0x18>
 8001d00:	23ff      	movs	r3, #255	; 0xff
 8001d02:	e007      	b.n	8001d14 <MPR121_getNumEnabledElectrodes+0x28>

  return(MPR121_getRegister(MPR121_ECR) & 0x0F);
 8001d04:	235e      	movs	r3, #94	; 0x5e
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f97e 	bl	8001008 <MPR121_getRegister>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2db      	uxtb	r3, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <MPR121_setFFI>:

void MPR121_setSamplePeriod(mpr121_sample_interval_type period){
	MPR121_setRegister(MPR121_AFE2, (MPR121_getRegister(MPR121_AFE2) & 0xF8) | (period & 0x07));
}

void MPR121_setFFI(mpr121_FFI_type FFI){
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	MPR121_setRegister(MPR121_AFE1, (MPR121_getRegister(MPR121_AFE1) & 0x3F) | ((FFI & 0x03) << 6));
 8001d22:	245c      	movs	r4, #92	; 0x5c
 8001d24:	235c      	movs	r3, #92	; 0x5c
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f96e 	bl	8001008 <MPR121_getRegister>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7ff f8bb 	bl	8000ec0 <MPR121_setRegister>
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd90      	pop	{r4, r7, pc}

08001d52 <MPR121_setSFI>:

void MPR121_setSFI(mpr121_SFI_type SFI){
 8001d52:	b590      	push	{r4, r7, lr}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
	MPR121_setRegister(MPR121_AFE2, (MPR121_getRegister(MPR121_AFE2) & 0xE7) | ((SFI & 0x03) << 3));
 8001d5c:	245d      	movs	r4, #93	; 0x5d
 8001d5e:	235d      	movs	r3, #93	; 0x5d
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f951 	bl	8001008 <MPR121_getRegister>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	f023 0318 	bic.w	r3, r3, #24
 8001d6e:	b25a      	sxtb	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	f003 0318 	and.w	r3, r3, #24
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff f89b 	bl	8000ec0 <MPR121_setRegister>
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}

08001d92 <LSM303C_init>:
#ifdef SPI_HARDWARE
SPI_HandleTypeDef *spi_handle;
#endif

#ifdef SPI_SOFTWARE
bool LSM303C_init() {
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b088      	sub	sp, #32
 8001d96:	af08      	add	r7, sp, #32
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  */
	if (LSM303C_begin(// Default to I2C bus
 8001d98:	2310      	movs	r3, #16
 8001d9a:	9306      	str	r3, [sp, #24]
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	9305      	str	r3, [sp, #20]
 8001da0:	2308      	movs	r3, #8
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	2300      	movs	r3, #0
 8001da6:	9303      	str	r3, [sp, #12]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	2200      	movs	r2, #0
 8001db8:	2110      	movs	r1, #16
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 fa68 	bl	8002290 <LSM303C_begin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <LSM303C_init+0x38>
							  //ACC_ODR_50_Hz
							  //ACC_ODR_100_Hz
							  //ACC_ODR_200_Hz
							  //ACC_ODR_400_Hz
							  //ACC_ODR_800_Hz
	          ) == IMU_SUCCESS) return true;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LSM303C_init+0x3a>
	else return false;
 8001dca:	2300      	movs	r3, #0

}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <LSM303C_SPI_WriteByte>:

status_t LSM303C_SPI_WriteByte(CHIP_t chip, uint8_t reg, uint8_t data)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b088      	sub	sp, #32
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	71bb      	strb	r3, [r7, #6]
 8001de0:	4613      	mov	r3, r2
 8001de2:	717b      	strb	r3, [r7, #5]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  uint8_t counter;
  uint16_t twoBytes;

  // Clear the read/write bit (bit 7) to do a write
  reg &= ~_BV(7);
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfa:	71bb      	strb	r3, [r7, #6]
  twoBytes = reg << 8 | data;
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	797b      	ldrb	r3, [r7, #5]
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	83bb      	strh	r3, [r7, #28]

  // Set data pin to output
  //bitSet(DIR_REG, DATABIT);
  /*Configure GPIO pins : spi_sck_Pin spi_mosi_Pin */
    GPIO_InitStruct.Pin = DATABIT;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	4619      	mov	r1, r3
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f005 fcd3 	bl	80077d0 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2a:	b672      	cpsid	i
}
 8001e2c:	bf00      	nop

  __disable_irq();

  // Select the chip & deselect the other
  switch (chip)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <LSM303C_SPI_WriteByte+0x68>
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d00d      	beq.n	8001e54 <LSM303C_SPI_WriteByte+0x82>
 8001e38:	e019      	b.n	8001e6e <LSM303C_SPI_WriteByte+0x9c>
  {
  case MAG:
    //bitClear(CSPORT_MAG, CSBIT_MAG);
    HAL_GPIO_WritePin(CSPORT_MAG, CSBIT_MAG, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f005 fe4d 	bl	8007ae0 <HAL_GPIO_WritePin>
    //bitSet(CSPORT_XL, CSBIT_XL);
    HAL_GPIO_WritePin(CSPORT_XL, CSBIT_XL, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4e:	f005 fe47 	bl	8007ae0 <HAL_GPIO_WritePin>
    break;
 8001e52:	e00c      	b.n	8001e6e <LSM303C_SPI_WriteByte+0x9c>
  case ACC:
    //bitClear(CSPORT_XL, CSBIT_XL);
    HAL_GPIO_WritePin(CSPORT_XL, CSBIT_XL, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f005 fe40 	bl	8007ae0 <HAL_GPIO_WritePin>
    //bitSet(CSPORT_MAG, CSBIT_MAG);
    HAL_GPIO_WritePin(CSPORT_MAG, CSBIT_MAG, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f005 fe3a 	bl	8007ae0 <HAL_GPIO_WritePin>
    break;
 8001e6c:	bf00      	nop
  }

  // Shift out 8-bit address & 8-bit data
  for(counter = 16; counter; counter--)
 8001e6e:	2310      	movs	r3, #16
 8001e70:	77fb      	strb	r3, [r7, #31]
 8001e72:	e022      	b.n	8001eba <LSM303C_SPI_WriteByte+0xe8>
  {
    //bitWrite(DATAPORTO, DATABIT, twoBytes & 0x8000);
	  if (twoBytes & 0x8000) {
 8001e74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da06      	bge.n	8001e8a <LSM303C_SPI_WriteByte+0xb8>
		  HAL_GPIO_WritePin(DATAPORTO, DATABIT, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2120      	movs	r1, #32
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f005 fe2c 	bl	8007ae0 <HAL_GPIO_WritePin>
 8001e88:	e005      	b.n	8001e96 <LSM303C_SPI_WriteByte+0xc4>
	  }
	  else {
		  HAL_GPIO_WritePin(DATAPORTO, DATABIT, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e92:	f005 fe25 	bl	8007ae0 <HAL_GPIO_WritePin>
	  }
    // Data is setup, so drop clock edge
    //bitClear(CLKPORT, CLKBIT);
    HAL_GPIO_WritePin(CLKPORT, CLKBIT, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2102      	movs	r1, #2
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f005 fe1f 	bl	8007ae0 <HAL_GPIO_WritePin>
    //bitSet(CLKPORT, CLKBIT);
    HAL_GPIO_WritePin(CLKPORT, CLKBIT, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eaa:	f005 fe19 	bl	8007ae0 <HAL_GPIO_WritePin>
    // Shift off sent bit
    twoBytes <<= 1;
 8001eae:	8bbb      	ldrh	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	83bb      	strh	r3, [r7, #28]
  for(counter = 16; counter; counter--)
 8001eb4:	7ffb      	ldrb	r3, [r7, #31]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	77fb      	strb	r3, [r7, #31]
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1d9      	bne.n	8001e74 <LSM303C_SPI_WriteByte+0xa2>
  }

  // Unselect chip
  switch (chip)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <LSM303C_SPI_WriteByte+0xfa>
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d007      	beq.n	8001eda <LSM303C_SPI_WriteByte+0x108>
 8001eca:	e00d      	b.n	8001ee8 <LSM303C_SPI_WriteByte+0x116>
  {
  case MAG:
    //bitSet(CSPORT_MAG, CSBIT_MAG);
	  HAL_GPIO_WritePin(CSPORT_MAG, CSBIT_MAG, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f005 fe04 	bl	8007ae0 <HAL_GPIO_WritePin>
    break;
 8001ed8:	e006      	b.n	8001ee8 <LSM303C_SPI_WriteByte+0x116>
  case ACC:
    //bitSet(CSPORT_XL, CSBIT_XL);
	  HAL_GPIO_WritePin(CSPORT_XL, CSBIT_XL, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f005 fdfd 	bl	8007ae0 <HAL_GPIO_WritePin>
    break;
 8001ee6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001ee8:	b662      	cpsie	i
}
 8001eea:	bf00      	nop
  __enable_irq();

  // Set data pin to input
  //bitClear(DIR_REG, DATABIT);
  /*Configure GPIO pins : spi_sck_Pin spi_mosi_Pin */
      GPIO_InitStruct.Pin = DATABIT;
 8001eec:	2320      	movs	r3, #32
 8001eee:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4619      	mov	r1, r3
 8001f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f06:	f005 fc63 	bl	80077d0 <HAL_GPIO_Init>

  // Is there a way to verify true success?
  return IMU_SUCCESS;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LSM303C_SPI_ReadByte>:

// This function uses bit manibulation for higher speed & smaller code
uint8_t LSM303C_SPI_ReadByte(CHIP_t chip, uint8_t data)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  uint8_t counter;

  // Set the read/write bit (bit 7) to do a read
  data |= _BV(7);
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3a:	71bb      	strb	r3, [r7, #6]

  // Set data pin to output
  //bitSet(DIR_REG, DATABIT);
  /*Configure GPIO pins : spi_sck_Pin spi_mosi_Pin */
      GPIO_InitStruct.Pin = DATABIT;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f005 fc3b 	bl	80077d0 <HAL_GPIO_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5a:	b672      	cpsid	i
}
 8001f5c:	bf00      	nop

  __disable_irq();

  // Select the chip & deselect the other
  switch (chip)
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <LSM303C_SPI_ReadByte+0x56>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d00d      	beq.n	8001f84 <LSM303C_SPI_ReadByte+0x70>
 8001f68:	e019      	b.n	8001f9e <LSM303C_SPI_ReadByte+0x8a>
   {
   case MAG:
     //bitClear(CSPORT_MAG, CSBIT_MAG);
     HAL_GPIO_WritePin(CSPORT_MAG, CSBIT_MAG, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f005 fdb5 	bl	8007ae0 <HAL_GPIO_WritePin>
     //bitSet(CSPORT_XL, CSBIT_XL);
     HAL_GPIO_WritePin(CSPORT_XL, CSBIT_XL, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7e:	f005 fdaf 	bl	8007ae0 <HAL_GPIO_WritePin>
     break;
 8001f82:	e00c      	b.n	8001f9e <LSM303C_SPI_ReadByte+0x8a>
   case ACC:
     //bitClear(CSPORT_XL, CSBIT_XL);
     HAL_GPIO_WritePin(CSPORT_XL, CSBIT_XL, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8c:	f005 fda8 	bl	8007ae0 <HAL_GPIO_WritePin>
     //bitSet(CSPORT_MAG, CSBIT_MAG);
     HAL_GPIO_WritePin(CSPORT_MAG, CSBIT_MAG, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2140      	movs	r1, #64	; 0x40
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f98:	f005 fda2 	bl	8007ae0 <HAL_GPIO_WritePin>
     break;
 8001f9c:	bf00      	nop
   }

  // Shift out 8-bit address
  for(counter = 8; counter; counter--)
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	77fb      	strb	r3, [r7, #31]
 8001fa2:	e022      	b.n	8001fea <LSM303C_SPI_ReadByte+0xd6>
  {
    //bitWrite(DATAPORTO, DATABIT, data & 0x80);
	if (data & 0x80) {
 8001fa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da06      	bge.n	8001fba <LSM303C_SPI_ReadByte+0xa6>
		HAL_GPIO_WritePin(DATAPORTO, DATABIT, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2120      	movs	r1, #32
 8001fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb4:	f005 fd94 	bl	8007ae0 <HAL_GPIO_WritePin>
 8001fb8:	e005      	b.n	8001fc6 <LSM303C_SPI_ReadByte+0xb2>
	}
	else {
		HAL_GPIO_WritePin(DATAPORTO, DATABIT, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc2:	f005 fd8d 	bl	8007ae0 <HAL_GPIO_WritePin>
	}

    // Data is setup, so drop clock edge
    //bitClear(CLKPORT, CLKBIT);
	HAL_GPIO_WritePin(CLKPORT, CLKBIT, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2102      	movs	r1, #2
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f005 fd87 	bl	8007ae0 <HAL_GPIO_WritePin>
	//bitSet(CLKPORT, CLKBIT);
	HAL_GPIO_WritePin(CLKPORT, CLKBIT, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f005 fd81 	bl	8007ae0 <HAL_GPIO_WritePin>

    // Shift off sent bit
    data <<= 1;
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	71bb      	strb	r3, [r7, #6]
  for(counter = 8; counter; counter--)
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1d9      	bne.n	8001fa4 <LSM303C_SPI_ReadByte+0x90>
  }

  // Switch data pin to input (0 = INPUT)
  //bitClear(DIR_REG, DATABIT);
  GPIO_InitStruct.Pin = DATABIT;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	4619      	mov	r1, r3
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f005 fbe1 	bl	80077d0 <HAL_GPIO_Init>

  // Shift in register data from address
  for(counter = 8; counter; counter--)
 800200e:	2308      	movs	r3, #8
 8002010:	77fb      	strb	r3, [r7, #31]
 8002012:	e01d      	b.n	8002050 <LSM303C_SPI_ReadByte+0x13c>
  {
    // Shift data to the left.  Remains 0 after first shift
    data <<= 1;
 8002014:	79bb      	ldrb	r3, [r7, #6]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	71bb      	strb	r3, [r7, #6]

    //bitClear(CLKPORT, CLKBIT);
    HAL_GPIO_WritePin(CLKPORT, CLKBIT, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2102      	movs	r1, #2
 800201e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002022:	f005 fd5d 	bl	8007ae0 <HAL_GPIO_WritePin>
    // Sample on rising egde
    //bitSet(CLKPORT, CLKBIT);
    HAL_GPIO_WritePin(CLKPORT, CLKBIT, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2102      	movs	r1, #2
 800202a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202e:	f005 fd57 	bl	8007ae0 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(DATAPORTO, DATABIT) == GPIO_PIN_SET)
 8002032:	2120      	movs	r1, #32
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f005 fd3a 	bl	8007ab0 <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d103      	bne.n	800204a <LSM303C_SPI_ReadByte+0x136>
    {
      data |= 0x01;
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	71bb      	strb	r3, [r7, #6]
  for(counter = 8; counter; counter--)
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	3b01      	subs	r3, #1
 800204e:	77fb      	strb	r3, [r7, #31]
 8002050:	7ffb      	ldrb	r3, [r7, #31]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1de      	bne.n	8002014 <LSM303C_SPI_ReadByte+0x100>
    }
  }

  // Unselect chip
    switch (chip)
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <LSM303C_SPI_ReadByte+0x14e>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d007      	beq.n	8002070 <LSM303C_SPI_ReadByte+0x15c>
 8002060:	e00d      	b.n	800207e <LSM303C_SPI_ReadByte+0x16a>
    {
    case MAG:
      //bitSet(CSPORT_MAG, CSBIT_MAG);
  	  HAL_GPIO_WritePin(CSPORT_MAG, CSBIT_MAG, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	2140      	movs	r1, #64	; 0x40
 8002066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206a:	f005 fd39 	bl	8007ae0 <HAL_GPIO_WritePin>
      break;
 800206e:	e006      	b.n	800207e <LSM303C_SPI_ReadByte+0x16a>
    case ACC:
      //bitSet(CSPORT_XL, CSBIT_XL);
  	  HAL_GPIO_WritePin(CSPORT_XL, CSBIT_XL, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f005 fd32 	bl	8007ae0 <HAL_GPIO_WritePin>
      break;
 800207c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800207e:	b662      	cpsie	i
}
 8002080:	bf00      	nop
    }

  __enable_irq();

  return(data);
 8002082:	79bb      	ldrb	r3, [r7, #6]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <LSM303C_MAG_ReadReg>:

#endif


status_t LSM303C_MAG_ReadReg(MAG_REG_t reg, uint8_t *data)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]

  status_t ret = IMU_GENERIC_ERROR;
 8002098:	2303      	movs	r3, #3
 800209a:	73fb      	strb	r3, [r7, #15]

  if (interfaceMode == MODE_I2C)
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <LSM303C_MAG_ReadReg+0x48>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d011      	beq.n	80020c8 <LSM303C_MAG_ReadReg+0x3c>
  {
#ifdef I2C_INTERFACE
    ret = LSM303C_I2C_ByteRead(MAG_I2C_ADDR, reg, data);
#endif
  }
  else if (interfaceMode == MODE_SPI)
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <LSM303C_MAG_ReadReg+0x48>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <LSM303C_MAG_ReadReg+0x38>
  {
#ifdef SPI_SOFTWARE
    *data = LSM303C_SPI_ReadByte(MAG, reg);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4619      	mov	r1, r3
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff ff2f 	bl	8001f14 <LSM303C_SPI_ReadByte>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	701a      	strb	r2, [r3, #0]
#endif

#ifdef SPI_HARDWARE
    *data = LSM303C_SPI_ReadByte_HW(MAG, reg);
#endif
    ret = IMU_SUCCESS;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e001      	b.n	80020c8 <LSM303C_MAG_ReadReg+0x3c>
  }
  else
  {
    ret = IMU_GENERIC_ERROR; // Shouldn't get here
 80020c4:	2303      	movs	r3, #3
 80020c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000312 	.word	0x20000312

080020d8 <LSM303C_MAG_WriteReg>:

uint8_t  LSM303C_MAG_WriteReg(MAG_REG_t reg, uint8_t data)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	460a      	mov	r2, r1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71bb      	strb	r3, [r7, #6]

  uint8_t ret;

  if (interfaceMode == MODE_I2C)
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <LSM303C_MAG_WriteReg+0x40>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d00e      	beq.n	800210e <LSM303C_MAG_WriteReg+0x36>
  {
#ifdef I2C_INTERFACE
    ret = LSM303C_I2C_ByteWrite(MAG_I2C_ADDR, reg, data);
#endif
  }
  else if (interfaceMode == MODE_SPI)
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <LSM303C_MAG_WriteReg+0x40>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <LSM303C_MAG_WriteReg+0x32>
  {
#ifdef SPI_SOFTWARE
    ret = LSM303C_SPI_WriteByte(MAG, reg, data);
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	4619      	mov	r1, r3
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fe67 	bl	8001dd2 <LSM303C_SPI_WriteByte>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <LSM303C_MAG_WriteReg+0x36>
    ret = LSM303C_SPI_WriteByte_HW(MAG, reg, data);
#endif
  }
  else
  {
    ret = IMU_GENERIC_ERROR;
 800210a:	2303      	movs	r3, #3
 800210c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000312 	.word	0x20000312

0800211c <LSM303C_ACC_ReadReg>:

status_t LSM303C_ACC_ReadReg(ACC_REG_t reg, uint8_t *data)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]

  status_t ret;

  if (interfaceMode == MODE_I2C)
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <LSM303C_ACC_ReadReg+0x44>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d011      	beq.n	8002154 <LSM303C_ACC_ReadReg+0x38>
  {
#ifdef I2C_INTERFACE
    ret = LSM303C_I2C_ByteRead(ACC_I2C_ADDR, reg, data);
#endif
  }
  else if (interfaceMode == MODE_SPI)
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <LSM303C_ACC_ReadReg+0x44>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10b      	bne.n	8002150 <LSM303C_ACC_ReadReg+0x34>
  {
#ifdef SPI_SOFTWARE
    *data = LSM303C_SPI_ReadByte(ACC, reg);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	4619      	mov	r1, r3
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff fee9 	bl	8001f14 <LSM303C_SPI_ReadByte>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	701a      	strb	r2, [r3, #0]
#endif

#ifdef SPI_HARDWARE
    *data = LSM303C_SPI_ReadByte_HW(ACC, reg);
#endif
    ret = IMU_SUCCESS;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e001      	b.n	8002154 <LSM303C_ACC_ReadReg+0x38>
  }
  else
  {
    ret = IMU_HW_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000312 	.word	0x20000312

08002164 <LSM303C_ACC_WriteReg>:




uint8_t  LSM303C_ACC_WriteReg(ACC_REG_t reg, uint8_t data)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]

  uint8_t ret;

  if (interfaceMode == MODE_I2C)
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <LSM303C_ACC_WriteReg+0x40>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00e      	beq.n	800219a <LSM303C_ACC_WriteReg+0x36>
  {
#ifdef I2C_INTERFACE
    ret = LSM303C_I2C_ByteWrite(ACC_I2C_ADDR, reg, data);
#endif
  }
  else if (interfaceMode == MODE_SPI)
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <LSM303C_ACC_WriteReg+0x40>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d108      	bne.n	8002196 <LSM303C_ACC_WriteReg+0x32>
  {
#ifdef SPI_SOFTWARE
    ret = LSM303C_SPI_WriteByte(ACC, reg, data);
 8002184:	79ba      	ldrb	r2, [r7, #6]
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4619      	mov	r1, r3
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff fe21 	bl	8001dd2 <LSM303C_SPI_WriteByte>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <LSM303C_ACC_WriteReg+0x36>
    ret = LSM303C_SPI_WriteByte_HW(ACC, reg, data);
#endif
  }
  else
  {
    ret = IMU_GENERIC_ERROR;
 8002196:	2303      	movs	r3, #3
 8002198:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000312 	.word	0x20000312

080021a8 <LSM303C_readTempC>:

float LSM303C_readTempC()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  uint8_t valueL = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	70fb      	strb	r3, [r7, #3]
  uint8_t valueH = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	70bb      	strb	r3, [r7, #2]
  float temperature;

  // Make sure temperature sensor is enabled
  if( LSM303C_MAG_TemperatureEN(MAG_TEMP_EN_ENABLE))
 80021b6:	2080      	movs	r0, #128	; 0x80
 80021b8:	f000 f83e 	bl	8002238 <LSM303C_MAG_TemperatureEN>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <LSM303C_readTempC+0x20>
  {
    return false;
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e030      	b.n	800222a <LSM303C_readTempC+0x82>
  }

	if( LSM303C_MAG_ReadReg(MAG_TEMP_OUT_L, &valueL) )
 80021c8:	1cfb      	adds	r3, r7, #3
 80021ca:	4619      	mov	r1, r3
 80021cc:	202e      	movs	r0, #46	; 0x2e
 80021ce:	f7ff ff5d 	bl	800208c <LSM303C_MAG_ReadReg>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <LSM303C_readTempC+0x36>
  {
    return false;
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e025      	b.n	800222a <LSM303C_readTempC+0x82>
  }

  if( LSM303C_MAG_ReadReg(MAG_TEMP_OUT_H, &valueH) )
 80021de:	1cbb      	adds	r3, r7, #2
 80021e0:	4619      	mov	r1, r3
 80021e2:	202f      	movs	r0, #47	; 0x2f
 80021e4:	f7ff ff52 	bl	800208c <LSM303C_MAG_ReadReg>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <LSM303C_readTempC+0x4c>
  {
    return false;
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e01a      	b.n	800222a <LSM303C_readTempC+0x82>
  }

  temperature = (float)( (valueH << 8) | valueL );
 80021f4:	78bb      	ldrb	r3, [r7, #2]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002204:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature /= 8; // 8 digits/˚C
 8002208:	ed97 7a01 	vldr	s14, [r7, #4]
 800220c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002214:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature += 25;// Reads 0 @ 25˚C
 8002218:	edd7 7a01 	vldr	s15, [r7, #4]
 800221c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002224:	edc7 7a01 	vstr	s15, [r7, #4]

  return temperature;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <LSM303C_MAG_TemperatureEN>:

status_t LSM303C_MAG_TemperatureEN(MAG_TEMP_EN_t val){
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  uint8_t value = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]

  if( LSM303C_MAG_ReadReg(MAG_CTRL_REG1, &value) )
 8002246:	f107 030f 	add.w	r3, r7, #15
 800224a:	4619      	mov	r1, r3
 800224c:	2020      	movs	r0, #32
 800224e:	f7ff ff1d 	bl	800208c <LSM303C_MAG_ReadReg>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <LSM303C_MAG_TemperatureEN+0x24>
  {
    return IMU_HW_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e014      	b.n	8002286 <LSM303C_MAG_TemperatureEN+0x4e>
  }

  value &= ~MAG_TEMP_EN_ENABLE; //mask
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002262:	b2db      	uxtb	r3, r3
 8002264:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4313      	orrs	r3, r2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	73fb      	strb	r3, [r7, #15]

  if( LSM303C_MAG_WriteReg(MAG_CTRL_REG1, value) )
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4619      	mov	r1, r3
 8002274:	2020      	movs	r0, #32
 8002276:	f7ff ff2f 	bl	80020d8 <LSM303C_MAG_WriteReg>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <LSM303C_MAG_TemperatureEN+0x4c>
  {
    return IMU_HW_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <LSM303C_MAG_TemperatureEN+0x4e>
  }

  return IMU_SUCCESS;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <LSM303C_begin>:

status_t LSM303C_begin(InterfaceMode_t im, MAG_DO_t modr, MAG_FS_t mfs,
    MAG_BDU_t mbu, MAG_OMXY_t mxyodr, MAG_OMZ_t mzodr, MAG_MD_t mm,
    ACC_FS_t afs, ACC_BDU_t abu, uint8_t aea, ACC_ODR_t aodr)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	4604      	mov	r4, r0
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4623      	mov	r3, r4
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	4603      	mov	r3, r0
 80022a4:	71bb      	strb	r3, [r7, #6]
 80022a6:	460b      	mov	r3, r1
 80022a8:	717b      	strb	r3, [r7, #5]
 80022aa:	4613      	mov	r3, r2
 80022ac:	713b      	strb	r3, [r7, #4]
  uint8_t successes = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
  // Select I2C or SPI
  interfaceMode = im;
 80022b2:	4a46      	ldr	r2, [pc, #280]	; (80023cc <LSM303C_begin+0x13c>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	7013      	strb	r3, [r2, #0]

  if (interfaceMode == MODE_SPI)
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <LSM303C_begin+0x13c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d119      	bne.n	80022f4 <LSM303C_begin+0x64>
    //bitSet(CSPORT_XL, CSBIT_XL);
    // Clock polarity (CPOL) = 1
    //bitSet(CLKPORT, CLKBIT);
    // SPI Serial Interface Mode (SIM) bits must be set
#ifdef SPI_SOFTWARE
	LSM303C_SPI_WriteByte(ACC, ACC_CTRL4, 0b111);
 80022c0:	2207      	movs	r2, #7
 80022c2:	2123      	movs	r1, #35	; 0x23
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7ff fd84 	bl	8001dd2 <LSM303C_SPI_WriteByte>
	LSM303C_SPI_WriteByte(MAG, MAG_CTRL_REG3, _BV(2));
 80022ca:	2204      	movs	r2, #4
 80022cc:	2122      	movs	r1, #34	; 0x22
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fd7f 	bl	8001dd2 <LSM303C_SPI_WriteByte>
	who_is_mag = LSM303C_SPI_ReadByte(MAG, MAG_WHO_AM_I);
 80022d4:	210f      	movs	r1, #15
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff fe1c 	bl	8001f14 <LSM303C_SPI_ReadByte>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <LSM303C_begin+0x140>)
 80022e2:	701a      	strb	r2, [r3, #0]
	who_is_acc = LSM303C_SPI_ReadByte(ACC, ACC_WHO_AM_I);
 80022e4:	210f      	movs	r1, #15
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7ff fe14 	bl	8001f14 <LSM303C_SPI_ReadByte>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <LSM303C_begin+0x144>)
 80022f2:	701a      	strb	r2, [r3, #0]
    //I2C Mode
    //initialize I2C bus and clock stretch in the setup()
  }
  ////////// Initialize Magnetometer //////////
  // Initialize magnetometer output data rate
  successes += LSM303C_MAG_SetODR(modr);
 80022f4:	79bb      	ldrb	r3, [r7, #6]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f86e 	bl	80023d8 <LSM303C_MAG_SetODR>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	4413      	add	r3, r2
 8002304:	73fb      	strb	r3, [r7, #15]
  // Initialize magnetic field full scale
  successes += LSM303C_MAG_SetFullScale(mfs);
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f88e 	bl	800242a <LSM303C_MAG_SetFullScale>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	4413      	add	r3, r2
 8002316:	73fb      	strb	r3, [r7, #15]
  // Enabling block data updating
  successes += LSM303C_MAG_BlockDataUpdate(mbu);
 8002318:	793b      	ldrb	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f8ae 	bl	800247c <LSM303C_MAG_BlockDataUpdate>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	4413      	add	r3, r2
 8002328:	73fb      	strb	r3, [r7, #15]
  // Initialize magnetometer X/Y axes ouput data rate
  successes += LSM303C_MAG_XY_AxOperativeMode(mxyodr);
 800232a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f8ec 	bl	800250c <LSM303C_MAG_XY_AxOperativeMode>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4413      	add	r3, r2
 800233c:	73fb      	strb	r3, [r7, #15]
  // Initialize magnetometer Z axis performance mode
  successes += LSM303C_MAG_Z_AxOperativeMode(mzodr);
 800233e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f90b 	bl	800255e <LSM303C_MAG_Z_AxOperativeMode>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	4413      	add	r3, r2
 8002350:	73fb      	strb	r3, [r7, #15]
  // Initialize magnetometer run mode.
  successes += LSM303C_MAG_SetMode(mm);
 8002352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f92a 	bl	80025b0 <LSM303C_MAG_SetMode>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	4413      	add	r3, r2
 8002364:	73fb      	strb	r3, [r7, #15]

  ////////// Initialize Accelerometer //////////
  // Initialize acceleration full scale
  successes += LSM303C_ACC_SetFullScale(afs);
 8002366:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f94b 	bl	8002606 <LSM303C_ACC_SetFullScale>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4413      	add	r3, r2
 8002378:	73fb      	strb	r3, [r7, #15]
  // Enable block data updating
  successes += LSM303C_ACC_BlockDataUpdate(abu);
 800237a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f96c 	bl	800265c <LSM303C_ACC_BlockDataUpdate>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4413      	add	r3, r2
 800238c:	73fb      	strb	r3, [r7, #15]
  // Enable X, Y, and Z accelerometer axes
  successes += LSM303C_ACC_EnableAxis(aea);
 800238e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f98d 	bl	80026b2 <LSM303C_ACC_EnableAxis>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4413      	add	r3, r2
 80023a0:	73fb      	strb	r3, [r7, #15]
  // Initialize accelerometer output data rate
  successes += LSM303C_ACC_SetODR(aodr);
 80023a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f9ae 	bl	8002708 <LSM303C_ACC_SetODR>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	4413      	add	r3, r2
 80023b4:	73fb      	strb	r3, [r7, #15]

  return (successes == IMU_SUCCESS) ? IMU_SUCCESS : IMU_HW_ERROR;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000312 	.word	0x20000312
 80023d0:	20000313 	.word	0x20000313
 80023d4:	20000314 	.word	0x20000314

080023d8 <LSM303C_MAG_SetODR>:

// Methods required to get device up and running
status_t LSM303C_MAG_SetODR(MAG_DO_t val)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value;

  if(LSM303C_MAG_ReadReg(MAG_CTRL_REG1, &value))
 80023e2:	f107 030f 	add.w	r3, r7, #15
 80023e6:	4619      	mov	r1, r3
 80023e8:	2020      	movs	r0, #32
 80023ea:	f7ff fe4f 	bl	800208c <LSM303C_MAG_ReadReg>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <LSM303C_MAG_SetODR+0x20>
  {
    //debug_printlns("Failed Read from MAG_CTRL_REG1");
    return IMU_HW_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e014      	b.n	8002422 <LSM303C_MAG_SetODR+0x4a>
  }

  // Mask and only change DO0 bits (4:2) of MAG_CTRL_REG1
  value &= ~MAG_DO_80_Hz;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	f023 031c 	bic.w	r3, r3, #28
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4313      	orrs	r3, r2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	73fb      	strb	r3, [r7, #15]

  if(LSM303C_MAG_WriteReg(MAG_CTRL_REG1, value))
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	4619      	mov	r1, r3
 8002410:	2020      	movs	r0, #32
 8002412:	f7ff fe61 	bl	80020d8 <LSM303C_MAG_WriteReg>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <LSM303C_MAG_SetODR+0x48>
  {
    return IMU_HW_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <LSM303C_MAG_SetODR+0x4a>
  }

  return IMU_SUCCESS;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <LSM303C_MAG_SetFullScale>:

status_t LSM303C_MAG_SetFullScale(MAG_FS_t val)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value;

  if ( LSM303C_MAG_ReadReg(MAG_CTRL_REG2, &value) )
 8002434:	f107 030f 	add.w	r3, r7, #15
 8002438:	4619      	mov	r1, r3
 800243a:	2021      	movs	r0, #33	; 0x21
 800243c:	f7ff fe26 	bl	800208c <LSM303C_MAG_ReadReg>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <LSM303C_MAG_SetFullScale+0x20>
  {
    return IMU_HW_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e014      	b.n	8002474 <LSM303C_MAG_SetFullScale+0x4a>
  }

  value &= ~MAG_FS_16_Ga; //mask
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002450:	b2db      	uxtb	r3, r3
 8002452:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	4313      	orrs	r3, r2
 800245a:	b2db      	uxtb	r3, r3
 800245c:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_MAG_WriteReg(MAG_CTRL_REG2, value) )
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	4619      	mov	r1, r3
 8002462:	2021      	movs	r0, #33	; 0x21
 8002464:	f7ff fe38 	bl	80020d8 <LSM303C_MAG_WriteReg>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <LSM303C_MAG_SetFullScale+0x48>
  {
    return IMU_HW_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LSM303C_MAG_SetFullScale+0x4a>
  }

  return IMU_SUCCESS;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <LSM303C_MAG_BlockDataUpdate>:

status_t LSM303C_MAG_BlockDataUpdate(MAG_BDU_t val)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value;

  if ( LSM303C_MAG_ReadReg(MAG_CTRL_REG5, &value) )
 8002486:	f107 030f 	add.w	r3, r7, #15
 800248a:	4619      	mov	r1, r3
 800248c:	2024      	movs	r0, #36	; 0x24
 800248e:	f7ff fdfd 	bl	800208c <LSM303C_MAG_ReadReg>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <LSM303C_MAG_BlockDataUpdate+0x20>
  {
    return IMU_HW_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e014      	b.n	80024c6 <LSM303C_MAG_BlockDataUpdate+0x4a>
  }


  value &= ~MAG_BDU_ENABLE; //mask
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	73fb      	strb	r3, [r7, #15]
  value |= val;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_MAG_WriteReg(MAG_CTRL_REG5, value) )
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2024      	movs	r0, #36	; 0x24
 80024b6:	f7ff fe0f 	bl	80020d8 <LSM303C_MAG_WriteReg>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <LSM303C_MAG_BlockDataUpdate+0x48>
  {
    return IMU_HW_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LSM303C_MAG_BlockDataUpdate+0x4a>
  }

  return IMU_SUCCESS;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <LSM303C_MAG_XYZ_AxDataAvailable>:

status_t LSM303C_MAG_XYZ_AxDataAvailable(uint8_t *value)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	uint8_t val = 0, tmp1 = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73bb      	strb	r3, [r7, #14]
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  if ( LSM303C_MAG_ReadReg(MAG_STATUS_REG, &val) )
 80024de:	f107 030e 	add.w	r3, r7, #14
 80024e2:	4619      	mov	r1, r3
 80024e4:	2027      	movs	r0, #39	; 0x27
 80024e6:	f7ff fdd1 	bl	800208c <LSM303C_MAG_ReadReg>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <LSM303C_MAG_XYZ_AxDataAvailable+0x26>
  {
    return IMU_HW_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <LSM303C_MAG_XYZ_AxDataAvailable+0x36>
  }
  tmp1 = val & 0x08;
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	73fb      	strb	r3, [r7, #15]
  *value = tmp1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	701a      	strb	r2, [r3, #0]

  return IMU_SUCCESS;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <LSM303C_MAG_XY_AxOperativeMode>:

status_t LSM303C_MAG_XY_AxOperativeMode(MAG_OMXY_t val)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);

  uint8_t value;

  if ( LSM303C_MAG_ReadReg(MAG_CTRL_REG1, &value) )
 8002516:	f107 030f 	add.w	r3, r7, #15
 800251a:	4619      	mov	r1, r3
 800251c:	2020      	movs	r0, #32
 800251e:	f7ff fdb5 	bl	800208c <LSM303C_MAG_ReadReg>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <LSM303C_MAG_XY_AxOperativeMode+0x20>
  {
    return IMU_HW_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e014      	b.n	8002556 <LSM303C_MAG_XY_AxOperativeMode+0x4a>
  }

  value &= ~MAG_OMXY_ULTRA_HIGH_PERFORMANCE; //mask
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002532:	b2db      	uxtb	r3, r3
 8002534:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	4313      	orrs	r3, r2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_MAG_WriteReg(MAG_CTRL_REG1, value) )
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	4619      	mov	r1, r3
 8002544:	2020      	movs	r0, #32
 8002546:	f7ff fdc7 	bl	80020d8 <LSM303C_MAG_WriteReg>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <LSM303C_MAG_XY_AxOperativeMode+0x48>
  {
    return IMU_HW_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LSM303C_MAG_XY_AxOperativeMode+0x4a>
  }

  return IMU_SUCCESS;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <LSM303C_MAG_Z_AxOperativeMode>:

status_t LSM303C_MAG_Z_AxOperativeMode(MAG_OMZ_t val)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value;

  if ( LSM303C_MAG_ReadReg(MAG_CTRL_REG4, &value) )
 8002568:	f107 030f 	add.w	r3, r7, #15
 800256c:	4619      	mov	r1, r3
 800256e:	2023      	movs	r0, #35	; 0x23
 8002570:	f7ff fd8c 	bl	800208c <LSM303C_MAG_ReadReg>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <LSM303C_MAG_Z_AxOperativeMode+0x20>
  {
    return IMU_HW_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e014      	b.n	80025a8 <LSM303C_MAG_Z_AxOperativeMode+0x4a>
  }

  value &= ~MAG_OMZ_ULTRA_HIGH_PERFORMANCE; //mask
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	f023 030c 	bic.w	r3, r3, #12
 8002584:	b2db      	uxtb	r3, r3
 8002586:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4313      	orrs	r3, r2
 800258e:	b2db      	uxtb	r3, r3
 8002590:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_MAG_WriteReg(MAG_CTRL_REG4, value) )
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	4619      	mov	r1, r3
 8002596:	2023      	movs	r0, #35	; 0x23
 8002598:	f7ff fd9e 	bl	80020d8 <LSM303C_MAG_WriteReg>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <LSM303C_MAG_Z_AxOperativeMode+0x48>
  {
    return IMU_HW_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LSM303C_MAG_Z_AxOperativeMode+0x4a>
  }

  return IMU_SUCCESS;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <LSM303C_MAG_SetMode>:

status_t LSM303C_MAG_SetMode(MAG_MD_t val)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_MAG_ReadReg(MAG_CTRL_REG3, &value) )
 80025be:	f107 030f 	add.w	r3, r7, #15
 80025c2:	4619      	mov	r1, r3
 80025c4:	2022      	movs	r0, #34	; 0x22
 80025c6:	f7ff fd61 	bl	800208c <LSM303C_MAG_ReadReg>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <LSM303C_MAG_SetMode+0x24>
  {
    //debug_print("Failed to read MAG_CTRL_REG3. 'Read': 0x");
    //debug_printlns(value, HEX);
    return IMU_HW_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e014      	b.n	80025fe <LSM303C_MAG_SetMode+0x4e>
  }

  value &= ~MAG_MD_POWER_DOWN_2;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	73fb      	strb	r3, [r7, #15]
  value |= val;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_MAG_WriteReg(MAG_CTRL_REG3, value) )
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	4619      	mov	r1, r3
 80025ec:	2022      	movs	r0, #34	; 0x22
 80025ee:	f7ff fd73 	bl	80020d8 <LSM303C_MAG_WriteReg>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <LSM303C_MAG_SetMode+0x4c>
  {
    return IMU_HW_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LSM303C_MAG_SetMode+0x4e>
  }

  return IMU_SUCCESS;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <LSM303C_ACC_SetFullScale>:

status_t LSM303C_ACC_SetFullScale(ACC_FS_t val)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_ReadReg(ACC_CTRL4, &value) )
 8002614:	f107 030f 	add.w	r3, r7, #15
 8002618:	4619      	mov	r1, r3
 800261a:	2023      	movs	r0, #35	; 0x23
 800261c:	f7ff fd7e 	bl	800211c <LSM303C_ACC_ReadReg>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <LSM303C_ACC_SetFullScale+0x24>
  {
    //debug_printlns("Failed ACC read");
    return IMU_HW_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e014      	b.n	8002654 <LSM303C_ACC_SetFullScale+0x4e>
  }

  value &= ~ACC_FS_8g;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002630:	b2db      	uxtb	r3, r3
 8002632:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4313      	orrs	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	73fb      	strb	r3, [r7, #15]


  if ( LSM303C_ACC_WriteReg(ACC_CTRL4, value) )
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	4619      	mov	r1, r3
 8002642:	2023      	movs	r0, #35	; 0x23
 8002644:	f7ff fd8e 	bl	8002164 <LSM303C_ACC_WriteReg>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <LSM303C_ACC_SetFullScale+0x4c>
  {
    return IMU_HW_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LSM303C_ACC_SetFullScale+0x4e>
  }

  return IMU_SUCCESS;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <LSM303C_ACC_BlockDataUpdate>:

status_t LSM303C_ACC_BlockDataUpdate(ACC_BDU_t val)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_ReadReg(ACC_CTRL1, &value) )
 800266a:	f107 030f 	add.w	r3, r7, #15
 800266e:	4619      	mov	r1, r3
 8002670:	2020      	movs	r0, #32
 8002672:	f7ff fd53 	bl	800211c <LSM303C_ACC_ReadReg>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <LSM303C_ACC_BlockDataUpdate+0x24>
  {
    return IMU_HW_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e014      	b.n	80026aa <LSM303C_ACC_BlockDataUpdate+0x4e>
  }

  value &= ~ACC_BDU_ENABLE;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	f023 0308 	bic.w	r3, r3, #8
 8002686:	b2db      	uxtb	r3, r3
 8002688:	73fb      	strb	r3, [r7, #15]
  value |= val;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4313      	orrs	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_WriteReg(ACC_CTRL1, value) )
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	4619      	mov	r1, r3
 8002698:	2020      	movs	r0, #32
 800269a:	f7ff fd63 	bl	8002164 <LSM303C_ACC_WriteReg>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <LSM303C_ACC_BlockDataUpdate+0x4c>
  {
    return IMU_HW_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <LSM303C_ACC_BlockDataUpdate+0x4e>
  }

  return IMU_SUCCESS;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <LSM303C_ACC_EnableAxis>:

status_t LSM303C_ACC_EnableAxis(uint8_t val)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_ReadReg(ACC_CTRL1, &value) )
 80026c0:	f107 030f 	add.w	r3, r7, #15
 80026c4:	4619      	mov	r1, r3
 80026c6:	2020      	movs	r0, #32
 80026c8:	f7ff fd28 	bl	800211c <LSM303C_ACC_ReadReg>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <LSM303C_ACC_EnableAxis+0x24>
  {
    //debug_println(AERROR);
    return IMU_HW_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e014      	b.n	8002700 <LSM303C_ACC_EnableAxis+0x4e>
  }

  value &= ~0x07;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	f023 0307 	bic.w	r3, r3, #7
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	73fb      	strb	r3, [r7, #15]
  value |= val;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_WriteReg(ACC_CTRL1, value) )
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2020      	movs	r0, #32
 80026f0:	f7ff fd38 	bl	8002164 <LSM303C_ACC_WriteReg>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <LSM303C_ACC_EnableAxis+0x4c>
  {
    return IMU_HW_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LSM303C_ACC_EnableAxis+0x4e>
  }

  return IMU_SUCCESS;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <LSM303C_ACC_SetODR>:

status_t LSM303C_ACC_SetODR(ACC_ODR_t val)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  //debug_print(EMPTY);
  uint8_t value = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_ReadReg(ACC_CTRL1, &value) )
 8002716:	f107 030f 	add.w	r3, r7, #15
 800271a:	4619      	mov	r1, r3
 800271c:	2020      	movs	r0, #32
 800271e:	f7ff fcfd 	bl	800211c <LSM303C_ACC_ReadReg>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <LSM303C_ACC_SetODR+0x24>
  {
    return IMU_HW_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e014      	b.n	8002756 <LSM303C_ACC_SetODR+0x4e>
  }

  value &= ~ACC_ODR_MASK;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002732:	b2db      	uxtb	r3, r3
 8002734:	73fb      	strb	r3, [r7, #15]
  value |= val;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	4313      	orrs	r3, r2
 800273c:	b2db      	uxtb	r3, r3
 800273e:	73fb      	strb	r3, [r7, #15]

  if ( LSM303C_ACC_WriteReg(ACC_CTRL1, value) )
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	4619      	mov	r1, r3
 8002744:	2020      	movs	r0, #32
 8002746:	f7ff fd0d 	bl	8002164 <LSM303C_ACC_WriteReg>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <LSM303C_ACC_SetODR+0x4c>
  {
    return IMU_HW_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <LSM303C_ACC_SetODR+0x4e>
  }

  return IMU_SUCCESS;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <LSM303C_readMagX>:
	LSM303C_MAG_WriteReg(MAG_CTRL_REG5, 0x40);
	LSM303C_ACC_WriteReg(ACC_CTRL5, 0x40);
}

float LSM303C_readMagX()
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  return LSM303C_readMag(xAxis);
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f81a 	bl	800279c <LSM303C_readMag>
 8002768:	eef0 7a40 	vmov.f32	s15, s0
}
 800276c:	eeb0 0a67 	vmov.f32	s0, s15
 8002770:	bd80      	pop	{r7, pc}

08002772 <LSM303C_readMagY>:

float LSM303C_readMagY()
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  return LSM303C_readMag(yAxis);
 8002776:	2001      	movs	r0, #1
 8002778:	f000 f810 	bl	800279c <LSM303C_readMag>
 800277c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002780:	eeb0 0a67 	vmov.f32	s0, s15
 8002784:	bd80      	pop	{r7, pc}

08002786 <LSM303C_readMagZ>:

float LSM303C_readMagZ()
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  return LSM303C_readMag(zAxis);
 800278a:	2002      	movs	r0, #2
 800278c:	f000 f806 	bl	800279c <LSM303C_readMag>
 8002790:	eef0 7a40 	vmov.f32	s15, s0
}
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <LSM303C_readMag>:


float LSM303C_readMag(AXIS_t dir)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	MAG_XYZDA_t flag_MAG_XYZDA = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73bb      	strb	r3, [r7, #14]
  status_t response = LSM303C_MAG_XYZ_AxDataAvailable(&flag_MAG_XYZDA);
 80027aa:	f107 030e 	add.w	r3, r7, #14
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fe8d 	bl	80024ce <LSM303C_MAG_XYZ_AxDataAvailable>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]

  if (response != IMU_SUCCESS)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <LSM303C_readMag+0x28>
  {
    //debug_println(MERROR);
    return false;
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e051      	b.n	8002868 <LSM303C_readMag+0xcc>
  }

  // Check for new data in the status flags with a mask
  if (flag_MAG_XYZDA & MAG_XYZDA_YES)
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <LSM303C_readMag+0x3c>
  {
    response = LSM303C_MAG_GetMagRaw(&magData);
 80027ce:	482a      	ldr	r0, [pc, #168]	; (8002878 <LSM303C_readMag+0xdc>)
 80027d0:	f000 f854 	bl	800287c <LSM303C_MAG_GetMagRaw>
 80027d4:	4603      	mov	r3, r0
 80027d6:	73fb      	strb	r3, [r7, #15]
    //debug_println("Fresh raw data");
  }
  //convert from LSB to Gauss
  switch (dir)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d02e      	beq.n	800283c <LSM303C_readMag+0xa0>
 80027de:	2b02      	cmp	r3, #2
 80027e0:	dc40      	bgt.n	8002864 <LSM303C_readMag+0xc8>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <LSM303C_readMag+0x50>
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d014      	beq.n	8002814 <LSM303C_readMag+0x78>
 80027ea:	e03b      	b.n	8002864 <LSM303C_readMag+0xc8>
  {
  case xAxis:
    return magData.xAxis * SENSITIVITY_MAG;
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <LSM303C_readMag+0xdc>)
 80027ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fe6e 	bl	80004d4 <__aeabi_i2d>
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002800:	f7fd fed2 	bl	80005a8 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f9c4 	bl	8000b98 <__aeabi_d2f>
 8002810:	4603      	mov	r3, r0
 8002812:	e029      	b.n	8002868 <LSM303C_readMag+0xcc>
    break;
  case yAxis:
    return magData.yAxis * SENSITIVITY_MAG;
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <LSM303C_readMag+0xdc>)
 8002816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe5a 	bl	80004d4 <__aeabi_i2d>
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002828:	f7fd febe 	bl	80005a8 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f9b0 	bl	8000b98 <__aeabi_d2f>
 8002838:	4603      	mov	r3, r0
 800283a:	e015      	b.n	8002868 <LSM303C_readMag+0xcc>
    break;
  case zAxis:
    return magData.zAxis * SENSITIVITY_MAG;
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <LSM303C_readMag+0xdc>)
 800283e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe46 	bl	80004d4 <__aeabi_i2d>
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002850:	f7fd feaa 	bl	80005a8 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f7fe f99c 	bl	8000b98 <__aeabi_d2f>
 8002860:	4603      	mov	r3, r0
 8002862:	e001      	b.n	8002868 <LSM303C_readMag+0xcc>
    break;
  default:
    return false;
 8002864:	f04f 0300 	mov.w	r3, #0
  }

  // Should never get here
  //debug_println("Returning NAN");
  return false;
}
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb0 0a67 	vmov.f32	s0, s15
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000030c 	.word	0x2000030c

0800287c <LSM303C_MAG_GetMagRaw>:

status_t LSM303C_MAG_GetMagRaw(AxesRaw_t *buff)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  //debug_print(EMPTY);
  uint8_t valueL = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
  uint8_t valueH = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	73bb      	strb	r3, [r7, #14]

  //debug_println("& was false");
  if( LSM303C_MAG_ReadReg(MAG_OUTX_L, &valueL) )
 800288c:	f107 030f 	add.w	r3, r7, #15
 8002890:	4619      	mov	r1, r3
 8002892:	2028      	movs	r0, #40	; 0x28
 8002894:	f7ff fbfa 	bl	800208c <LSM303C_MAG_ReadReg>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <LSM303C_MAG_GetMagRaw+0x26>
  {
    return IMU_HW_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e052      	b.n	8002948 <LSM303C_MAG_GetMagRaw+0xcc>
  }

  if( LSM303C_MAG_ReadReg(MAG_OUTX_H, &valueH) )
 80028a2:	f107 030e 	add.w	r3, r7, #14
 80028a6:	4619      	mov	r1, r3
 80028a8:	2029      	movs	r0, #41	; 0x29
 80028aa:	f7ff fbef 	bl	800208c <LSM303C_MAG_ReadReg>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <LSM303C_MAG_GetMagRaw+0x3c>
  {
    return IMU_HW_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e047      	b.n	8002948 <LSM303C_MAG_GetMagRaw+0xcc>
  }

  buff->xAxis = (int16_t)( (valueH << 8) | valueL );
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b21a      	sxth	r2, r3
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	801a      	strh	r2, [r3, #0]

  if( LSM303C_MAG_ReadReg(MAG_OUTY_L, &valueL) )
 80028ca:	f107 030f 	add.w	r3, r7, #15
 80028ce:	4619      	mov	r1, r3
 80028d0:	202a      	movs	r0, #42	; 0x2a
 80028d2:	f7ff fbdb 	bl	800208c <LSM303C_MAG_ReadReg>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <LSM303C_MAG_GetMagRaw+0x64>
  {
    return IMU_HW_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e033      	b.n	8002948 <LSM303C_MAG_GetMagRaw+0xcc>
  }

  if( LSM303C_MAG_ReadReg(MAG_OUTY_H, &valueH) )
 80028e0:	f107 030e 	add.w	r3, r7, #14
 80028e4:	4619      	mov	r1, r3
 80028e6:	202b      	movs	r0, #43	; 0x2b
 80028e8:	f7ff fbd0 	bl	800208c <LSM303C_MAG_ReadReg>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <LSM303C_MAG_GetMagRaw+0x7a>
  {
    return IMU_HW_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e028      	b.n	8002948 <LSM303C_MAG_GetMagRaw+0xcc>
  }

  buff->yAxis = (int16_t)( (valueH << 8) | valueL );
 80028f6:	7bbb      	ldrb	r3, [r7, #14]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b21a      	sxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	805a      	strh	r2, [r3, #2]

  if( LSM303C_MAG_ReadReg(MAG_OUTZ_L, &valueL) )
 8002908:	f107 030f 	add.w	r3, r7, #15
 800290c:	4619      	mov	r1, r3
 800290e:	202c      	movs	r0, #44	; 0x2c
 8002910:	f7ff fbbc 	bl	800208c <LSM303C_MAG_ReadReg>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <LSM303C_MAG_GetMagRaw+0xa2>
  {
    return IMU_HW_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e014      	b.n	8002948 <LSM303C_MAG_GetMagRaw+0xcc>
  }

  if( LSM303C_MAG_ReadReg(MAG_OUTZ_H, &valueH) )
 800291e:	f107 030e 	add.w	r3, r7, #14
 8002922:	4619      	mov	r1, r3
 8002924:	202d      	movs	r0, #45	; 0x2d
 8002926:	f7ff fbb1 	bl	800208c <LSM303C_MAG_ReadReg>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <LSM303C_MAG_GetMagRaw+0xb8>
  {
    return IMU_HW_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e009      	b.n	8002948 <LSM303C_MAG_GetMagRaw+0xcc>
  }

  buff->zAxis = (int16_t)( (valueH << 8) | valueL );
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21a      	sxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	809a      	strh	r2, [r3, #4]

  return IMU_SUCCESS;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <LSM303C_ACC_Status_Flags>:

status_t LSM303C_ACC_Status_Flags(uint8_t *val)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  //debug_println("Getting accel status");
  if( LSM303C_ACC_ReadReg(ACC_STATUS, val) )
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	2027      	movs	r0, #39	; 0x27
 800295c:	f7ff fbde 	bl	800211c <LSM303C_ACC_ReadReg>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <LSM303C_ACC_Status_Flags+0x1a>
  {
    //debug_println(AERROR);
    return IMU_HW_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LSM303C_ACC_Status_Flags+0x1c>
  }

  return IMU_SUCCESS;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <LSM303C_readAccelX>:
  return false;
}


float LSM303C_readAccelX()
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  uint8_t flag_ACC_STATUS_FLAGS;
  status_t response = LSM303C_ACC_Status_Flags(&flag_ACC_STATUS_FLAGS);
 800297a:	1dbb      	adds	r3, r7, #6
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ffe7 	bl	8002950 <LSM303C_ACC_Status_Flags>
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]

  if (response != IMU_SUCCESS)
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <LSM303C_readAccelX+0x1e>
  {
    //debug_println(AERROR);
    return false;
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e033      	b.n	80029fa <LSM303C_readAccelX+0x86>
  }

  // Check for new data in the status flags with a mask
  // If there isn't new data use the last data read.
  // There are valid cases for this, like reading faster than refresh rate.
  if (flag_ACC_STATUS_FLAGS & ACC_X_NEW_DATA_AVAILABLE)
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02c      	beq.n	80029f6 <LSM303C_readAccelX+0x82>
  {
    uint8_t valueL;
    uint8_t valueH;

    if ( LSM303C_ACC_ReadReg(ACC_OUT_X_H, &valueH) )
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	2029      	movs	r0, #41	; 0x29
 80029a2:	f7ff fbbb 	bl	800211c <LSM303C_ACC_ReadReg>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <LSM303C_readAccelX+0x3e>
    {
	    return IMU_HW_ERROR;
 80029ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029b0:	e023      	b.n	80029fa <LSM303C_readAccelX+0x86>
    }

    if ( LSM303C_ACC_ReadReg(ACC_OUT_X_L, &valueL) )
 80029b2:	1d7b      	adds	r3, r7, #5
 80029b4:	4619      	mov	r1, r3
 80029b6:	2028      	movs	r0, #40	; 0x28
 80029b8:	f7ff fbb0 	bl	800211c <LSM303C_ACC_ReadReg>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <LSM303C_readAccelX+0x54>
    {
	    return IMU_HW_ERROR;
 80029c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029c6:	e018      	b.n	80029fa <LSM303C_readAccelX+0x86>
    }

    //debug_println("Fresh raw data");

    //convert from LSB to mg
    return (int16_t)(( (valueH << 8) | valueL )) * SENSITIVITY_ACC;
 80029c8:	793b      	ldrb	r3, [r7, #4]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fd7c 	bl	80004d4 <__aeabi_i2d>
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <LSM303C_readAccelX+0x94>)
 80029e2:	f7fd fde1 	bl	80005a8 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7fe f8d3 	bl	8000b98 <__aeabi_d2f>
 80029f2:	4603      	mov	r3, r0
 80029f4:	e001      	b.n	80029fa <LSM303C_readAccelX+0x86>
  }

  // Should never get here
  //debug_println("Returning NAN");
  return false;
 80029f6:	f04f 0300 	mov.w	r3, #0
}
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	3faf4000 	.word	0x3faf4000

08002a0c <LSM303C_readAccelY>:

float LSM303C_readAccelY()
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  uint8_t flag_ACC_STATUS_FLAGS;
  status_t response = LSM303C_ACC_Status_Flags(&flag_ACC_STATUS_FLAGS);
 8002a12:	1dbb      	adds	r3, r7, #6
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff9b 	bl	8002950 <LSM303C_ACC_Status_Flags>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]

  if (response != IMU_SUCCESS)
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <LSM303C_readAccelY+0x1e>
  {
    //debug_println(AERROR);
    return false;
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e033      	b.n	8002a92 <LSM303C_readAccelY+0x86>
  }

  // Check for new data in the status flags with a mask
  // If there isn't new data use the last data read.
  // There are valid cases for this, like reading faster than refresh rate.
  if (flag_ACC_STATUS_FLAGS & ACC_Y_NEW_DATA_AVAILABLE)
 8002a2a:	79bb      	ldrb	r3, [r7, #6]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02c      	beq.n	8002a8e <LSM303C_readAccelY+0x82>
  {
    uint8_t valueL;
    uint8_t valueH;

    if ( LSM303C_ACC_ReadReg(ACC_OUT_Y_H, &valueH) )
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	202b      	movs	r0, #43	; 0x2b
 8002a3a:	f7ff fb6f 	bl	800211c <LSM303C_ACC_ReadReg>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <LSM303C_readAccelY+0x3e>
    {
	    return IMU_HW_ERROR;
 8002a44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a48:	e023      	b.n	8002a92 <LSM303C_readAccelY+0x86>
    }

    if ( LSM303C_ACC_ReadReg(ACC_OUT_Y_L, &valueL) )
 8002a4a:	1d7b      	adds	r3, r7, #5
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	202a      	movs	r0, #42	; 0x2a
 8002a50:	f7ff fb64 	bl	800211c <LSM303C_ACC_ReadReg>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <LSM303C_readAccelY+0x54>
    {
	    return IMU_HW_ERROR;
 8002a5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a5e:	e018      	b.n	8002a92 <LSM303C_readAccelY+0x86>
    }

    //debug_println("Fresh raw data");

    //convert from LSB to mg
    return (int16_t)(( (valueH << 8) | valueL )) * SENSITIVITY_ACC;
 8002a60:	793b      	ldrb	r3, [r7, #4]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	797b      	ldrb	r3, [r7, #5]
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd30 	bl	80004d4 <__aeabi_i2d>
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <LSM303C_readAccelY+0x94>)
 8002a7a:	f7fd fd95 	bl	80005a8 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f887 	bl	8000b98 <__aeabi_d2f>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	e001      	b.n	8002a92 <LSM303C_readAccelY+0x86>
  }

  // Should never get here
  //debug_println("Returning NAN");
  return false;
 8002a8e:	f04f 0300 	mov.w	r3, #0
}
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	3faf4000 	.word	0x3faf4000

08002aa4 <LSM303C_readAccelZ>:

float LSM303C_readAccelZ()
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  uint8_t flag_ACC_STATUS_FLAGS;
  status_t response = LSM303C_ACC_Status_Flags(&flag_ACC_STATUS_FLAGS);
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff4f 	bl	8002950 <LSM303C_ACC_Status_Flags>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]

  if (response != IMU_SUCCESS)
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <LSM303C_readAccelZ+0x1e>
  {
    //debug_println(AERROR);
    return false;
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e033      	b.n	8002b2a <LSM303C_readAccelZ+0x86>
  }

  // Check for new data in the status flags with a mask
  // If there isn't new data use the last data read.
  // There are valid cases for this, like reading faster than refresh rate.
  if (flag_ACC_STATUS_FLAGS & ACC_Z_NEW_DATA_AVAILABLE)
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02c      	beq.n	8002b26 <LSM303C_readAccelZ+0x82>
  {
    uint8_t valueL;
    uint8_t valueH;

    if ( LSM303C_ACC_ReadReg(ACC_OUT_Z_H, &valueH) )
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	202d      	movs	r0, #45	; 0x2d
 8002ad2:	f7ff fb23 	bl	800211c <LSM303C_ACC_ReadReg>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <LSM303C_readAccelZ+0x3e>
    {
	    return IMU_HW_ERROR;
 8002adc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ae0:	e023      	b.n	8002b2a <LSM303C_readAccelZ+0x86>
    }

    if ( LSM303C_ACC_ReadReg(ACC_OUT_Z_L, &valueL) )
 8002ae2:	1d7b      	adds	r3, r7, #5
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	202c      	movs	r0, #44	; 0x2c
 8002ae8:	f7ff fb18 	bl	800211c <LSM303C_ACC_ReadReg>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <LSM303C_readAccelZ+0x54>
    {
	    return IMU_HW_ERROR;
 8002af2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002af6:	e018      	b.n	8002b2a <LSM303C_readAccelZ+0x86>
    }

    //debug_println("Fresh raw data");

    //convert from LSB to mg
    return (int16_t)(( (valueH << 8) | valueL )) * SENSITIVITY_ACC;
 8002af8:	793b      	ldrb	r3, [r7, #4]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	797b      	ldrb	r3, [r7, #5]
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fce4 	bl	80004d4 <__aeabi_i2d>
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <LSM303C_readAccelZ+0x94>)
 8002b12:	f7fd fd49 	bl	80005a8 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7fe f83b 	bl	8000b98 <__aeabi_d2f>
 8002b22:	4603      	mov	r3, r0
 8002b24:	e001      	b.n	8002b2a <LSM303C_readAccelZ+0x86>
  }

  // Should never get here
  //debug_println("Returning NAN");
  return false;
 8002b26:	f04f 0300 	mov.w	r3, #0
}
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	3faf4000 	.word	0x3faf4000
 8002b3c:	00000000 	.word	0x00000000

08002b40 <LSM303C_getAzimuth>:
	Calculate the azimuth (in degrees);

	@since v0.1;
	@return int azimuth
**/
uint16_t LSM303C_getAzimuth(){
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	int a = atan2( LSM303C_readMagY(), LSM303C_readMagX() ) * 180.0 / M_PI;
 8002b46:	f7ff fe14 	bl	8002772 <LSM303C_readMagY>
 8002b4a:	ee10 3a10 	vmov	r3, s0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fcd2 	bl	80004f8 <__aeabi_f2d>
 8002b54:	4604      	mov	r4, r0
 8002b56:	460d      	mov	r5, r1
 8002b58:	f7ff fe01 	bl	800275e <LSM303C_readMagX>
 8002b5c:	ee10 3a10 	vmov	r3, s0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcc9 	bl	80004f8 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ec43 2b11 	vmov	d1, r2, r3
 8002b6e:	ec45 4b10 	vmov	d0, r4, r5
 8002b72:	f010 f8e3 	bl	8012d3c <atan2>
 8002b76:	ec51 0b10 	vmov	r0, r1, d0
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <LSM303C_getAzimuth+0x90>)
 8002b80:	f7fd fd12 	bl	80005a8 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	a30e      	add	r3, pc, #56	; (adr r3, 8002bc8 <LSM303C_getAzimuth+0x88>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd fe33 	bl	80007fc <__aeabi_ddiv>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fd ffb3 	bl	8000b08 <__aeabi_d2iz>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	607b      	str	r3, [r7, #4]
	return a < 0 ? 360 + a : a;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da05      	bge.n	8002bb8 <LSM303C_getAzimuth+0x78>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	e001      	b.n	8002bbc <LSM303C_getAzimuth+0x7c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	b29b      	uxth	r3, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	54442d18 	.word	0x54442d18
 8002bcc:	400921fb 	.word	0x400921fb
 8002bd0:	40668000 	.word	0x40668000

08002bd4 <LSM303C_getBearing>:
	@since v1.0.1 - function now requires azimuth parameter.
	@since v0.2.0 - initial creation

	@return byte direction of bearing
*/
uint8_t LSM303C_getBearing(int azimuth){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	unsigned long a = azimuth / 22.5;
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd fc79 	bl	80004d4 <__aeabi_i2d>
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <LSM303C_getBearing+0x70>)
 8002be8:	f7fd fe08 	bl	80007fc <__aeabi_ddiv>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd ffb0 	bl	8000b58 <__aeabi_d2uiz>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]
	unsigned long r = a - (int)a;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
	uint8_t sexdec = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
	sexdec = ( r >= .5 ) ? ceil(a) : floor(a);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <LSM303C_getBearing+0x4e>
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7fd fc52 	bl	80004b4 <__aeabi_ui2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fd ff9e 	bl	8000b58 <__aeabi_d2uiz>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	e00a      	b.n	8002c38 <LSM303C_getBearing+0x64>
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7fd fc46 	bl	80004b4 <__aeabi_ui2d>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7fd ff92 	bl	8000b58 <__aeabi_d2uiz>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	73fb      	strb	r3, [r7, #15]
	return sexdec;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40368000 	.word	0x40368000

08002c48 <LSM303C_getDirection>:
	@see getBearing();

	@since v1.0.1 - function now requires azimuth parameter.
	@since v0.2.0 - initial creation
*/
void LSM303C_getDirection(char* myArray, int azimuth){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	int d = LSM303C_getBearing(azimuth);
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f7ff ffbe 	bl	8002bd4 <LSM303C_getBearing>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]
	myArray[0] = _bearings[d][0];
 8002c5c:	4911      	ldr	r1, [pc, #68]	; (8002ca4 <LSM303C_getDirection+0x5c>)
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	701a      	strb	r2, [r3, #0]
	myArray[1] = _bearings[d][1];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1c59      	adds	r1, r3, #1
 8002c72:	480c      	ldr	r0, [pc, #48]	; (8002ca4 <LSM303C_getDirection+0x5c>)
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4403      	add	r3, r0
 8002c7e:	3301      	adds	r3, #1
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	700b      	strb	r3, [r1, #0]
	myArray[2] = _bearings[d][2];
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1c99      	adds	r1, r3, #2
 8002c88:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <LSM303C_getDirection+0x5c>)
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	4403      	add	r3, r0
 8002c94:	3302      	adds	r3, #2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	700b      	strb	r3, [r1, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	080135a4 	.word	0x080135a4

08002ca8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cac:	f3bf 8f4f 	dsb	sy
}
 8002cb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <__NVIC_SystemReset+0x24>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002cba:	4904      	ldr	r1, [pc, #16]	; (8002ccc <__NVIC_SystemReset+0x24>)
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_SystemReset+0x28>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cc2:	f3bf 8f4f 	dsb	sy
}
 8002cc6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <__NVIC_SystemReset+0x20>
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	05fa0004 	.word	0x05fa0004

08002cd4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f023 0218 	bic.w	r2, r3, #24
 8002ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <scan_btn>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void scan_btn() {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	MPR121_updateAll();
 8002d38:	f7fe fdc9 	bl	80018ce <MPR121_updateAll>
	if (MPR121_isNewTouch(BTN_UP))  {
 8002d3c:	2005      	movs	r0, #5
 8002d3e:	f7fe fd99 	bl	8001874 <MPR121_isNewTouch>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <scan_btn+0x2a>
		if(watch_setup.vibro_response) Vibrate(1);
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <scan_btn+0xac>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <scan_btn+0x22>
 8002d50:	2001      	movs	r0, #1
 8002d52:	f000 f8d5 	bl	8002f00 <Vibrate>
		button.UP = true;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <scan_btn+0xb0>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e002      	b.n	8002d64 <scan_btn+0x30>
	}
	else button.UP = false;
 8002d5e:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <scan_btn+0xb0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]

	if (MPR121_isNewTouch(BTN_DOWN))  {
 8002d64:	2004      	movs	r0, #4
 8002d66:	f7fe fd85 	bl	8001874 <MPR121_isNewTouch>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <scan_btn+0x52>
		if(watch_setup.vibro_response) Vibrate(1);
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <scan_btn+0xac>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <scan_btn+0x4a>
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f000 f8c1 	bl	8002f00 <Vibrate>
		button.DOWN = true;
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <scan_btn+0xb0>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	705a      	strb	r2, [r3, #1]
 8002d84:	e002      	b.n	8002d8c <scan_btn+0x58>
	}
	else button.DOWN = false;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <scan_btn+0xb0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]

	if (MPR121_isNewTouch(BTN_MENU))  {
 8002d8c:	200a      	movs	r0, #10
 8002d8e:	f7fe fd71 	bl	8001874 <MPR121_isNewTouch>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <scan_btn+0x7a>
		if(watch_setup.vibro_response) Vibrate(1);
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <scan_btn+0xac>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <scan_btn+0x72>
 8002da0:	2001      	movs	r0, #1
 8002da2:	f000 f8ad 	bl	8002f00 <Vibrate>
		button.MENU = true;
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <scan_btn+0xb0>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	709a      	strb	r2, [r3, #2]
 8002dac:	e002      	b.n	8002db4 <scan_btn+0x80>
	}
	else button.MENU = false;
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <scan_btn+0xb0>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	709a      	strb	r2, [r3, #2]

	if (MPR121_isNewTouch(BTN_EXIT))  {
 8002db4:	2003      	movs	r0, #3
 8002db6:	f7fe fd5d 	bl	8001874 <MPR121_isNewTouch>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <scan_btn+0xa2>
		if(watch_setup.vibro_response) Vibrate(1);
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <scan_btn+0xac>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <scan_btn+0x9a>
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f000 f899 	bl	8002f00 <Vibrate>
		button.EXIT = true;
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <scan_btn+0xb0>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	70da      	strb	r2, [r3, #3]
	}
	else button.EXIT = false;

}
 8002dd4:	e002      	b.n	8002ddc <scan_btn+0xa8>
	else button.EXIT = false;
 8002dd6:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <scan_btn+0xb0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	70da      	strb	r2, [r3, #3]
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000038 	.word	0x20000038
 8002de4:	2000048c 	.word	0x2000048c

08002de8 <read_ms5837>:


void read_ms5837(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	ms5837_reset();
 8002dec:	f001 fe3c 	bl	8004a68 <ms5837_reset>
	status = ms5837_read_temperature_and_pressure(&water.temperature, &water.pressure);
 8002df0:	493f      	ldr	r1, [pc, #252]	; (8002ef0 <read_ms5837+0x108>)
 8002df2:	4840      	ldr	r0, [pc, #256]	; (8002ef4 <read_ms5837+0x10c>)
 8002df4:	f001 ff8c 	bl	8004d10 <ms5837_read_temperature_and_pressure>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <read_ms5837+0x110>)
 8002dfe:	701a      	strb	r2, [r3, #0]
	water.depth = MS5837_depth(water.pressure);
 8002e00:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <read_ms5837+0x10c>)
 8002e02:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	f002 faed 	bl	80053e8 <MS5837_depth>
 8002e0e:	eef0 7a40 	vmov.f32	s15, s0
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <read_ms5837+0x10c>)
 8002e14:	edc3 7a04 	vstr	s15, [r3, #16]

	if (water.temperature > water.max_temp)  water.max_temp = water.temperature;
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <read_ms5837+0x10c>)
 8002e1a:	ed93 7a00 	vldr	s14, [r3]
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <read_ms5837+0x10c>)
 8002e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	dd03      	ble.n	8002e36 <read_ms5837+0x4e>
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <read_ms5837+0x10c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <read_ms5837+0x10c>)
 8002e34:	6053      	str	r3, [r2, #4]
	if (water.temperature < water.min_temp)  water.min_temp = water.temperature;
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <read_ms5837+0x10c>)
 8002e38:	ed93 7a00 	vldr	s14, [r3]
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <read_ms5837+0x10c>)
 8002e3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d503      	bpl.n	8002e54 <read_ms5837+0x6c>
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <read_ms5837+0x10c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <read_ms5837+0x10c>)
 8002e52:	6093      	str	r3, [r2, #8]



	if (water.depth > water.under_water_threshold) {
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <read_ms5837+0x10c>)
 8002e56:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <read_ms5837+0x10c>)
 8002e5c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	dd26      	ble.n	8002eb8 <read_ms5837+0xd0>
		if (!watch_state.under_water_flag) water.start_time = HAL_GetTick();
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <read_ms5837+0x114>)
 8002e6c:	799b      	ldrb	r3, [r3, #6]
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <read_ms5837+0x9a>
 8002e78:	f003 f920 	bl	80060bc <HAL_GetTick>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <read_ms5837+0x10c>)
 8002e80:	61d3      	str	r3, [r2, #28]
		water.under_water_time = HAL_GetTick() - water.start_time;
 8002e82:	f003 f91b 	bl	80060bc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <read_ms5837+0x10c>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <read_ms5837+0x10c>)
 8002e90:	6193      	str	r3, [r2, #24]
		if (water.depth > water.max_depth) water.max_depth = water.depth;
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <read_ms5837+0x10c>)
 8002e94:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <read_ms5837+0x10c>)
 8002e9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	dd03      	ble.n	8002eb0 <read_ms5837+0xc8>
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <read_ms5837+0x10c>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <read_ms5837+0x10c>)
 8002eae:	6153      	str	r3, [r2, #20]
		watch_state.under_water_flag = true;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <read_ms5837+0x114>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	719a      	strb	r2, [r3, #6]
 8002eb6:	e00e      	b.n	8002ed6 <read_ms5837+0xee>
	}
	else  {
		if ( watch_state.under_water_flag) water.dive_counter++;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <read_ms5837+0x114>)
 8002eba:	799b      	ldrb	r3, [r3, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <read_ms5837+0xe2>
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <read_ms5837+0x10c>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <read_ms5837+0x10c>)
 8002ec8:	6253      	str	r3, [r2, #36]	; 0x24
		water.under_water_time = 0;
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <read_ms5837+0x10c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
		watch_state.under_water_flag = false;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <read_ms5837+0x114>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	719a      	strb	r2, [r3, #6]
	}

	if (water.under_water_time > water.max_time) water.max_time = water.under_water_time;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <read_ms5837+0x10c>)
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <read_ms5837+0x10c>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d903      	bls.n	8002eea <read_ms5837+0x102>
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <read_ms5837+0x10c>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <read_ms5837+0x10c>)
 8002ee8:	6213      	str	r3, [r2, #32]
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000018 	.word	0x20000018
 8002ef4:	2000000c 	.word	0x2000000c
 8002ef8:	20000490 	.word	0x20000490
 8002efc:	20000480 	.word	0x20000480

08002f00 <Vibrate>:


void Vibrate(uint8_t times)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i < times; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e014      	b.n	8002f3a <Vibrate+0x3a>
	{
		HAL_GPIO_WritePin(Vib_GPIO_Port, Vib_Pin, GPIO_PIN_SET);
 8002f10:	2201      	movs	r2, #1
 8002f12:	2104      	movs	r1, #4
 8002f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f18:	f004 fde2 	bl	8007ae0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002f1c:	2064      	movs	r0, #100	; 0x64
 8002f1e:	f008 fd5f 	bl	800b9e0 <osDelay>
		//HAL_Delay(100);
		HAL_GPIO_WritePin(Vib_GPIO_Port, Vib_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2104      	movs	r1, #4
 8002f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2a:	f004 fdd9 	bl	8007ae0 <HAL_GPIO_WritePin>
		//HAL_Delay(100);
		osDelay(200);
 8002f2e:	20c8      	movs	r0, #200	; 0xc8
 8002f30:	f008 fd56 	bl	800b9e0 <osDelay>
	for(uint8_t i=0; i < times; i++)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	3301      	adds	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d3e6      	bcc.n	8002f10 <Vibrate+0x10>
	}
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <display_off>:

void display_off(void) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	ssd1306_SetDisplayOn(0);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f002 fd63 	bl	8005a1c <ssd1306_SetDisplayOn>
	//ssd1306_Fill(Black);
	//ssd1306_UpdateScreen();
	display.off_flag = true;
 8002f56:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <display_off+0x14>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	709a      	strb	r2, [r3, #2]
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2000003c 	.word	0x2000003c

08002f64 <display_on>:

void display_on(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	//HAL_Delay(10);
	//ssd1306_Init();
	//ssd1306_SetContrast(255);
	ssd1306_SetDisplayOn(1);
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f002 fd57 	bl	8005a1c <ssd1306_SetDisplayOn>
	display.off_flag = false;
 8002f6e:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <display_on+0x14>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	709a      	strb	r2, [r3, #2]
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	2000003c 	.word	0x2000003c

08002f7c <setupTime>:


void setupTime(bool alarm) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  char time[16];
  uint8_t  pos = 0, space = 0, tmpTime[3] = {sfTime.Hours, sfTime.Minutes, sfTime.Seconds};
 8002f86:	2300      	movs	r3, #0
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	77bb      	strb	r3, [r7, #30]
 8002f8e:	4b80      	ldr	r3, [pc, #512]	; (8003190 <setupTime+0x214>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	723b      	strb	r3, [r7, #8]
 8002f94:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <setupTime+0x214>)
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	727b      	strb	r3, [r7, #9]
 8002f9a:	4b7d      	ldr	r3, [pc, #500]	; (8003190 <setupTime+0x214>)
 8002f9c:	789b      	ldrb	r3, [r3, #2]
 8002f9e:	72bb      	strb	r3, [r7, #10]
  ssd1306_Fill(Black);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f002 fb1f 	bl	80055e4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8002fa6:	f002 fb41 	bl	800562c <ssd1306_UpdateScreen>
  while (1) {
    osDelay(200);
 8002faa:	20c8      	movs	r0, #200	; 0xc8
 8002fac:	f008 fd18 	bl	800b9e0 <osDelay>
    if (button.EXIT) {
 8002fb0:	4b78      	ldr	r3, [pc, #480]	; (8003194 <setupTime+0x218>)
 8002fb2:	78db      	ldrb	r3, [r3, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <setupTime+0x46>
      osDelay(300);
 8002fb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fbc:	f008 fd10 	bl	800b9e0 <osDelay>
      return;
 8002fc0:	e0e3      	b.n	800318a <setupTime+0x20e>
    }

    if (button.UP) {
 8002fc2:	4b74      	ldr	r3, [pc, #464]	; (8003194 <setupTime+0x218>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d025      	beq.n	8003016 <setupTime+0x9a>
      tmpTime[pos]++;
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	f103 0220 	add.w	r2, r3, #32
 8002fd0:	443a      	add	r2, r7
 8002fd2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002fd6:	3201      	adds	r2, #1
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	3320      	adds	r3, #32
 8002fdc:	443b      	add	r3, r7
 8002fde:	f803 2c18 	strb.w	r2, [r3, #-24]
      if (tmpTime[0] > 23) tmpTime[0] = 0;
 8002fe2:	7a3b      	ldrb	r3, [r7, #8]
 8002fe4:	2b17      	cmp	r3, #23
 8002fe6:	d901      	bls.n	8002fec <setupTime+0x70>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	723b      	strb	r3, [r7, #8]
      if (tmpTime[1] > 60) tmpTime[1] = 0;
 8002fec:	7a7b      	ldrb	r3, [r7, #9]
 8002fee:	2b3c      	cmp	r3, #60	; 0x3c
 8002ff0:	d901      	bls.n	8002ff6 <setupTime+0x7a>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	727b      	strb	r3, [r7, #9]
      if (tmpTime[2] > 60) tmpTime[2] = 0;
 8002ff6:	7abb      	ldrb	r3, [r7, #10]
 8002ff8:	2b3c      	cmp	r3, #60	; 0x3c
 8002ffa:	d902      	bls.n	8003002 <setupTime+0x86>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	72bb      	strb	r3, [r7, #10]
 8003000:	e001      	b.n	8003006 <setupTime+0x8a>
      else space = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	77bb      	strb	r3, [r7, #30]
      ssd1306_Fill(Black);
 8003006:	2000      	movs	r0, #0
 8003008:	f002 faec 	bl	80055e4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 800300c:	f002 fb0e 	bl	800562c <ssd1306_UpdateScreen>
      osDelay(20);
 8003010:	2014      	movs	r0, #20
 8003012:	f008 fce5 	bl	800b9e0 <osDelay>
    }

    if (button.DOWN) {
 8003016:	4b5f      	ldr	r3, [pc, #380]	; (8003194 <setupTime+0x218>)
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d022      	beq.n	8003064 <setupTime+0xe8>
      tmpTime[pos]--;
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	f103 0220 	add.w	r2, r3, #32
 8003024:	443a      	add	r2, r7
 8003026:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800302a:	3a01      	subs	r2, #1
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	3320      	adds	r3, #32
 8003030:	443b      	add	r3, r7
 8003032:	f803 2c18 	strb.w	r2, [r3, #-24]
      if (tmpTime[0] > 23) tmpTime[0] = 0;
 8003036:	7a3b      	ldrb	r3, [r7, #8]
 8003038:	2b17      	cmp	r3, #23
 800303a:	d901      	bls.n	8003040 <setupTime+0xc4>
 800303c:	2300      	movs	r3, #0
 800303e:	723b      	strb	r3, [r7, #8]
      if (tmpTime[1] > 60) tmpTime[1] = 0;
 8003040:	7a7b      	ldrb	r3, [r7, #9]
 8003042:	2b3c      	cmp	r3, #60	; 0x3c
 8003044:	d901      	bls.n	800304a <setupTime+0xce>
 8003046:	2300      	movs	r3, #0
 8003048:	727b      	strb	r3, [r7, #9]
      if (tmpTime[2] > 60) tmpTime[2] = 0;
 800304a:	7abb      	ldrb	r3, [r7, #10]
 800304c:	2b3c      	cmp	r3, #60	; 0x3c
 800304e:	d901      	bls.n	8003054 <setupTime+0xd8>
 8003050:	2300      	movs	r3, #0
 8003052:	72bb      	strb	r3, [r7, #10]
      ssd1306_Fill(Black);
 8003054:	2000      	movs	r0, #0
 8003056:	f002 fac5 	bl	80055e4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 800305a:	f002 fae7 	bl	800562c <ssd1306_UpdateScreen>
      osDelay(20);
 800305e:	2014      	movs	r0, #20
 8003060:	f008 fcbe 	bl	800b9e0 <osDelay>
    }

    if (button.MENU) {
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <setupTime+0x218>)
 8003066:	789b      	ldrb	r3, [r3, #2]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <setupTime+0x10a>
      pos++;
 800306c:	7ffb      	ldrb	r3, [r7, #31]
 800306e:	3301      	adds	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
      if (pos > 3) pos = 0;
 8003072:	7ffb      	ldrb	r3, [r7, #31]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d901      	bls.n	800307c <setupTime+0x100>
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
      ssd1306_Fill(Black);
 800307c:	2000      	movs	r0, #0
 800307e:	f002 fab1 	bl	80055e4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8003082:	f002 fad3 	bl	800562c <ssd1306_UpdateScreen>
    }

    sprintf(time, "%02d:%02d:%02d", tmpTime[0], tmpTime[1], tmpTime[2]);
 8003086:	7a3b      	ldrb	r3, [r7, #8]
 8003088:	461a      	mov	r2, r3
 800308a:	7a7b      	ldrb	r3, [r7, #9]
 800308c:	4619      	mov	r1, r3
 800308e:	7abb      	ldrb	r3, [r7, #10]
 8003090:	f107 000c 	add.w	r0, r7, #12
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	460b      	mov	r3, r1
 8003098:	493f      	ldr	r1, [pc, #252]	; (8003198 <setupTime+0x21c>)
 800309a:	f00c fa07 	bl	800f4ac <siprintf>
    ssd1306_SetCursor(0, 20);
 800309e:	2114      	movs	r1, #20
 80030a0:	2000      	movs	r0, #0
 80030a2:	f002 fbed 	bl	8005880 <ssd1306_SetCursor>
    ssd1306_WriteString(time, Font_11x18, White);
 80030a6:	4a3d      	ldr	r2, [pc, #244]	; (800319c <setupTime+0x220>)
 80030a8:	f107 000c 	add.w	r0, r7, #12
 80030ac:	2301      	movs	r3, #1
 80030ae:	ca06      	ldmia	r2, {r1, r2}
 80030b0:	f002 fbc0 	bl	8005834 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 40);
 80030b4:	2128      	movs	r1, #40	; 0x28
 80030b6:	2000      	movs	r0, #0
 80030b8:	f002 fbe2 	bl	8005880 <ssd1306_SetCursor>
    ssd1306_WriteString("Set?", Font_11x18, White);
 80030bc:	4a37      	ldr	r2, [pc, #220]	; (800319c <setupTime+0x220>)
 80030be:	2301      	movs	r3, #1
 80030c0:	ca06      	ldmia	r2, {r1, r2}
 80030c2:	4837      	ldr	r0, [pc, #220]	; (80031a0 <setupTime+0x224>)
 80030c4:	f002 fbb6 	bl	8005834 <ssd1306_WriteString>

    if (pos == 3) {
 80030c8:	7ffb      	ldrb	r3, [r7, #31]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d147      	bne.n	800315e <setupTime+0x1e2>
    	ssd1306_DrawRectangle(0 , 39 , 50, 59, White);
 80030ce:	2301      	movs	r3, #1
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	233b      	movs	r3, #59	; 0x3b
 80030d4:	2232      	movs	r2, #50	; 0x32
 80030d6:	2127      	movs	r1, #39	; 0x27
 80030d8:	2000      	movs	r0, #0
 80030da:	f002 fc55 	bl	8005988 <ssd1306_DrawRectangle>
      if (button.UP) {
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <setupTime+0x218>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04d      	beq.n	8003182 <setupTime+0x206>
       if (alarm) {
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01a      	beq.n	8003122 <setupTime+0x1a6>
    	   sAlarm.Alarm=RTC_ALARM_A;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <setupTime+0x228>)
 80030ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
    	   	sAlarm.AlarmTime.Hours = tmpTime[0];
 80030f4:	7a3a      	ldrb	r2, [r7, #8]
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <setupTime+0x228>)
 80030f8:	701a      	strb	r2, [r3, #0]
    	   	sAlarm.AlarmTime.Minutes = tmpTime[1];
 80030fa:	7a7a      	ldrb	r2, [r7, #9]
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <setupTime+0x228>)
 80030fe:	705a      	strb	r2, [r3, #1]
    	   	sAlarm.AlarmTime.Seconds = tmpTime[2];
 8003100:	7aba      	ldrb	r2, [r7, #10]
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <setupTime+0x228>)
 8003104:	709a      	strb	r2, [r3, #2]
    	   	HAL_RTC_SetAlarm(&hrtc,&sAlarm, RTC_FORMAT_BIN);     // Включаем функцию прерывания
 8003106:	2200      	movs	r2, #0
 8003108:	4926      	ldr	r1, [pc, #152]	; (80031a4 <setupTime+0x228>)
 800310a:	4827      	ldr	r0, [pc, #156]	; (80031a8 <setupTime+0x22c>)
 800310c:	f007 fde9 	bl	800ace2 <HAL_RTC_SetAlarm>
    	   	HAL_RTC_SetAlarm_IT(&hrtc,&sAlarm, RTC_FORMAT_BIN);  // Устанавливаем прерывание
 8003110:	2200      	movs	r2, #0
 8003112:	4924      	ldr	r1, [pc, #144]	; (80031a4 <setupTime+0x228>)
 8003114:	4824      	ldr	r0, [pc, #144]	; (80031a8 <setupTime+0x22c>)
 8003116:	f007 feff 	bl	800af18 <HAL_RTC_SetAlarm_IT>

    	    watch_state.alarmSet_flag = true;
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <setupTime+0x230>)
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
    	     return;
 8003120:	e033      	b.n	800318a <setupTime+0x20e>
        }
        else {

        		sfTime.Hours = tmpTime[0];
 8003122:	7a3a      	ldrb	r2, [r7, #8]
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <setupTime+0x214>)
 8003126:	701a      	strb	r2, [r3, #0]
        	  sfTime.Minutes = tmpTime[1];
 8003128:	7a7a      	ldrb	r2, [r7, #9]
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <setupTime+0x214>)
 800312c:	705a      	strb	r2, [r3, #1]
        	  sfTime.Seconds = tmpTime[2];
 800312e:	7aba      	ldrb	r2, [r7, #10]
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <setupTime+0x214>)
 8003132:	709a      	strb	r2, [r3, #2]
        	  sfTime.SubSeconds = 0x0;
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <setupTime+0x214>)
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
        	  sfTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <setupTime+0x214>)
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
        	  sfTime.StoreOperation = RTC_STOREOPERATION_SET;
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <setupTime+0x214>)
 8003142:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003146:	611a      	str	r2, [r3, #16]
        	  if (HAL_RTC_SetTime(&hrtc, &sfTime, RTC_FORMAT_BIN) != HAL_OK)
 8003148:	2200      	movs	r2, #0
 800314a:	4911      	ldr	r1, [pc, #68]	; (8003190 <setupTime+0x214>)
 800314c:	4816      	ldr	r0, [pc, #88]	; (80031a8 <setupTime+0x22c>)
 800314e:	f007 fc5b 	bl	800aa08 <HAL_RTC_SetTime>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d017      	beq.n	8003188 <setupTime+0x20c>
        	  {
        	    Error_Handler();
 8003158:	f001 fc38 	bl	80049cc <Error_Handler>
        	  }
        	return;
 800315c:	e014      	b.n	8003188 <setupTime+0x20c>
        }
      }
    }
    else ssd1306_DrawRectangle(0 + pos * 31, 19 , 24 + pos * 31, 38, White);
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	461a      	mov	r2, r3
 8003162:	0152      	lsls	r2, r2, #5
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	b2d8      	uxtb	r0, r3
 8003168:	7ffb      	ldrb	r3, [r7, #31]
 800316a:	461a      	mov	r2, r3
 800316c:	0152      	lsls	r2, r2, #5
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3318      	adds	r3, #24
 8003174:	b2da      	uxtb	r2, r3
 8003176:	2301      	movs	r3, #1
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2326      	movs	r3, #38	; 0x26
 800317c:	2113      	movs	r1, #19
 800317e:	f002 fc03 	bl	8005988 <ssd1306_DrawRectangle>
    ssd1306_UpdateScreen();
 8003182:	f002 fa53 	bl	800562c <ssd1306_UpdateScreen>
    osDelay(200);
 8003186:	e710      	b.n	8002faa <setupTime+0x2e>
        	return;
 8003188:	bf00      	nop
  }
}
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000438 	.word	0x20000438
 8003194:	2000048c 	.word	0x2000048c
 8003198:	08013270 	.word	0x08013270
 800319c:	20000094 	.word	0x20000094
 80031a0:	08013280 	.word	0x08013280
 80031a4:	20000450 	.word	0x20000450
 80031a8:	200003e0 	.word	0x200003e0
 80031ac:	20000480 	.word	0x20000480

080031b0 <menu>:




void menu(void) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
  uint8_t screen = 0, menu_cnt = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
 80031ba:	2300      	movs	r3, #0
 80031bc:	75bb      	strb	r3, [r7, #22]
  int8_t pos = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	757b      	strb	r3, [r7, #21]
  bool item[15] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	f8c3 200b 	str.w	r2, [r3, #11]
  ssd1306_Fill(Black);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f002 fa07 	bl	80055e4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80031d6:	f002 fa29 	bl	800562c <ssd1306_UpdateScreen>
  if (button.MENU) osDelay(300);
 80031da:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <menu+0x248>)
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <menu+0x3a>
 80031e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031e6:	f008 fbfb 	bl	800b9e0 <osDelay>

  while (1) {

    if (button.EXIT) return;
 80031ea:	4b83      	ldr	r3, [pc, #524]	; (80033f8 <menu+0x248>)
 80031ec:	78db      	ldrb	r3, [r3, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 8237 	bne.w	8003662 <menu+0x4b2>

    if (watch_state.under_water_flag) return;
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <menu+0x24c>)
 80031f6:	799b      	ldrb	r3, [r3, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f040 8234 	bne.w	8003666 <menu+0x4b6>

    memset(display.buf1, 0, sizeof(display.buf1));
 80031fe:	2214      	movs	r2, #20
 8003200:	2100      	movs	r1, #0
 8003202:	487f      	ldr	r0, [pc, #508]	; (8003400 <menu+0x250>)
 8003204:	f00b f9bb 	bl	800e57e <memset>
    memset(display.buf2, 0, sizeof(display.buf2));
 8003208:	2214      	movs	r2, #20
 800320a:	2100      	movs	r1, #0
 800320c:	487d      	ldr	r0, [pc, #500]	; (8003404 <menu+0x254>)
 800320e:	f00b f9b6 	bl	800e57e <memset>

    ssd1306_SetCursor(20, 0);
 8003212:	2100      	movs	r1, #0
 8003214:	2014      	movs	r0, #20
 8003216:	f002 fb33 	bl	8005880 <ssd1306_SetCursor>
    sprintf(display.buf1, "Menu %d %d %d", screen, pos, menu_cnt);
 800321a:	7dfa      	ldrb	r2, [r7, #23]
 800321c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003220:	7dbb      	ldrb	r3, [r7, #22]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	460b      	mov	r3, r1
 8003226:	4978      	ldr	r1, [pc, #480]	; (8003408 <menu+0x258>)
 8003228:	4875      	ldr	r0, [pc, #468]	; (8003400 <menu+0x250>)
 800322a:	f00c f93f 	bl	800f4ac <siprintf>
    ssd1306_WriteString(display.buf1, Font_7x10, White);
 800322e:	4a77      	ldr	r2, [pc, #476]	; (800340c <menu+0x25c>)
 8003230:	2301      	movs	r3, #1
 8003232:	ca06      	ldmia	r2, {r1, r2}
 8003234:	4872      	ldr	r0, [pc, #456]	; (8003400 <menu+0x250>)
 8003236:	f002 fafd 	bl	8005834 <ssd1306_WriteString>


    if (button.UP) {
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <menu+0x248>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02b      	beq.n	800329a <menu+0xea>
		  pos--;
 8003242:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	757b      	strb	r3, [r7, #21]
		  if (pos < 0) {
 800324e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da07      	bge.n	8003266 <menu+0xb6>
			  if (screen > 0) {
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <menu+0xb6>
				  screen--;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	3b01      	subs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
				  pos = 4;
 8003262:	2304      	movs	r3, #4
 8003264:	757b      	strb	r3, [r7, #21]
			  }

		  }
		  if ((screen == 0) & (pos < 0)) pos = 0;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2da      	uxtb	r2, r3
 8003272:	7d7b      	ldrb	r3, [r7, #21]
 8003274:	09db      	lsrs	r3, r3, #7
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4013      	ands	r3, r2
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <menu+0xd4>
 8003280:	2300      	movs	r3, #0
 8003282:	757b      	strb	r3, [r7, #21]
		  menu_cnt--;
 8003284:	7dbb      	ldrb	r3, [r7, #22]
 8003286:	3b01      	subs	r3, #1
 8003288:	75bb      	strb	r3, [r7, #22]
		  ssd1306_Fill(Black);
 800328a:	2000      	movs	r0, #0
 800328c:	f002 f9aa 	bl	80055e4 <ssd1306_Fill>
		  ssd1306_UpdateScreen();
 8003290:	f002 f9cc 	bl	800562c <ssd1306_UpdateScreen>
		  osDelay(50);
 8003294:	2032      	movs	r0, #50	; 0x32
 8003296:	f008 fba3 	bl	800b9e0 <osDelay>
    }
    if (button.DOWN) {
 800329a:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <menu+0x248>)
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d019      	beq.n	80032d6 <menu+0x126>
		  pos++;
 80032a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	757b      	strb	r3, [r7, #21]
		  if (pos > 4) {
 80032ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	dd04      	ble.n	80032c0 <menu+0x110>
			  screen++;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	3301      	adds	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
			  pos = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	757b      	strb	r3, [r7, #21]
		  }
		  menu_cnt++;
 80032c0:	7dbb      	ldrb	r3, [r7, #22]
 80032c2:	3301      	adds	r3, #1
 80032c4:	75bb      	strb	r3, [r7, #22]
		  ssd1306_Fill(Black);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f002 f98c 	bl	80055e4 <ssd1306_Fill>
		  ssd1306_UpdateScreen();
 80032cc:	f002 f9ae 	bl	800562c <ssd1306_UpdateScreen>
		  osDelay(50);
 80032d0:	2032      	movs	r0, #50	; 0x32
 80032d2:	f008 fb85 	bl	800b9e0 <osDelay>
    }

    if (menu_cnt > 15) menu_cnt = 15;
 80032d6:	7dbb      	ldrb	r3, [r7, #22]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d901      	bls.n	80032e0 <menu+0x130>
 80032dc:	230f      	movs	r3, #15
 80032de:	75bb      	strb	r3, [r7, #22]

    if (screen > 3) screen = 3;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d901      	bls.n	80032ea <menu+0x13a>
 80032e6:	2303      	movs	r3, #3
 80032e8:	75fb      	strb	r3, [r7, #23]



    if (button.MENU) {
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <menu+0x248>)
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <menu+0x18c>
      item[menu_cnt] = !item[menu_cnt];
 80032f2:	7dbb      	ldrb	r3, [r7, #22]
 80032f4:	3318      	adds	r3, #24
 80032f6:	443b      	add	r3, r7
 80032f8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f083 0301 	eor.w	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	7dbb      	ldrb	r3, [r7, #22]
 8003310:	f002 0201 	and.w	r2, r2, #1
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	3318      	adds	r3, #24
 8003318:	443b      	add	r3, r7
 800331a:	f803 2c14 	strb.w	r2, [r3, #-20]
      ssd1306_Fill(Black);
 800331e:	2000      	movs	r0, #0
 8003320:	f002 f960 	bl	80055e4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8003324:	f002 f982 	bl	800562c <ssd1306_UpdateScreen>
      memset(display.buf1, 0, sizeof(display.buf1));
 8003328:	2214      	movs	r2, #20
 800332a:	2100      	movs	r1, #0
 800332c:	4834      	ldr	r0, [pc, #208]	; (8003400 <menu+0x250>)
 800332e:	f00b f926 	bl	800e57e <memset>
      memset(display.buf2, 0, sizeof(display.buf2));
 8003332:	2214      	movs	r2, #20
 8003334:	2100      	movs	r1, #0
 8003336:	4833      	ldr	r0, [pc, #204]	; (8003404 <menu+0x254>)
 8003338:	f00b f921 	bl	800e57e <memset>
    }

    switch (screen)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b02      	cmp	r3, #2
 8003340:	f000 8140 	beq.w	80035c4 <menu+0x414>
 8003344:	2b02      	cmp	r3, #2
 8003346:	f300 816d 	bgt.w	8003624 <menu+0x474>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <menu+0x1a6>
 800334e:	2b01      	cmp	r3, #1
 8003350:	f000 80eb 	beq.w	800352a <menu+0x37a>

        				item[7] = !item[7];
        				}

    	break;
    default: break;
 8003354:	e166      	b.n	8003624 <menu+0x474>
			ssd1306_SetCursor(1, 17);
 8003356:	2111      	movs	r1, #17
 8003358:	2001      	movs	r0, #1
 800335a:	f002 fa91 	bl	8005880 <ssd1306_SetCursor>
			ssd1306_WriteString("Setup time", Font_7x10, White);
 800335e:	4a2b      	ldr	r2, [pc, #172]	; (800340c <menu+0x25c>)
 8003360:	2301      	movs	r3, #1
 8003362:	ca06      	ldmia	r2, {r1, r2}
 8003364:	482a      	ldr	r0, [pc, #168]	; (8003410 <menu+0x260>)
 8003366:	f002 fa65 	bl	8005834 <ssd1306_WriteString>
			ssd1306_SetCursor(100, 17);
 800336a:	2111      	movs	r1, #17
 800336c:	2064      	movs	r0, #100	; 0x64
 800336e:	f002 fa87 	bl	8005880 <ssd1306_SetCursor>
			if (item[0]) {
 8003372:	793b      	ldrb	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <menu+0x1dc>
			  setupTime(false);
 8003378:	2000      	movs	r0, #0
 800337a:	f7ff fdff 	bl	8002f7c <setupTime>
			  ssd1306_Fill(Black);
 800337e:	2000      	movs	r0, #0
 8003380:	f002 f930 	bl	80055e4 <ssd1306_Fill>
			  ssd1306_UpdateScreen();
 8003384:	f002 f952 	bl	800562c <ssd1306_UpdateScreen>
			  item[0] = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	713b      	strb	r3, [r7, #4]
			ssd1306_SetCursor(1, 26);
 800338c:	211a      	movs	r1, #26
 800338e:	2001      	movs	r0, #1
 8003390:	f002 fa76 	bl	8005880 <ssd1306_SetCursor>
			ssd1306_WriteString("Setup alarm", Font_7x10, White);
 8003394:	4a1d      	ldr	r2, [pc, #116]	; (800340c <menu+0x25c>)
 8003396:	2301      	movs	r3, #1
 8003398:	ca06      	ldmia	r2, {r1, r2}
 800339a:	481e      	ldr	r0, [pc, #120]	; (8003414 <menu+0x264>)
 800339c:	f002 fa4a 	bl	8005834 <ssd1306_WriteString>
			ssd1306_SetCursor(100, 26);
 80033a0:	211a      	movs	r1, #26
 80033a2:	2064      	movs	r0, #100	; 0x64
 80033a4:	f002 fa6c 	bl	8005880 <ssd1306_SetCursor>
			if (item[1]) {
 80033a8:	797b      	ldrb	r3, [r7, #5]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <menu+0x212>
			  setupTime(true);
 80033ae:	2001      	movs	r0, #1
 80033b0:	f7ff fde4 	bl	8002f7c <setupTime>
			  ssd1306_Fill(Black);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f002 f915 	bl	80055e4 <ssd1306_Fill>
			  ssd1306_UpdateScreen();
 80033ba:	f002 f937 	bl	800562c <ssd1306_UpdateScreen>
			  item[1] = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	717b      	strb	r3, [r7, #5]
			ssd1306_SetCursor(1, 35);
 80033c2:	2123      	movs	r1, #35	; 0x23
 80033c4:	2001      	movs	r0, #1
 80033c6:	f002 fa5b 	bl	8005880 <ssd1306_SetCursor>
			ssd1306_WriteString("Dim display", Font_7x10, White);
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <menu+0x25c>)
 80033cc:	2301      	movs	r3, #1
 80033ce:	ca06      	ldmia	r2, {r1, r2}
 80033d0:	4811      	ldr	r0, [pc, #68]	; (8003418 <menu+0x268>)
 80033d2:	f002 fa2f 	bl	8005834 <ssd1306_WriteString>
			ssd1306_SetCursor(100, 35);
 80033d6:	2123      	movs	r1, #35	; 0x23
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	f002 fa51 	bl	8005880 <ssd1306_SetCursor>
			if (item[2]) {
 80033de:	79bb      	ldrb	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01d      	beq.n	8003420 <menu+0x270>
				ssd1306_WriteString("Yes", Font_7x10, White);
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <menu+0x25c>)
 80033e6:	2301      	movs	r3, #1
 80033e8:	ca06      	ldmia	r2, {r1, r2}
 80033ea:	480c      	ldr	r0, [pc, #48]	; (800341c <menu+0x26c>)
 80033ec:	f002 fa22 	bl	8005834 <ssd1306_WriteString>
				ssd1306_SetContrast(10);
 80033f0:	200a      	movs	r0, #10
 80033f2:	f002 fb00 	bl	80059f6 <ssd1306_SetContrast>
 80033f6:	e01c      	b.n	8003432 <menu+0x282>
 80033f8:	2000048c 	.word	0x2000048c
 80033fc:	20000480 	.word	0x20000480
 8003400:	20000043 	.word	0x20000043
 8003404:	20000057 	.word	0x20000057
 8003408:	08013288 	.word	0x08013288
 800340c:	2000008c 	.word	0x2000008c
 8003410:	08013298 	.word	0x08013298
 8003414:	080132a4 	.word	0x080132a4
 8003418:	080132b0 	.word	0x080132b0
 800341c:	080132bc 	.word	0x080132bc
				ssd1306_WriteString("No", Font_7x10, White);
 8003420:	4a93      	ldr	r2, [pc, #588]	; (8003670 <menu+0x4c0>)
 8003422:	2301      	movs	r3, #1
 8003424:	ca06      	ldmia	r2, {r1, r2}
 8003426:	4893      	ldr	r0, [pc, #588]	; (8003674 <menu+0x4c4>)
 8003428:	f002 fa04 	bl	8005834 <ssd1306_WriteString>
				ssd1306_SetContrast(250);
 800342c:	20fa      	movs	r0, #250	; 0xfa
 800342e:	f002 fae2 	bl	80059f6 <ssd1306_SetContrast>
			ssd1306_SetCursor(1, 44);
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	2001      	movs	r0, #1
 8003436:	f002 fa23 	bl	8005880 <ssd1306_SetCursor>
			ssd1306_WriteString("Disp off T", Font_7x10, White);
 800343a:	4a8d      	ldr	r2, [pc, #564]	; (8003670 <menu+0x4c0>)
 800343c:	2301      	movs	r3, #1
 800343e:	ca06      	ldmia	r2, {r1, r2}
 8003440:	488d      	ldr	r0, [pc, #564]	; (8003678 <menu+0x4c8>)
 8003442:	f002 f9f7 	bl	8005834 <ssd1306_WriteString>
			ssd1306_SetCursor(100, 44);
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	2064      	movs	r0, #100	; 0x64
 800344a:	f002 fa19 	bl	8005880 <ssd1306_SetCursor>
			sprintf(display.buf2, "%d", display.off_time);
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <menu+0x4cc>)
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	461a      	mov	r2, r3
 8003454:	498a      	ldr	r1, [pc, #552]	; (8003680 <menu+0x4d0>)
 8003456:	488b      	ldr	r0, [pc, #556]	; (8003684 <menu+0x4d4>)
 8003458:	f00c f828 	bl	800f4ac <siprintf>
			ssd1306_WriteString(display.buf2, Font_7x10, White);
 800345c:	4a84      	ldr	r2, [pc, #528]	; (8003670 <menu+0x4c0>)
 800345e:	2301      	movs	r3, #1
 8003460:	ca06      	ldmia	r2, {r1, r2}
 8003462:	4888      	ldr	r0, [pc, #544]	; (8003684 <menu+0x4d4>)
 8003464:	f002 f9e6 	bl	8005834 <ssd1306_WriteString>
			if (item[3]) {
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01e      	beq.n	80034ac <menu+0x2fc>
			  display.off_time += 10;
 800346e:	4b83      	ldr	r3, [pc, #524]	; (800367c <menu+0x4cc>)
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	330a      	adds	r3, #10
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <menu+0x4cc>)
 8003478:	705a      	strb	r2, [r3, #1]
			  if (display.off_time > 60) display.off_time = 0;
 800347a:	4b80      	ldr	r3, [pc, #512]	; (800367c <menu+0x4cc>)
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	2b3c      	cmp	r3, #60	; 0x3c
 8003480:	d902      	bls.n	8003488 <menu+0x2d8>
 8003482:	4b7e      	ldr	r3, [pc, #504]	; (800367c <menu+0x4cc>)
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
			  ssd1306_Fill(Black);
 8003488:	2000      	movs	r0, #0
 800348a:	f002 f8ab 	bl	80055e4 <ssd1306_Fill>
			  ssd1306_UpdateScreen();
 800348e:	f002 f8cd 	bl	800562c <ssd1306_UpdateScreen>
			  item[3] = !item[3];
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f083 0301 	eor.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	71fb      	strb	r3, [r7, #7]
			ssd1306_SetCursor(1, 53);
 80034ac:	2135      	movs	r1, #53	; 0x35
 80034ae:	2001      	movs	r0, #1
 80034b0:	f002 f9e6 	bl	8005880 <ssd1306_SetCursor>
			ssd1306_WriteString("Sensors upd", Font_7x10, White);
 80034b4:	4a6e      	ldr	r2, [pc, #440]	; (8003670 <menu+0x4c0>)
 80034b6:	2301      	movs	r3, #1
 80034b8:	ca06      	ldmia	r2, {r1, r2}
 80034ba:	4873      	ldr	r0, [pc, #460]	; (8003688 <menu+0x4d8>)
 80034bc:	f002 f9ba 	bl	8005834 <ssd1306_WriteString>
			ssd1306_SetCursor(100, 53);
 80034c0:	2135      	movs	r1, #53	; 0x35
 80034c2:	2064      	movs	r0, #100	; 0x64
 80034c4:	f002 f9dc 	bl	8005880 <ssd1306_SetCursor>
			sprintf(display.buf1, "%d", sensor_upd_time);
 80034c8:	4b70      	ldr	r3, [pc, #448]	; (800368c <menu+0x4dc>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	496c      	ldr	r1, [pc, #432]	; (8003680 <menu+0x4d0>)
 80034d0:	486f      	ldr	r0, [pc, #444]	; (8003690 <menu+0x4e0>)
 80034d2:	f00b ffeb 	bl	800f4ac <siprintf>
			ssd1306_WriteString(display.buf1, Font_7x10, White);
 80034d6:	4a66      	ldr	r2, [pc, #408]	; (8003670 <menu+0x4c0>)
 80034d8:	2301      	movs	r3, #1
 80034da:	ca06      	ldmia	r2, {r1, r2}
 80034dc:	486c      	ldr	r0, [pc, #432]	; (8003690 <menu+0x4e0>)
 80034de:	f002 f9a9 	bl	8005834 <ssd1306_WriteString>
			if (item[4]) {
 80034e2:	7a3b      	ldrb	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 809f 	beq.w	8003628 <menu+0x478>
				sensor_upd_time += 5;
 80034ea:	4b68      	ldr	r3, [pc, #416]	; (800368c <menu+0x4dc>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	3305      	adds	r3, #5
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <menu+0x4dc>)
 80034f4:	701a      	strb	r2, [r3, #0]
				if (sensor_upd_time > 60 ) sensor_upd_time = 1;
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <menu+0x4dc>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b3c      	cmp	r3, #60	; 0x3c
 80034fc:	d902      	bls.n	8003504 <menu+0x354>
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <menu+0x4dc>)
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black);
 8003504:	2000      	movs	r0, #0
 8003506:	f002 f86d 	bl	80055e4 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 800350a:	f002 f88f 	bl	800562c <ssd1306_UpdateScreen>
			  item[4] = !item[4];
 800350e:	7a3b      	ldrb	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f083 0301 	eor.w	r3, r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	723b      	strb	r3, [r7, #8]
			break;
 8003528:	e07e      	b.n	8003628 <menu+0x478>
    		ssd1306_SetCursor(1, 17);
 800352a:	2111      	movs	r1, #17
 800352c:	2001      	movs	r0, #1
 800352e:	f002 f9a7 	bl	8005880 <ssd1306_SetCursor>
    		ssd1306_WriteString("System reset", Font_7x10, White);
 8003532:	4a4f      	ldr	r2, [pc, #316]	; (8003670 <menu+0x4c0>)
 8003534:	2301      	movs	r3, #1
 8003536:	ca06      	ldmia	r2, {r1, r2}
 8003538:	4856      	ldr	r0, [pc, #344]	; (8003694 <menu+0x4e4>)
 800353a:	f002 f97b 	bl	8005834 <ssd1306_WriteString>
    		ssd1306_SetCursor(100, 17);
 800353e:	2111      	movs	r1, #17
 8003540:	2064      	movs	r0, #100	; 0x64
 8003542:	f002 f99d 	bl	8005880 <ssd1306_SetCursor>
    		if (item[5]) {
 8003546:	7a7b      	ldrb	r3, [r7, #9]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <menu+0x3be>
    				  ssd1306_WriteString("Yes?", Font_7x10, White);
 800354c:	4a48      	ldr	r2, [pc, #288]	; (8003670 <menu+0x4c0>)
 800354e:	2301      	movs	r3, #1
 8003550:	ca06      	ldmia	r2, {r1, r2}
 8003552:	4851      	ldr	r0, [pc, #324]	; (8003698 <menu+0x4e8>)
 8003554:	f002 f96e 	bl	8005834 <ssd1306_WriteString>
    				  ssd1306_Fill(Black);
 8003558:	2000      	movs	r0, #0
 800355a:	f002 f843 	bl	80055e4 <ssd1306_Fill>
    				  ssd1306_UpdateScreen();
 800355e:	f002 f865 	bl	800562c <ssd1306_UpdateScreen>
    				  if (button.MENU) NVIC_SystemReset();
 8003562:	4b4e      	ldr	r3, [pc, #312]	; (800369c <menu+0x4ec>)
 8003564:	789b      	ldrb	r3, [r3, #2]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <menu+0x3be>
 800356a:	f7ff fb9d 	bl	8002ca8 <__NVIC_SystemReset>
    		ssd1306_SetCursor(1, 26);
 800356e:	211a      	movs	r1, #26
 8003570:	2001      	movs	r0, #1
 8003572:	f002 f985 	bl	8005880 <ssd1306_SetCursor>
    		ssd1306_WriteString("HW info", Font_7x10, White);
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <menu+0x4c0>)
 8003578:	2301      	movs	r3, #1
 800357a:	ca06      	ldmia	r2, {r1, r2}
 800357c:	4848      	ldr	r0, [pc, #288]	; (80036a0 <menu+0x4f0>)
 800357e:	f002 f959 	bl	8005834 <ssd1306_WriteString>
    		ssd1306_SetCursor(100, 26);
 8003582:	211a      	movs	r1, #26
 8003584:	2064      	movs	r0, #100	; 0x64
 8003586:	f002 f97b 	bl	8005880 <ssd1306_SetCursor>
    		if (item[6]) {
 800358a:	7abb      	ldrb	r3, [r7, #10]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d019      	beq.n	80035c4 <menu+0x414>
						ssd1306_Fill(Black);
 8003590:	2000      	movs	r0, #0
 8003592:	f002 f827 	bl	80055e4 <ssd1306_Fill>
						ssd1306_UpdateScreen();
 8003596:	f002 f849 	bl	800562c <ssd1306_UpdateScreen>
						ssd1306_SetCursor(1, 17);
 800359a:	2111      	movs	r1, #17
 800359c:	2001      	movs	r0, #1
 800359e:	f002 f96f 	bl	8005880 <ssd1306_SetCursor>
						sprintf(display.buf1, "Vbat %2.3f", vbat);
 80035a2:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <menu+0x4f4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc ffa6 	bl	80004f8 <__aeabi_f2d>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	493d      	ldr	r1, [pc, #244]	; (80036a8 <menu+0x4f8>)
 80035b2:	4837      	ldr	r0, [pc, #220]	; (8003690 <menu+0x4e0>)
 80035b4:	f00b ff7a 	bl	800f4ac <siprintf>
						ssd1306_WriteString(display.buf1, Font_7x10, White);
 80035b8:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <menu+0x4c0>)
 80035ba:	2301      	movs	r3, #1
 80035bc:	ca06      	ldmia	r2, {r1, r2}
 80035be:	4834      	ldr	r0, [pc, #208]	; (8003690 <menu+0x4e0>)
 80035c0:	f002 f938 	bl	8005834 <ssd1306_WriteString>
        		ssd1306_SetCursor(1, 17);
 80035c4:	2111      	movs	r1, #17
 80035c6:	2001      	movs	r0, #1
 80035c8:	f002 f95a 	bl	8005880 <ssd1306_SetCursor>
        		ssd1306_WriteString("Radio", Font_7x10, White);
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <menu+0x4c0>)
 80035ce:	2301      	movs	r3, #1
 80035d0:	ca06      	ldmia	r2, {r1, r2}
 80035d2:	4836      	ldr	r0, [pc, #216]	; (80036ac <menu+0x4fc>)
 80035d4:	f002 f92e 	bl	8005834 <ssd1306_WriteString>
        		ssd1306_SetCursor(100, 17);
 80035d8:	2111      	movs	r1, #17
 80035da:	2064      	movs	r0, #100	; 0x64
 80035dc:	f002 f950 	bl	8005880 <ssd1306_SetCursor>
        		ssd1306_WriteString("Off", Font_7x10, White);
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <menu+0x4c0>)
 80035e2:	2301      	movs	r3, #1
 80035e4:	ca06      	ldmia	r2, {r1, r2}
 80035e6:	4832      	ldr	r0, [pc, #200]	; (80036b0 <menu+0x500>)
 80035e8:	f002 f924 	bl	8005834 <ssd1306_WriteString>
        		if (item[7]) {
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01c      	beq.n	800362c <menu+0x47c>
        				ssd1306_Fill(Black);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f001 fff6 	bl	80055e4 <ssd1306_Fill>
        			    ssd1306_UpdateScreen();
 80035f8:	f002 f818 	bl	800562c <ssd1306_UpdateScreen>
        				ssd1306_WriteString("On", Font_7x10, White);
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <menu+0x4c0>)
 80035fe:	2301      	movs	r3, #1
 8003600:	ca06      	ldmia	r2, {r1, r2}
 8003602:	482c      	ldr	r0, [pc, #176]	; (80036b4 <menu+0x504>)
 8003604:	f002 f916 	bl	8005834 <ssd1306_WriteString>
        				item[7] = !item[7];
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf14      	ite	ne
 800360e:	2301      	movne	r3, #1
 8003610:	2300      	moveq	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f083 0301 	eor.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	72fb      	strb	r3, [r7, #11]
    	break;
 8003622:	e003      	b.n	800362c <menu+0x47c>
    default: break;
 8003624:	bf00      	nop
 8003626:	e002      	b.n	800362e <menu+0x47e>
			break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <menu+0x47e>
    	break;
 800362c:	bf00      	nop
	}

    ssd1306_DrawRectangle(0, 16 + (pos * 9), 127, 26 + (pos * 9), White);
 800362e:	7d7b      	ldrb	r3, [r7, #21]
 8003630:	461a      	mov	r2, r3
 8003632:	00d2      	lsls	r2, r2, #3
 8003634:	4413      	add	r3, r2
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3310      	adds	r3, #16
 800363a:	b2d9      	uxtb	r1, r3
 800363c:	7d7b      	ldrb	r3, [r7, #21]
 800363e:	461a      	mov	r2, r3
 8003640:	00d2      	lsls	r2, r2, #3
 8003642:	4413      	add	r3, r2
 8003644:	b2db      	uxtb	r3, r3
 8003646:	331a      	adds	r3, #26
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2201      	movs	r2, #1
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	227f      	movs	r2, #127	; 0x7f
 8003650:	2000      	movs	r0, #0
 8003652:	f002 f999 	bl	8005988 <ssd1306_DrawRectangle>
    ssd1306_UpdateScreen();
 8003656:	f001 ffe9 	bl	800562c <ssd1306_UpdateScreen>
    osDelay(200);
 800365a:	20c8      	movs	r0, #200	; 0xc8
 800365c:	f008 f9c0 	bl	800b9e0 <osDelay>
    if (button.EXIT) return;
 8003660:	e5c3      	b.n	80031ea <menu+0x3a>
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <menu+0x4b8>
    if (watch_state.under_water_flag) return;
 8003666:	bf00      	nop

  }
}
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000008c 	.word	0x2000008c
 8003674:	080132c0 	.word	0x080132c0
 8003678:	080132c4 	.word	0x080132c4
 800367c:	2000003c 	.word	0x2000003c
 8003680:	080132d0 	.word	0x080132d0
 8003684:	20000057 	.word	0x20000057
 8003688:	080132d4 	.word	0x080132d4
 800368c:	20000491 	.word	0x20000491
 8003690:	20000043 	.word	0x20000043
 8003694:	080132e0 	.word	0x080132e0
 8003698:	080132f0 	.word	0x080132f0
 800369c:	2000048c 	.word	0x2000048c
 80036a0:	080132f8 	.word	0x080132f8
 80036a4:	20000478 	.word	0x20000478
 80036a8:	08013300 	.word	0x08013300
 80036ac:	0801330c 	.word	0x0801330c
 80036b0:	08013314 	.word	0x08013314
 80036b4:	08013318 	.word	0x08013318

080036b8 <show_bat_status>:


void show_bat_status(void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af02      	add	r7, sp, #8
	uint8_t percent = (vbat - 3.2) * 100;
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <show_bat_status+0xa8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff18 	bl	80004f8 <__aeabi_f2d>
 80036c8:	a323      	add	r3, pc, #140	; (adr r3, 8003758 <show_bat_status+0xa0>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fc fdb3 	bl	8000238 <__aeabi_dsub>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <show_bat_status+0xac>)
 80036e0:	f7fc ff62 	bl	80005a8 <__aeabi_dmul>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7fd fa34 	bl	8000b58 <__aeabi_d2uiz>
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
	if (percent > 100) percent = 100;
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <show_bat_status+0x46>
 80036fa:	2364      	movs	r3, #100	; 0x64
 80036fc:	71fb      	strb	r3, [r7, #7]
	ssd1306_DrawRectangle(100,0,127,10, White);
 80036fe:	2301      	movs	r3, #1
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	230a      	movs	r3, #10
 8003704:	227f      	movs	r2, #127	; 0x7f
 8003706:	2100      	movs	r1, #0
 8003708:	2064      	movs	r0, #100	; 0x64
 800370a:	f002 f93d 	bl	8005988 <ssd1306_DrawRectangle>
	for (uint i = 0; i < percent / 4; i++) {
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	e012      	b.n	800373a <show_bat_status+0x82>
		ssd1306_Line(126 - i, 0, 126 - i, 10, White);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 800371c:	b2d8      	uxtb	r0, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8003726:	b2da      	uxtb	r2, r3
 8003728:	2301      	movs	r3, #1
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	230a      	movs	r3, #10
 800372e:	2100      	movs	r1, #0
 8003730:	f002 f8be 	bl	80058b0 <ssd1306_Line>
	for (uint i = 0; i < percent / 4; i++) {
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	4293      	cmp	r3, r2
 8003746:	d3e5      	bcc.n	8003714 <show_bat_status+0x5c>
	}


}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	f3af 8000 	nop.w
 8003758:	9999999a 	.word	0x9999999a
 800375c:	40099999 	.word	0x40099999
 8003760:	20000478 	.word	0x20000478
 8003764:	40590000 	.word	0x40590000

08003768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376c:	f002 fc72 	bl	8006054 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003770:	f000 f8fa 	bl	8003968 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003774:	f000 f968 	bl	8003a48 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003778:	f000 fa6e 	bl	8003c58 <MX_GPIO_Init>
  MX_ADC1_Init();
 800377c:	f000 f982 	bl	8003a84 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003780:	f000 f9e4 	bl	8003b4c <MX_I2C1_Init>
  MX_RTC_Init();
 8003784:	f000 fa40 	bl	8003c08 <MX_RTC_Init>
  MX_IWDG_Init();
 8003788:	f000 fa20 	bl	8003bcc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Display_en_GPIO_Port, Display_en_Pin, GPIO_PIN_SET);
 800378c:	2201      	movs	r2, #1
 800378e:	2108      	movs	r1, #8
 8003790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003794:	f004 f9a4 	bl	8007ae0 <HAL_GPIO_WritePin>
   	  ssd1306_Init();
 8003798:	f001 feba 	bl	8005510 <ssd1306_Init>
   	  ssd1306_SetContrast(255);
 800379c:	20ff      	movs	r0, #255	; 0xff
 800379e:	f002 f92a 	bl	80059f6 <ssd1306_SetContrast>
       ssd1306_SetCursor(0, 0);
 80037a2:	2100      	movs	r1, #0
 80037a4:	2000      	movs	r0, #0
 80037a6:	f002 f86b 	bl	8005880 <ssd1306_SetCursor>
       ssd1306_WriteString("Display Ok", Font_7x10, White);
 80037aa:	4a55      	ldr	r2, [pc, #340]	; (8003900 <main+0x198>)
 80037ac:	2301      	movs	r3, #1
 80037ae:	ca06      	ldmia	r2, {r1, r2}
 80037b0:	4854      	ldr	r0, [pc, #336]	; (8003904 <main+0x19c>)
 80037b2:	f002 f83f 	bl	8005834 <ssd1306_WriteString>
       ssd1306_UpdateScreen();
 80037b6:	f001 ff39 	bl	800562c <ssd1306_UpdateScreen>

       ssd1306_SetCursor(0, 19);
 80037ba:	2113      	movs	r1, #19
 80037bc:	2000      	movs	r0, #0
 80037be:	f002 f85f 	bl	8005880 <ssd1306_SetCursor>
           if(LSM303C_init()) {
 80037c2:	f7fe fae6 	bl	8001d92 <LSM303C_init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <main+0x78>
           	 watch_state.lsm303_is_ok = true;
 80037cc:	4b4e      	ldr	r3, [pc, #312]	; (8003908 <main+0x1a0>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	71da      	strb	r2, [r3, #7]
           	ssd1306_WriteString("LSM303 Ok", Font_7x10, White);
 80037d2:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <main+0x198>)
 80037d4:	2301      	movs	r3, #1
 80037d6:	ca06      	ldmia	r2, {r1, r2}
 80037d8:	484c      	ldr	r0, [pc, #304]	; (800390c <main+0x1a4>)
 80037da:	f002 f82b 	bl	8005834 <ssd1306_WriteString>
 80037de:	e005      	b.n	80037ec <main+0x84>
           }
           else ssd1306_WriteString("LSM303 init fail!", Font_7x10, White);
 80037e0:	4a47      	ldr	r2, [pc, #284]	; (8003900 <main+0x198>)
 80037e2:	2301      	movs	r3, #1
 80037e4:	ca06      	ldmia	r2, {r1, r2}
 80037e6:	484a      	ldr	r0, [pc, #296]	; (8003910 <main+0x1a8>)
 80037e8:	f002 f824 	bl	8005834 <ssd1306_WriteString>

           ssd1306_SetCursor(0, 30);
 80037ec:	211e      	movs	r1, #30
 80037ee:	2000      	movs	r0, #0
 80037f0:	f002 f846 	bl	8005880 <ssd1306_SetCursor>
           if (MPR121_begin(&hi2c1, 20, 10)){
 80037f4:	220a      	movs	r2, #10
 80037f6:	2114      	movs	r1, #20
 80037f8:	4846      	ldr	r0, [pc, #280]	; (8003914 <main+0x1ac>)
 80037fa:	f7fd fc71 	bl	80010e0 <MPR121_begin>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d011      	beq.n	8003828 <main+0xc0>
               MPR121_setFFI(FFI_10);
 8003804:	2001      	movs	r0, #1
 8003806:	f7fe fa87 	bl	8001d18 <MPR121_setFFI>
               MPR121_setSFI(SFI_10);
 800380a:	2002      	movs	r0, #2
 800380c:	f7fe faa1 	bl	8001d52 <MPR121_setSFI>
               MPR121_setGlobalCDT(CDT_4US);  // reasonable for larger capacitances
 8003810:	2004      	movs	r0, #4
 8003812:	f7fe f92a 	bl	8001a6a <MPR121_setGlobalCDT>
               MPR121_autoSetElectrodeCDC_all();
 8003816:	f7fe fa0b 	bl	8001c30 <MPR121_autoSetElectrodeCDC_all>
               ssd1306_WriteString("MPR121 Ok", Font_7x10, White);
 800381a:	4a39      	ldr	r2, [pc, #228]	; (8003900 <main+0x198>)
 800381c:	2301      	movs	r3, #1
 800381e:	ca06      	ldmia	r2, {r1, r2}
 8003820:	483d      	ldr	r0, [pc, #244]	; (8003918 <main+0x1b0>)
 8003822:	f002 f807 	bl	8005834 <ssd1306_WriteString>
 8003826:	e005      	b.n	8003834 <main+0xcc>
             	}
            else ssd1306_WriteString("MP121 init fail!", Font_7x10, White);
 8003828:	4a35      	ldr	r2, [pc, #212]	; (8003900 <main+0x198>)
 800382a:	2301      	movs	r3, #1
 800382c:	ca06      	ldmia	r2, {r1, r2}
 800382e:	483b      	ldr	r0, [pc, #236]	; (800391c <main+0x1b4>)
 8003830:	f002 f800 	bl	8005834 <ssd1306_WriteString>



           ms5837_Port_Init(&hi2c1);
 8003834:	4837      	ldr	r0, [pc, #220]	; (8003914 <main+0x1ac>)
 8003836:	f001 f8cf 	bl	80049d8 <ms5837_Port_Init>
          	ssd1306_SetCursor(0, 52);
 800383a:	2134      	movs	r1, #52	; 0x34
 800383c:	2000      	movs	r0, #0
 800383e:	f002 f81f 	bl	8005880 <ssd1306_SetCursor>
          	if (ms5837_is_connected() == HAL_OK) {
 8003842:	f001 f8d9 	bl	80049f8 <ms5837_is_connected>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11e      	bne.n	800388a <main+0x122>
          		  ssd1306_WriteString("MS5837 Ok", Font_7x10, White);
 800384c:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <main+0x198>)
 800384e:	2301      	movs	r3, #1
 8003850:	ca06      	ldmia	r2, {r1, r2}
 8003852:	4833      	ldr	r0, [pc, #204]	; (8003920 <main+0x1b8>)
 8003854:	f001 ffee 	bl	8005834 <ssd1306_WriteString>
          		  watch_state.MS5837_is_ok = true;
 8003858:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <main+0x1a0>)
 800385a:	2201      	movs	r2, #1
 800385c:	711a      	strb	r2, [r3, #4]
          		  read_ms5837();
 800385e:	f7ff fac3 	bl	8002de8 <read_ms5837>
          		  MS5837_set_atm_pressure(water.pressure);
 8003862:	4b30      	ldr	r3, [pc, #192]	; (8003924 <main+0x1bc>)
 8003864:	edd3 7a03 	vldr	s15, [r3, #12]
 8003868:	eeb0 0a67 	vmov.f32	s0, s15
 800386c:	f001 fdf8 	bl	8005460 <MS5837_set_atm_pressure>
          		  status = ms5837_read_temperature_and_pressure(&water.temperature, &water.pressure);
 8003870:	492d      	ldr	r1, [pc, #180]	; (8003928 <main+0x1c0>)
 8003872:	482c      	ldr	r0, [pc, #176]	; (8003924 <main+0x1bc>)
 8003874:	f001 fa4c 	bl	8004d10 <ms5837_read_temperature_and_pressure>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <main+0x1c4>)
 800387e:	701a      	strb	r2, [r3, #0]
          		  water.min_temp = water.temperature;
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <main+0x1bc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a27      	ldr	r2, [pc, #156]	; (8003924 <main+0x1bc>)
 8003886:	6093      	str	r3, [r2, #8]
 8003888:	e005      	b.n	8003896 <main+0x12e>
          	  }
          	else ssd1306_WriteString("MS5837 Fail!", Font_7x10, White);
 800388a:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <main+0x198>)
 800388c:	2301      	movs	r3, #1
 800388e:	ca06      	ldmia	r2, {r1, r2}
 8003890:	4827      	ldr	r0, [pc, #156]	; (8003930 <main+0x1c8>)
 8003892:	f001 ffcf 	bl	8005834 <ssd1306_WriteString>

           ssd1306_UpdateScreen();
 8003896:	f001 fec9 	bl	800562c <ssd1306_UpdateScreen>

           /* Perform ADC calibration */
           	   if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800389a:	217f      	movs	r1, #127	; 0x7f
 800389c:	4825      	ldr	r0, [pc, #148]	; (8003934 <main+0x1cc>)
 800389e:	f003 fe55 	bl	800754c <HAL_ADCEx_Calibration_Start>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <main+0x144>
           	   {
           	     /* Calibration Error */
           	     Error_Handler();
 80038a8:	f001 f890 	bl	80049cc <Error_Handler>
           	   }

           HAL_Delay(1000);
 80038ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038b0:	f002 fc1c 	bl	80060ec <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80038b4:	f007 ffb8 	bl	800b828 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <main+0x1d0>)
 80038ba:	2100      	movs	r1, #0
 80038bc:	481f      	ldr	r0, [pc, #124]	; (800393c <main+0x1d4>)
 80038be:	f007 fffd 	bl	800b8bc <osThreadNew>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <main+0x1d8>)
 80038c6:	6013      	str	r3, [r2, #0]

  /* creation of SensorsRead */
  SensorsReadHandle = osThreadNew(SensorsRead_Task, NULL, &SensorsRead_attributes);
 80038c8:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <main+0x1dc>)
 80038ca:	2100      	movs	r1, #0
 80038cc:	481e      	ldr	r0, [pc, #120]	; (8003948 <main+0x1e0>)
 80038ce:	f007 fff5 	bl	800b8bc <osThreadNew>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <main+0x1e4>)
 80038d6:	6013      	str	r3, [r2, #0]

  /* creation of ScanBtn */
  ScanBtnHandle = osThreadNew(ScanBtn_Task, NULL, &ScanBtn_attributes);
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <main+0x1e8>)
 80038da:	2100      	movs	r1, #0
 80038dc:	481d      	ldr	r0, [pc, #116]	; (8003954 <main+0x1ec>)
 80038de:	f007 ffed 	bl	800b8bc <osThreadNew>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <main+0x1f0>)
 80038e6:	6013      	str	r3, [r2, #0]

  /* creation of Main */
  MainHandle = osThreadNew(Main_Task, NULL, &Main_attributes);
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <main+0x1f4>)
 80038ea:	2100      	movs	r1, #0
 80038ec:	481c      	ldr	r0, [pc, #112]	; (8003960 <main+0x1f8>)
 80038ee:	f007 ffe5 	bl	800b8bc <osThreadNew>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <main+0x1fc>)
 80038f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80038f8:	f007 ffba 	bl	800b870 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038fc:	e7fe      	b.n	80038fc <main+0x194>
 80038fe:	bf00      	nop
 8003900:	2000008c 	.word	0x2000008c
 8003904:	0801331c 	.word	0x0801331c
 8003908:	20000480 	.word	0x20000480
 800390c:	08013328 	.word	0x08013328
 8003910:	08013334 	.word	0x08013334
 8003914:	2000037c 	.word	0x2000037c
 8003918:	08013348 	.word	0x08013348
 800391c:	08013354 	.word	0x08013354
 8003920:	08013368 	.word	0x08013368
 8003924:	2000000c 	.word	0x2000000c
 8003928:	20000018 	.word	0x20000018
 800392c:	20000490 	.word	0x20000490
 8003930:	08013374 	.word	0x08013374
 8003934:	20000318 	.word	0x20000318
 8003938:	080135d4 	.word	0x080135d4
 800393c:	08003caf 	.word	0x08003caf
 8003940:	20000404 	.word	0x20000404
 8003944:	080135f8 	.word	0x080135f8
 8003948:	08003cc1 	.word	0x08003cc1
 800394c:	20000408 	.word	0x20000408
 8003950:	0801361c 	.word	0x0801361c
 8003954:	08003df5 	.word	0x08003df5
 8003958:	2000040c 	.word	0x2000040c
 800395c:	08013640 	.word	0x08013640
 8003960:	08003e19 	.word	0x08003e19
 8003964:	20000410 	.word	0x20000410

08003968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b09a      	sub	sp, #104	; 0x68
 800396c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800396e:	f107 0320 	add.w	r3, r7, #32
 8003972:	2248      	movs	r2, #72	; 0x48
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f00a fe01 	bl	800e57e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	611a      	str	r2, [r3, #16]
 800398a:	615a      	str	r2, [r3, #20]
 800398c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV4);
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80039a0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ac:	f043 0303 	orr.w	r3, r3, #3
 80039b0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80039b2:	f005 f985 	bl	8008cc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80039b6:	2010      	movs	r0, #16
 80039b8:	f7ff f98c 	bl	8002cd4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039bc:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <SystemClock_Config+0xdc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <SystemClock_Config+0xdc>)
 80039c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <SystemClock_Config+0xdc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80039d8:	230f      	movs	r3, #15
 80039da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039e2:	2301      	movs	r3, #1
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ec:	2340      	movs	r3, #64	; 0x40
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80039f0:	2305      	movs	r3, #5
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039f8:	f107 0320 	add.w	r3, r7, #32
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 fcff 	bl	8009400 <HAL_RCC_OscConfig>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003a08:	f000 ffe0 	bl	80049cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003a0c:	236f      	movs	r3, #111	; 0x6f
 8003a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003a10:	2302      	movs	r3, #2
 8003a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f006 f85b 	bl	8009ae8 <HAL_RCC_ClockConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003a38:	f000 ffc8 	bl	80049cc <Error_Handler>
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3768      	adds	r7, #104	; 0x68
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58000400 	.word	0x58000400

08003a48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b094      	sub	sp, #80	; 0x50
 8003a4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a4e:	463b      	mov	r3, r7
 8003a50:	2250      	movs	r2, #80	; 0x50
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f00a fd92 	bl	800e57e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8003a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a5e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003a60:	2302      	movs	r3, #2
 8003a62:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003a64:	2310      	movs	r3, #16
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a68:	463b      	mov	r3, r7
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 fc95 	bl	800a39a <HAL_RCCEx_PeriphCLKConfig>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8003a76:	f000 ffa9 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003a7a:	bf00      	nop
 8003a7c:	3750      	adds	r7, #80	; 0x50
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003a9a:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003a9c:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <MX_ADC1_Init+0xc0>)
 8003a9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003aba:	2204      	movs	r2, #4
 8003abc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003afa:	4811      	ldr	r0, [pc, #68]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003afc:	f002 fd30 	bl	8006560 <HAL_ADC_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003b06:	f000 ff61 	bl	80049cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <MX_ADC1_Init+0xc4>)
 8003b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b0e:	2306      	movs	r3, #6
 8003b10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b16:	237f      	movs	r3, #127	; 0x7f
 8003b18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b22:	463b      	mov	r3, r7
 8003b24:	4619      	mov	r1, r3
 8003b26:	4806      	ldr	r0, [pc, #24]	; (8003b40 <MX_ADC1_Init+0xbc>)
 8003b28:	f002 ff88 	bl	8006a3c <HAL_ADC_ConfigChannel>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003b32:	f000 ff4b 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000318 	.word	0x20000318
 8003b44:	50040000 	.word	0x50040000
 8003b48:	25b00200 	.word	0x25b00200

08003b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b52:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <MX_I2C1_Init+0x78>)
 8003b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301139;
 8003b56:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <MX_I2C1_Init+0x7c>)
 8003b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b5c:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b68:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b86:	480e      	ldr	r0, [pc, #56]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b88:	f003 ffc2 	bl	8007b10 <HAL_I2C_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b92:	f000 ff1b 	bl	80049cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b9a:	4809      	ldr	r0, [pc, #36]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003b9c:	f004 ff9a 	bl	8008ad4 <HAL_I2CEx_ConfigAnalogFilter>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003ba6:	f000 ff11 	bl	80049cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003baa:	2100      	movs	r1, #0
 8003bac:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <MX_I2C1_Init+0x74>)
 8003bae:	f004 ffdc 	bl	8008b6a <HAL_I2CEx_ConfigDigitalFilter>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003bb8:	f000 ff08 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	2000037c 	.word	0x2000037c
 8003bc4:	40005400 	.word	0x40005400
 8003bc8:	00301139 	.word	0x00301139

08003bcc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <MX_IWDG_Init+0x34>)
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <MX_IWDG_Init+0x38>)
 8003bd4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <MX_IWDG_Init+0x34>)
 8003bd8:	2204      	movs	r2, #4
 8003bda:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <MX_IWDG_Init+0x34>)
 8003bde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003be2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <MX_IWDG_Init+0x34>)
 8003be6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003bea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003bec:	4804      	ldr	r0, [pc, #16]	; (8003c00 <MX_IWDG_Init+0x34>)
 8003bee:	f005 f808 	bl	8008c02 <HAL_IWDG_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003bf8:	f000 fee8 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	200003d0 	.word	0x200003d0
 8003c04:	40003000 	.word	0x40003000

08003c08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c0e:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <MX_RTC_Init+0x4c>)
 8003c10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c1a:	227f      	movs	r2, #127	; 0x7f
 8003c1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c3c:	4804      	ldr	r0, [pc, #16]	; (8003c50 <MX_RTC_Init+0x48>)
 8003c3e:	f006 fe33 	bl	800a8a8 <HAL_RTC_Init>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003c48:	f000 fec0 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200003e0 	.word	0x200003e0
 8003c54:	40002800 	.word	0x40002800

08003c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6c:	2004      	movs	r0, #4
 8003c6e:	f7ff f847 	bl	8002d00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	2002      	movs	r0, #2
 8003c74:	f7ff f844 	bl	8002d00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f7ff f841 	bl	8002d00 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Vib_Pin|Display_en_Pin, GPIO_PIN_RESET);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	210c      	movs	r1, #12
 8003c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c86:	f003 ff2b 	bl	8007ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Vib_Pin Display_en_Pin */
  GPIO_InitStruct.Pin = Vib_Pin|Display_en_Pin;
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca2:	f003 fd95 	bl	80077d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f007 fe92 	bl	800b9e0 <osDelay>
 8003cbc:	e7fb      	b.n	8003cb6 <StartDefaultTask+0x8>
	...

08003cc0 <SensorsRead_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorsRead_Task */
void SensorsRead_Task(void *argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorsRead_Task */
  /* Infinite loop */
  for(;;)
  {
	  if (!display.off_flag) {
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <SensorsRead_Task+0x118>)
 8003cca:	789b      	ldrb	r3, [r3, #2]
 8003ccc:	f083 0301 	eor.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d074      	beq.n	8003dc0 <SensorsRead_Task+0x100>
	  			  taskENTER_CRITICAL();
 8003cd6:	f00a f815 	bl	800dd04 <vPortEnterCritical>
	  			  /* Start ADC group regular conversion */
	  			  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003cda:	4840      	ldr	r0, [pc, #256]	; (8003ddc <SensorsRead_Task+0x11c>)
 8003cdc:	f002 fd8c 	bl	80067f8 <HAL_ADC_Start>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <SensorsRead_Task+0x2a>
	  				  {
	  				  /* Error: ADC conversion start could not be performed */
	  					  Error_Handler();
 8003ce6:	f000 fe71 	bl	80049cc <Error_Handler>
	  				  }
	  			  HAL_ADC_PollForConversion(&hadc1,100);
 8003cea:	2164      	movs	r1, #100	; 0x64
 8003cec:	483b      	ldr	r0, [pc, #236]	; (8003ddc <SensorsRead_Task+0x11c>)
 8003cee:	f002 fe0a 	bl	8006906 <HAL_ADC_PollForConversion>
	  			  adc_data =  HAL_ADC_GetValue(&hadc1);
 8003cf2:	483a      	ldr	r0, [pc, #232]	; (8003ddc <SensorsRead_Task+0x11c>)
 8003cf4:	f002 fe94 	bl	8006a20 <HAL_ADC_GetValue>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4a39      	ldr	r2, [pc, #228]	; (8003de0 <SensorsRead_Task+0x120>)
 8003cfc:	6013      	str	r3, [r2, #0]
	  			  HAL_ADC_Stop(&hadc1);
 8003cfe:	4837      	ldr	r0, [pc, #220]	; (8003ddc <SensorsRead_Task+0x11c>)
 8003d00:	f002 fdce 	bl	80068a0 <HAL_ADC_Stop>
	  			  vbat = ((adc_data * 0.8) * 8.5) / 1000;
 8003d04:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <SensorsRead_Task+0x120>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fbd3 	bl	80004b4 <__aeabi_ui2d>
 8003d0e:	a330      	add	r3, pc, #192	; (adr r3, 8003dd0 <SensorsRead_Task+0x110>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f7fc fc48 	bl	80005a8 <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <SensorsRead_Task+0x124>)
 8003d26:	f7fc fc3f 	bl	80005a8 <__aeabi_dmul>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <SensorsRead_Task+0x128>)
 8003d38:	f7fc fd60 	bl	80007fc <__aeabi_ddiv>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7fc ff28 	bl	8000b98 <__aeabi_d2f>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4a28      	ldr	r2, [pc, #160]	; (8003dec <SensorsRead_Task+0x12c>)
 8003d4c:	6013      	str	r3, [r2, #0]
	  			  taskEXIT_CRITICAL();
 8003d4e:	f00a f809 	bl	800dd64 <vPortExitCritical>

	  			  mag.azimuth = LSM303C_getAzimuth();
 8003d52:	f7fe fef5 	bl	8002b40 <LSM303C_getAzimuth>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <SensorsRead_Task+0x130>)
 8003d5c:	839a      	strh	r2, [r3, #28]

	  			  mag.accel[0] = LSM303C_readAccelX();
 8003d5e:	f7fe fe09 	bl	8002974 <LSM303C_readAccelX>
 8003d62:	eef0 7a40 	vmov.f32	s15, s0
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <SensorsRead_Task+0x130>)
 8003d68:	edc3 7a04 	vstr	s15, [r3, #16]
	  			  mag.accel[1] = LSM303C_readAccelY();
 8003d6c:	f7fe fe4e 	bl	8002a0c <LSM303C_readAccelY>
 8003d70:	eef0 7a40 	vmov.f32	s15, s0
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <SensorsRead_Task+0x130>)
 8003d76:	edc3 7a05 	vstr	s15, [r3, #20]
	  			  mag.accel[2] = LSM303C_readAccelZ();
 8003d7a:	f7fe fe93 	bl	8002aa4 <LSM303C_readAccelZ>
 8003d7e:	eef0 7a40 	vmov.f32	s15, s0
 8003d82:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <SensorsRead_Task+0x130>)
 8003d84:	edc3 7a06 	vstr	s15, [r3, #24]

	  			  mag.magneto[0] = LSM303C_readMagX();
 8003d88:	f7fe fce9 	bl	800275e <LSM303C_readMagX>
 8003d8c:	eef0 7a40 	vmov.f32	s15, s0
 8003d90:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <SensorsRead_Task+0x130>)
 8003d92:	edc3 7a01 	vstr	s15, [r3, #4]
	  			  mag.magneto[1] = LSM303C_readMagY();
 8003d96:	f7fe fcec 	bl	8002772 <LSM303C_readMagY>
 8003d9a:	eef0 7a40 	vmov.f32	s15, s0
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <SensorsRead_Task+0x130>)
 8003da0:	edc3 7a02 	vstr	s15, [r3, #8]
	  			  mag.magneto[2] = LSM303C_readMagZ();
 8003da4:	f7fe fcef 	bl	8002786 <LSM303C_readMagZ>
 8003da8:	eef0 7a40 	vmov.f32	s15, s0
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <SensorsRead_Task+0x130>)
 8003dae:	edc3 7a03 	vstr	s15, [r3, #12]

	  			  mag.lsm303c_chip_tC = LSM303C_readTempC();
 8003db2:	f7fe f9f9 	bl	80021a8 <LSM303C_readTempC>
 8003db6:	eef0 7a40 	vmov.f32	s15, s0
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <SensorsRead_Task+0x130>)
 8003dbc:	edc3 7a00 	vstr	s15, [r3]

	  	}

	  	read_ms5837();
 8003dc0:	f7ff f812 	bl	8002de8 <read_ms5837>

	      osDelay(1000);
 8003dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dc8:	f007 fe0a 	bl	800b9e0 <osDelay>
	  if (!display.off_flag) {
 8003dcc:	e77c      	b.n	8003cc8 <SensorsRead_Task+0x8>
 8003dce:	bf00      	nop
 8003dd0:	9999999a 	.word	0x9999999a
 8003dd4:	3fe99999 	.word	0x3fe99999
 8003dd8:	2000003c 	.word	0x2000003c
 8003ddc:	20000318 	.word	0x20000318
 8003de0:	2000047c 	.word	0x2000047c
 8003de4:	40210000 	.word	0x40210000
 8003de8:	408f4000 	.word	0x408f4000
 8003dec:	20000478 	.word	0x20000478
 8003df0:	20000414 	.word	0x20000414

08003df4 <ScanBtn_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScanBtn_Task */
void ScanBtn_Task(void *argument)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScanBtn_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8003dfc:	4804      	ldr	r0, [pc, #16]	; (8003e10 <ScanBtn_Task+0x1c>)
 8003dfe:	f004 ff4f 	bl	8008ca0 <HAL_IWDG_Refresh>
	  scan_btn();
 8003e02:	f7fe ff97 	bl	8002d34 <scan_btn>
	  osDelay(300);
 8003e06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e0a:	f007 fde9 	bl	800b9e0 <osDelay>
	  HAL_IWDG_Refresh(&hiwdg);
 8003e0e:	e7f5      	b.n	8003dfc <ScanBtn_Task+0x8>
 8003e10:	200003d0 	.word	0x200003d0
 8003e14:	00000000 	.word	0x00000000

08003e18 <Main_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Main_Task */
void Main_Task(void *argument)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Main_Task */
  /* Infinite loop */
  for(;;)
  {
	  display.off_counter--;
 8003e20:	4b78      	ldr	r3, [pc, #480]	; (8004004 <Main_Task+0x1ec>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	4b76      	ldr	r3, [pc, #472]	; (8004004 <Main_Task+0x1ec>)
 8003e2a:	70da      	strb	r2, [r3, #3]
	  	  memset(display.buf1, 0, sizeof(display.buf1));
 8003e2c:	2214      	movs	r2, #20
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4875      	ldr	r0, [pc, #468]	; (8004008 <Main_Task+0x1f0>)
 8003e32:	f00a fba4 	bl	800e57e <memset>
	  	  memset(display.buf2, 0, sizeof(display.buf2));
 8003e36:	2214      	movs	r2, #20
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4874      	ldr	r0, [pc, #464]	; (800400c <Main_Task+0x1f4>)
 8003e3c:	f00a fb9f 	bl	800e57e <memset>
	  	  	  	if (display.off_counter == 0) {
 8003e40:	4b70      	ldr	r3, [pc, #448]	; (8004004 <Main_Task+0x1ec>)
 8003e42:	78db      	ldrb	r3, [r3, #3]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <Main_Task+0x40>
	  	  	  		display_off();
 8003e48:	f7ff f880 	bl	8002f4c <display_off>
	  	  	  		display.sleep_counter--;
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <Main_Task+0x1ec>)
 8003e4e:	795b      	ldrb	r3, [r3, #5]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	4b6b      	ldr	r3, [pc, #428]	; (8004004 <Main_Task+0x1ec>)
 8003e56:	715a      	strb	r2, [r3, #5]
	  	  	  	}
	  	  	  	if (!display.sleep_counter)  watch_state.sleep_flag=true;
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <Main_Task+0x1ec>)
 8003e5a:	795b      	ldrb	r3, [r3, #5]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <Main_Task+0x4e>
 8003e60:	4b6b      	ldr	r3, [pc, #428]	; (8004010 <Main_Task+0x1f8>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	709a      	strb	r2, [r3, #2]

	  	  	  	ssd1306_Fill(Black);
 8003e66:	2000      	movs	r0, #0
 8003e68:	f001 fbbc 	bl	80055e4 <ssd1306_Fill>
	  	  	  	if (!display.off_flag)show_bat_status();
 8003e6c:	4b65      	ldr	r3, [pc, #404]	; (8004004 <Main_Task+0x1ec>)
 8003e6e:	789b      	ldrb	r3, [r3, #2]
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <Main_Task+0x66>
 8003e7a:	f7ff fc1d 	bl	80036b8 <show_bat_status>

	  	  	  	if ((button.UP || button.DOWN || button.MENU || button.EXIT) & display.off_flag)
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <Main_Task+0x1fc>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <Main_Task+0x86>
 8003e86:	4b63      	ldr	r3, [pc, #396]	; (8004014 <Main_Task+0x1fc>)
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <Main_Task+0x86>
 8003e8e:	4b61      	ldr	r3, [pc, #388]	; (8004014 <Main_Task+0x1fc>)
 8003e90:	789b      	ldrb	r3, [r3, #2]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <Main_Task+0x86>
 8003e96:	4b5f      	ldr	r3, [pc, #380]	; (8004014 <Main_Task+0x1fc>)
 8003e98:	78db      	ldrb	r3, [r3, #3]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <Main_Task+0x8a>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <Main_Task+0x8c>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <Main_Task+0x1ec>)
 8003ea6:	7892      	ldrb	r2, [r2, #2]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <Main_Task+0xa8>
	  	  	  		  	  		  			{
	  	  	  								display_on();
 8003eae:	f7ff f859 	bl	8002f64 <display_on>

	  	  	  		  	  		  			display.off_counter = display.off_time;
 8003eb2:	4b54      	ldr	r3, [pc, #336]	; (8004004 <Main_Task+0x1ec>)
 8003eb4:	785a      	ldrb	r2, [r3, #1]
 8003eb6:	4b53      	ldr	r3, [pc, #332]	; (8004004 <Main_Task+0x1ec>)
 8003eb8:	70da      	strb	r2, [r3, #3]
	  	  	  		  	  		  			display.sleep_counter = 255;
 8003eba:	4b52      	ldr	r3, [pc, #328]	; (8004004 <Main_Task+0x1ec>)
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	715a      	strb	r2, [r3, #5]
	  	  	  		  	  		  			}
	  	  	  	if (button.MENU) {
 8003ec0:	4b54      	ldr	r3, [pc, #336]	; (8004014 <Main_Task+0x1fc>)
 8003ec2:	789b      	ldrb	r3, [r3, #2]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <Main_Task+0xb4>
	  	  	  		menu();//enter_mnu_counter++
 8003ec8:	f7ff f972 	bl	80031b0 <menu>
	  	  	  	}
	  	  	  	//else enter_mnu_counter = 0;
	  	  	  	//if (enter_mnu_counter == 10) menu();

	  	  	  	if ( watch_state.alarmSet_flag) {
 8003ecc:	4b50      	ldr	r3, [pc, #320]	; (8004010 <Main_Task+0x1f8>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <Main_Task+0xd0>
	  	  	  						ssd1306_SetCursor(90, 0);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	205a      	movs	r0, #90	; 0x5a
 8003ed8:	f001 fcd2 	bl	8005880 <ssd1306_SetCursor>
	  	  	  						ssd1306_WriteString("*", Font_7x10, White);
 8003edc:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <Main_Task+0x200>)
 8003ede:	2301      	movs	r3, #1
 8003ee0:	ca06      	ldmia	r2, {r1, r2}
 8003ee2:	484e      	ldr	r0, [pc, #312]	; (800401c <Main_Task+0x204>)
 8003ee4:	f001 fca6 	bl	8005834 <ssd1306_WriteString>
	  	  	  					}

	  	  	  	if (button.DOWN & !display.off_flag) {
 8003ee8:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <Main_Task+0x1fc>)
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b45      	ldr	r3, [pc, #276]	; (8004004 <Main_Task+0x1ec>)
 8003ef0:	789b      	ldrb	r3, [r3, #2]
 8003ef2:	f083 0301 	eor.w	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <Main_Task+0xfe>
	  	  	  		display.page++;
 8003efe:	4b41      	ldr	r3, [pc, #260]	; (8004004 <Main_Task+0x1ec>)
 8003f00:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	b25a      	sxtb	r2, r3
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <Main_Task+0x1ec>)
 8003f0e:	719a      	strb	r2, [r3, #6]
	  	  	  		osDelay(100);
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	f007 fd65 	bl	800b9e0 <osDelay>
	  	  	  	}
	  	  	  	if (button.UP & !display.off_flag) {
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <Main_Task+0x1fc>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <Main_Task+0x1ec>)
 8003f1e:	789b      	ldrb	r3, [r3, #2]
 8003f20:	f083 0301 	eor.w	r3, r3, #1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <Main_Task+0x12c>
	  	  	  		display.page--;
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <Main_Task+0x1ec>)
 8003f2e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	b25a      	sxtb	r2, r3
 8003f3a:	4b32      	ldr	r3, [pc, #200]	; (8004004 <Main_Task+0x1ec>)
 8003f3c:	719a      	strb	r2, [r3, #6]
	  	  	  		osDelay(100);
 8003f3e:	2064      	movs	r0, #100	; 0x64
 8003f40:	f007 fd4e 	bl	800b9e0 <osDelay>
	  	  	  	}

	  	  	  	if (display.page > 7) display.page = 7;
 8003f44:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <Main_Task+0x1ec>)
 8003f46:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	dd02      	ble.n	8003f54 <Main_Task+0x13c>
 8003f4e:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <Main_Task+0x1ec>)
 8003f50:	2207      	movs	r2, #7
 8003f52:	719a      	strb	r2, [r3, #6]
	  	  	  	if (display.page < 0) display.page = 0;
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <Main_Task+0x1ec>)
 8003f56:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da02      	bge.n	8003f64 <Main_Task+0x14c>
 8003f5e:	4b29      	ldr	r3, [pc, #164]	; (8004004 <Main_Task+0x1ec>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	719a      	strb	r2, [r3, #6]

	  	  	  	if (button.MENU & button.EXIT) display.reset_counter++;
 8003f64:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <Main_Task+0x1fc>)
 8003f66:	789b      	ldrb	r3, [r3, #2]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <Main_Task+0x1fc>)
 8003f6c:	78db      	ldrb	r3, [r3, #3]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <Main_Task+0x16a>
 8003f74:	4b23      	ldr	r3, [pc, #140]	; (8004004 <Main_Task+0x1ec>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <Main_Task+0x1ec>)
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e002      	b.n	8003f88 <Main_Task+0x170>
	  	  	  	else display.reset_counter = 0;
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <Main_Task+0x1ec>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
	  	  	  	if (display.reset_counter >= RESET_TIME) NVIC_SystemReset();
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <Main_Task+0x1ec>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b13      	cmp	r3, #19
 8003f8e:	d901      	bls.n	8003f94 <Main_Task+0x17c>
 8003f90:	f7fe fe8a 	bl	8002ca8 <__NVIC_SystemReset>

	  	  	  	HAL_RTC_GetTime(&hrtc, &sfTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8003f94:	2200      	movs	r2, #0
 8003f96:	4922      	ldr	r1, [pc, #136]	; (8004020 <Main_Task+0x208>)
 8003f98:	4822      	ldr	r0, [pc, #136]	; (8004024 <Main_Task+0x20c>)
 8003f9a:	f006 fdf9 	bl	800ab90 <HAL_RTC_GetTime>
	  	  	  	HAL_RTC_GetDate(&hrtc, &sfDate, RTC_FORMAT_BIN);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4921      	ldr	r1, [pc, #132]	; (8004028 <Main_Task+0x210>)
 8003fa2:	4820      	ldr	r0, [pc, #128]	; (8004024 <Main_Task+0x20c>)
 8003fa4:	f006 fe50 	bl	800ac48 <HAL_RTC_GetDate>

	  	  	  	if (!display.page &  watch_state.under_water_flag) {
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <Main_Task+0x1ec>)
 8003faa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <Main_Task+0x1f8>)
 8003fbc:	799b      	ldrb	r3, [r3, #6]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <Main_Task+0x1be>
	  	  	  		if (display.off_flag) display_on();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <Main_Task+0x1ec>)
 8003fc6:	789b      	ldrb	r3, [r3, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <Main_Task+0x1b8>
 8003fcc:	f7fe ffca 	bl	8002f64 <display_on>
	  	  	  		display.page = 1;
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <Main_Task+0x1ec>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	719a      	strb	r2, [r3, #6]
	  	  	  	}


	  	  	  	switch (display.page)
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <Main_Task+0x1ec>)
 8003fd8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	f200 84d1 	bhi.w	8004984 <Main_Task+0xb6c>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <Main_Task+0x1d0>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800402d 	.word	0x0800402d
 8003fec:	08004179 	.word	0x08004179
 8003ff0:	08004479 	.word	0x08004479
 8003ff4:	08004671 	.word	0x08004671
 8003ff8:	080046fb 	.word	0x080046fb
 8003ffc:	0800477d 	.word	0x0800477d
 8004000:	08004889 	.word	0x08004889
 8004004:	2000003c 	.word	0x2000003c
 8004008:	20000043 	.word	0x20000043
 800400c:	20000057 	.word	0x20000057
 8004010:	20000480 	.word	0x20000480
 8004014:	2000048c 	.word	0x2000048c
 8004018:	2000008c 	.word	0x2000008c
 800401c:	08013384 	.word	0x08013384
 8004020:	20000438 	.word	0x20000438
 8004024:	200003e0 	.word	0x200003e0
 8004028:	2000044c 	.word	0x2000044c
	  	  	{

	  	  	  	case 0:

	  	  				ssd1306_SetCursor(0, 20);
 800402c:	2114      	movs	r1, #20
 800402e:	2000      	movs	r0, #0
 8004030:	f001 fc26 	bl	8005880 <ssd1306_SetCursor>
	  	  				sprintf(display.buf2, "%02d:%02d:%02d", sfTime.Hours, sfTime.Minutes, sfTime.Seconds);
 8004034:	4ba8      	ldr	r3, [pc, #672]	; (80042d8 <Main_Task+0x4c0>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	4ba7      	ldr	r3, [pc, #668]	; (80042d8 <Main_Task+0x4c0>)
 800403c:	785b      	ldrb	r3, [r3, #1]
 800403e:	4619      	mov	r1, r3
 8004040:	4ba5      	ldr	r3, [pc, #660]	; (80042d8 <Main_Task+0x4c0>)
 8004042:	789b      	ldrb	r3, [r3, #2]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	460b      	mov	r3, r1
 8004048:	49a4      	ldr	r1, [pc, #656]	; (80042dc <Main_Task+0x4c4>)
 800404a:	48a5      	ldr	r0, [pc, #660]	; (80042e0 <Main_Task+0x4c8>)
 800404c:	f00b fa2e 	bl	800f4ac <siprintf>
	  	  				ssd1306_WriteString(display.buf2, Font_16x26, White);
 8004050:	4aa4      	ldr	r2, [pc, #656]	; (80042e4 <Main_Task+0x4cc>)
 8004052:	2301      	movs	r3, #1
 8004054:	ca06      	ldmia	r2, {r1, r2}
 8004056:	48a2      	ldr	r0, [pc, #648]	; (80042e0 <Main_Task+0x4c8>)
 8004058:	f001 fbec 	bl	8005834 <ssd1306_WriteString>
	  	  				ssd1306_SetCursor(2, 0);
 800405c:	2100      	movs	r1, #0
 800405e:	2002      	movs	r0, #2
 8004060:	f001 fc0e 	bl	8005880 <ssd1306_SetCursor>
	  	  				sprintf(display.buf1, "%2.1f ", water.temperature);
 8004064:	4ba0      	ldr	r3, [pc, #640]	; (80042e8 <Main_Task+0x4d0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fa45 	bl	80004f8 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	499e      	ldr	r1, [pc, #632]	; (80042ec <Main_Task+0x4d4>)
 8004074:	489e      	ldr	r0, [pc, #632]	; (80042f0 <Main_Task+0x4d8>)
 8004076:	f00b fa19 	bl	800f4ac <siprintf>
	  	  				ssd1306_WriteString(display.buf1, Font_7x10, White);
 800407a:	4a9e      	ldr	r2, [pc, #632]	; (80042f4 <Main_Task+0x4dc>)
 800407c:	2301      	movs	r3, #1
 800407e:	ca06      	ldmia	r2, {r1, r2}
 8004080:	489b      	ldr	r0, [pc, #620]	; (80042f0 <Main_Task+0x4d8>)
 8004082:	f001 fbd7 	bl	8005834 <ssd1306_WriteString>
	  	  				sprintf(display.buf1, "%4.1f ", water.pressure / 1.333);
 8004086:	4b98      	ldr	r3, [pc, #608]	; (80042e8 <Main_Task+0x4d0>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc fa34 	bl	80004f8 <__aeabi_f2d>
 8004090:	a38f      	add	r3, pc, #572	; (adr r3, 80042d0 <Main_Task+0x4b8>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc fbb1 	bl	80007fc <__aeabi_ddiv>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4996      	ldr	r1, [pc, #600]	; (80042f8 <Main_Task+0x4e0>)
 80040a0:	4893      	ldr	r0, [pc, #588]	; (80042f0 <Main_Task+0x4d8>)
 80040a2:	f00b fa03 	bl	800f4ac <siprintf>
	  	  				ssd1306_WriteString(display.buf1, Font_7x10, White);
 80040a6:	4a93      	ldr	r2, [pc, #588]	; (80042f4 <Main_Task+0x4dc>)
 80040a8:	2301      	movs	r3, #1
 80040aa:	ca06      	ldmia	r2, {r1, r2}
 80040ac:	4890      	ldr	r0, [pc, #576]	; (80042f0 <Main_Task+0x4d8>)
 80040ae:	f001 fbc1 	bl	8005834 <ssd1306_WriteString>

	  	  				ssd1306_SetCursor(0, 50);
 80040b2:	2132      	movs	r1, #50	; 0x32
 80040b4:	2000      	movs	r0, #0
 80040b6:	f001 fbe3 	bl	8005880 <ssd1306_SetCursor>
	  	  				sprintf(display.buf1, "%02d-%02d-%d", sfDate.Date, sfDate.Month, sfDate.Year);
 80040ba:	4b90      	ldr	r3, [pc, #576]	; (80042fc <Main_Task+0x4e4>)
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b8e      	ldr	r3, [pc, #568]	; (80042fc <Main_Task+0x4e4>)
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	4619      	mov	r1, r3
 80040c6:	4b8d      	ldr	r3, [pc, #564]	; (80042fc <Main_Task+0x4e4>)
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	460b      	mov	r3, r1
 80040ce:	498c      	ldr	r1, [pc, #560]	; (8004300 <Main_Task+0x4e8>)
 80040d0:	4887      	ldr	r0, [pc, #540]	; (80042f0 <Main_Task+0x4d8>)
 80040d2:	f00b f9eb 	bl	800f4ac <siprintf>
	  	  				ssd1306_WriteString(display.buf1, Font_7x10, White);
 80040d6:	4a87      	ldr	r2, [pc, #540]	; (80042f4 <Main_Task+0x4dc>)
 80040d8:	2301      	movs	r3, #1
 80040da:	ca06      	ldmia	r2, {r1, r2}
 80040dc:	4884      	ldr	r0, [pc, #528]	; (80042f0 <Main_Task+0x4d8>)
 80040de:	f001 fba9 	bl	8005834 <ssd1306_WriteString>
	  	  				switch (sfDate.WeekDay) {
 80040e2:	4b86      	ldr	r3, [pc, #536]	; (80042fc <Main_Task+0x4e4>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	2b06      	cmp	r3, #6
 80040ea:	d842      	bhi.n	8004172 <Main_Task+0x35a>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <Main_Task+0x2dc>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004111 	.word	0x08004111
 80040f8:	0800411f 	.word	0x0800411f
 80040fc:	0800412d 	.word	0x0800412d
 8004100:	0800413b 	.word	0x0800413b
 8004104:	08004149 	.word	0x08004149
 8004108:	08004157 	.word	0x08004157
 800410c:	08004165 	.word	0x08004165
	  	  				case 1: ssd1306_WriteString("  Monday", Font_7x10, White); break;
 8004110:	4a78      	ldr	r2, [pc, #480]	; (80042f4 <Main_Task+0x4dc>)
 8004112:	2301      	movs	r3, #1
 8004114:	ca06      	ldmia	r2, {r1, r2}
 8004116:	487b      	ldr	r0, [pc, #492]	; (8004304 <Main_Task+0x4ec>)
 8004118:	f001 fb8c 	bl	8005834 <ssd1306_WriteString>
 800411c:	e02a      	b.n	8004174 <Main_Task+0x35c>
	  	  				case 2: ssd1306_WriteString("  Tuesday", Font_7x10, White); break;
 800411e:	4a75      	ldr	r2, [pc, #468]	; (80042f4 <Main_Task+0x4dc>)
 8004120:	2301      	movs	r3, #1
 8004122:	ca06      	ldmia	r2, {r1, r2}
 8004124:	4878      	ldr	r0, [pc, #480]	; (8004308 <Main_Task+0x4f0>)
 8004126:	f001 fb85 	bl	8005834 <ssd1306_WriteString>
 800412a:	e023      	b.n	8004174 <Main_Task+0x35c>
	  	  				case 3: ssd1306_WriteString("  Wednesday", Font_7x10, White); break;
 800412c:	4a71      	ldr	r2, [pc, #452]	; (80042f4 <Main_Task+0x4dc>)
 800412e:	2301      	movs	r3, #1
 8004130:	ca06      	ldmia	r2, {r1, r2}
 8004132:	4876      	ldr	r0, [pc, #472]	; (800430c <Main_Task+0x4f4>)
 8004134:	f001 fb7e 	bl	8005834 <ssd1306_WriteString>
 8004138:	e01c      	b.n	8004174 <Main_Task+0x35c>
	  	  				case 4: ssd1306_WriteString("  Thursday", Font_7x10, White); break;
 800413a:	4a6e      	ldr	r2, [pc, #440]	; (80042f4 <Main_Task+0x4dc>)
 800413c:	2301      	movs	r3, #1
 800413e:	ca06      	ldmia	r2, {r1, r2}
 8004140:	4873      	ldr	r0, [pc, #460]	; (8004310 <Main_Task+0x4f8>)
 8004142:	f001 fb77 	bl	8005834 <ssd1306_WriteString>
 8004146:	e015      	b.n	8004174 <Main_Task+0x35c>
	  	  				case 5: ssd1306_WriteString("  Friday", Font_7x10, White); break;
 8004148:	4a6a      	ldr	r2, [pc, #424]	; (80042f4 <Main_Task+0x4dc>)
 800414a:	2301      	movs	r3, #1
 800414c:	ca06      	ldmia	r2, {r1, r2}
 800414e:	4871      	ldr	r0, [pc, #452]	; (8004314 <Main_Task+0x4fc>)
 8004150:	f001 fb70 	bl	8005834 <ssd1306_WriteString>
 8004154:	e00e      	b.n	8004174 <Main_Task+0x35c>
	  	  				case 6: ssd1306_WriteString("  Saturday", Font_7x10, White); break;
 8004156:	4a67      	ldr	r2, [pc, #412]	; (80042f4 <Main_Task+0x4dc>)
 8004158:	2301      	movs	r3, #1
 800415a:	ca06      	ldmia	r2, {r1, r2}
 800415c:	486e      	ldr	r0, [pc, #440]	; (8004318 <Main_Task+0x500>)
 800415e:	f001 fb69 	bl	8005834 <ssd1306_WriteString>
 8004162:	e007      	b.n	8004174 <Main_Task+0x35c>
	  	  				case 7: ssd1306_WriteString("  Sunday", Font_7x10, White); break;
 8004164:	4a63      	ldr	r2, [pc, #396]	; (80042f4 <Main_Task+0x4dc>)
 8004166:	2301      	movs	r3, #1
 8004168:	ca06      	ldmia	r2, {r1, r2}
 800416a:	486c      	ldr	r0, [pc, #432]	; (800431c <Main_Task+0x504>)
 800416c:	f001 fb62 	bl	8005834 <ssd1306_WriteString>
 8004170:	e000      	b.n	8004174 <Main_Task+0x35c>
	  	  				default: break;
 8004172:	bf00      	nop
	  	  				}

	  	  				break;
 8004174:	f000 bc07 	b.w	8004986 <Main_Task+0xb6e>
	  	  	  	case 1:
	  	  	  		ssd1306_SetCursor(0, 0);
 8004178:	2100      	movs	r1, #0
 800417a:	2000      	movs	r0, #0
 800417c:	f001 fb80 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%02d:%02d", sfTime.Hours, sfTime.Minutes);
 8004180:	4b55      	ldr	r3, [pc, #340]	; (80042d8 <Main_Task+0x4c0>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <Main_Task+0x4c0>)
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	4965      	ldr	r1, [pc, #404]	; (8004320 <Main_Task+0x508>)
 800418c:	4854      	ldr	r0, [pc, #336]	; (80042e0 <Main_Task+0x4c8>)
 800418e:	f00b f98d 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004192:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <Main_Task+0x4dc>)
 8004194:	2301      	movs	r3, #1
 8004196:	ca06      	ldmia	r2, {r1, r2}
 8004198:	4851      	ldr	r0, [pc, #324]	; (80042e0 <Main_Task+0x4c8>)
 800419a:	f001 fb4b 	bl	8005834 <ssd1306_WriteString>
	  	  	  		switch (sfDate.WeekDay) {
 800419e:	4b57      	ldr	r3, [pc, #348]	; (80042fc <Main_Task+0x4e4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	2b06      	cmp	r3, #6
 80041a6:	d842      	bhi.n	800422e <Main_Task+0x416>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <Main_Task+0x398>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041db 	.word	0x080041db
 80041b8:	080041e9 	.word	0x080041e9
 80041bc:	080041f7 	.word	0x080041f7
 80041c0:	08004205 	.word	0x08004205
 80041c4:	08004213 	.word	0x08004213
 80041c8:	08004221 	.word	0x08004221
	  	  	  		  				case 1: ssd1306_WriteString(" Mo", Font_7x10, White); break;
 80041cc:	4a49      	ldr	r2, [pc, #292]	; (80042f4 <Main_Task+0x4dc>)
 80041ce:	2301      	movs	r3, #1
 80041d0:	ca06      	ldmia	r2, {r1, r2}
 80041d2:	4854      	ldr	r0, [pc, #336]	; (8004324 <Main_Task+0x50c>)
 80041d4:	f001 fb2e 	bl	8005834 <ssd1306_WriteString>
 80041d8:	e02a      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				case 2: ssd1306_WriteString(" Tu", Font_7x10, White); break;
 80041da:	4a46      	ldr	r2, [pc, #280]	; (80042f4 <Main_Task+0x4dc>)
 80041dc:	2301      	movs	r3, #1
 80041de:	ca06      	ldmia	r2, {r1, r2}
 80041e0:	4851      	ldr	r0, [pc, #324]	; (8004328 <Main_Task+0x510>)
 80041e2:	f001 fb27 	bl	8005834 <ssd1306_WriteString>
 80041e6:	e023      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				case 3: ssd1306_WriteString(" Wed", Font_7x10, White); break;
 80041e8:	4a42      	ldr	r2, [pc, #264]	; (80042f4 <Main_Task+0x4dc>)
 80041ea:	2301      	movs	r3, #1
 80041ec:	ca06      	ldmia	r2, {r1, r2}
 80041ee:	484f      	ldr	r0, [pc, #316]	; (800432c <Main_Task+0x514>)
 80041f0:	f001 fb20 	bl	8005834 <ssd1306_WriteString>
 80041f4:	e01c      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				case 4: ssd1306_WriteString(" Thu", Font_7x10, White); break;
 80041f6:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <Main_Task+0x4dc>)
 80041f8:	2301      	movs	r3, #1
 80041fa:	ca06      	ldmia	r2, {r1, r2}
 80041fc:	484c      	ldr	r0, [pc, #304]	; (8004330 <Main_Task+0x518>)
 80041fe:	f001 fb19 	bl	8005834 <ssd1306_WriteString>
 8004202:	e015      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				case 5: ssd1306_WriteString(" Fri", Font_7x10, White); break;
 8004204:	4a3b      	ldr	r2, [pc, #236]	; (80042f4 <Main_Task+0x4dc>)
 8004206:	2301      	movs	r3, #1
 8004208:	ca06      	ldmia	r2, {r1, r2}
 800420a:	484a      	ldr	r0, [pc, #296]	; (8004334 <Main_Task+0x51c>)
 800420c:	f001 fb12 	bl	8005834 <ssd1306_WriteString>
 8004210:	e00e      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				case 6: ssd1306_WriteString(" Sat", Font_7x10, White); break;
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <Main_Task+0x4dc>)
 8004214:	2301      	movs	r3, #1
 8004216:	ca06      	ldmia	r2, {r1, r2}
 8004218:	4847      	ldr	r0, [pc, #284]	; (8004338 <Main_Task+0x520>)
 800421a:	f001 fb0b 	bl	8005834 <ssd1306_WriteString>
 800421e:	e007      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				case 7: ssd1306_WriteString(" Sun", Font_7x10, White); break;
 8004220:	4a34      	ldr	r2, [pc, #208]	; (80042f4 <Main_Task+0x4dc>)
 8004222:	2301      	movs	r3, #1
 8004224:	ca06      	ldmia	r2, {r1, r2}
 8004226:	4845      	ldr	r0, [pc, #276]	; (800433c <Main_Task+0x524>)
 8004228:	f001 fb04 	bl	8005834 <ssd1306_WriteString>
 800422c:	e000      	b.n	8004230 <Main_Task+0x418>
	  	  	  		  				default: break;
 800422e:	bf00      	nop
	  	  	  		  				}
	  	  	  		ssd1306_SetCursor(70, 0);
 8004230:	2100      	movs	r1, #0
 8004232:	2046      	movs	r0, #70	; 0x46
 8004234:	f001 fb24 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%d", mag.azimuth);
 8004238:	4b41      	ldr	r3, [pc, #260]	; (8004340 <Main_Task+0x528>)
 800423a:	8b9b      	ldrh	r3, [r3, #28]
 800423c:	461a      	mov	r2, r3
 800423e:	4941      	ldr	r1, [pc, #260]	; (8004344 <Main_Task+0x52c>)
 8004240:	4827      	ldr	r0, [pc, #156]	; (80042e0 <Main_Task+0x4c8>)
 8004242:	f00b f933 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004246:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <Main_Task+0x4dc>)
 8004248:	2301      	movs	r3, #1
 800424a:	ca06      	ldmia	r2, {r1, r2}
 800424c:	4824      	ldr	r0, [pc, #144]	; (80042e0 <Main_Task+0x4c8>)
 800424e:	f001 faf1 	bl	8005834 <ssd1306_WriteString>

	  	  	  		if (water.depth < 10.0) ssd1306_Line(60, 20, 60, 64, White);
 8004252:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <Main_Task+0x4d0>)
 8004254:	edd3 7a04 	vldr	s15, [r3, #16]
 8004258:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800425c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d508      	bpl.n	8004278 <Main_Task+0x460>
 8004266:	2301      	movs	r3, #1
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2340      	movs	r3, #64	; 0x40
 800426c:	223c      	movs	r2, #60	; 0x3c
 800426e:	2114      	movs	r1, #20
 8004270:	203c      	movs	r0, #60	; 0x3c
 8004272:	f001 fb1d 	bl	80058b0 <ssd1306_Line>
 8004276:	e007      	b.n	8004288 <Main_Task+0x470>
	  	  	  		else ssd1306_Line(65, 20, 65, 64, White);
 8004278:	2301      	movs	r3, #1
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2340      	movs	r3, #64	; 0x40
 800427e:	2241      	movs	r2, #65	; 0x41
 8004280:	2114      	movs	r1, #20
 8004282:	2041      	movs	r0, #65	; 0x41
 8004284:	f001 fb14 	bl	80058b0 <ssd1306_Line>

	  	  	  		ssd1306_SetCursor(65, 16);
 8004288:	2110      	movs	r1, #16
 800428a:	2041      	movs	r0, #65	; 0x41
 800428c:	f001 faf8 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		ssd1306_WriteString("Water T", Font_7x10, White);
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <Main_Task+0x4dc>)
 8004292:	2301      	movs	r3, #1
 8004294:	ca06      	ldmia	r2, {r1, r2}
 8004296:	482c      	ldr	r0, [pc, #176]	; (8004348 <Main_Task+0x530>)
 8004298:	f001 facc 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(62, 28);
 800429c:	211c      	movs	r1, #28
 800429e:	203e      	movs	r0, #62	; 0x3e
 80042a0:	f001 faee 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		if (water.depth < 10.0) sprintf(display.buf2, "%2.1f", water.temperature);
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <Main_Task+0x4d0>)
 80042a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80042aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b6:	d54b      	bpl.n	8004350 <Main_Task+0x538>
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <Main_Task+0x4d0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f91b 	bl	80004f8 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4921      	ldr	r1, [pc, #132]	; (800434c <Main_Task+0x534>)
 80042c8:	4805      	ldr	r0, [pc, #20]	; (80042e0 <Main_Task+0x4c8>)
 80042ca:	f00b f8ef 	bl	800f4ac <siprintf>
 80042ce:	e04a      	b.n	8004366 <Main_Task+0x54e>
 80042d0:	ced91687 	.word	0xced91687
 80042d4:	3ff553f7 	.word	0x3ff553f7
 80042d8:	20000438 	.word	0x20000438
 80042dc:	08013270 	.word	0x08013270
 80042e0:	20000057 	.word	0x20000057
 80042e4:	2000009c 	.word	0x2000009c
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	08013388 	.word	0x08013388
 80042f0:	20000043 	.word	0x20000043
 80042f4:	2000008c 	.word	0x2000008c
 80042f8:	08013390 	.word	0x08013390
 80042fc:	2000044c 	.word	0x2000044c
 8004300:	08013398 	.word	0x08013398
 8004304:	080133a8 	.word	0x080133a8
 8004308:	080133b4 	.word	0x080133b4
 800430c:	080133c0 	.word	0x080133c0
 8004310:	080133cc 	.word	0x080133cc
 8004314:	080133d8 	.word	0x080133d8
 8004318:	080133e4 	.word	0x080133e4
 800431c:	080133f0 	.word	0x080133f0
 8004320:	080133fc 	.word	0x080133fc
 8004324:	08013408 	.word	0x08013408
 8004328:	0801340c 	.word	0x0801340c
 800432c:	08013410 	.word	0x08013410
 8004330:	08013418 	.word	0x08013418
 8004334:	08013420 	.word	0x08013420
 8004338:	08013428 	.word	0x08013428
 800433c:	08013430 	.word	0x08013430
 8004340:	20000414 	.word	0x20000414
 8004344:	080132d0 	.word	0x080132d0
 8004348:	08013438 	.word	0x08013438
 800434c:	08013440 	.word	0x08013440
	  	  	  		else sprintf(display.buf2, "%2.0f", water.temperature);
 8004350:	4bac      	ldr	r3, [pc, #688]	; (8004604 <Main_Task+0x7ec>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc f8cf 	bl	80004f8 <__aeabi_f2d>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	49aa      	ldr	r1, [pc, #680]	; (8004608 <Main_Task+0x7f0>)
 8004360:	48aa      	ldr	r0, [pc, #680]	; (800460c <Main_Task+0x7f4>)
 8004362:	f00b f8a3 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_16x26, White);
 8004366:	4aaa      	ldr	r2, [pc, #680]	; (8004610 <Main_Task+0x7f8>)
 8004368:	2301      	movs	r3, #1
 800436a:	ca06      	ldmia	r2, {r1, r2}
 800436c:	48a7      	ldr	r0, [pc, #668]	; (800460c <Main_Task+0x7f4>)
 800436e:	f001 fa61 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(62, 54);
 8004372:	2136      	movs	r1, #54	; 0x36
 8004374:	203e      	movs	r0, #62	; 0x3e
 8004376:	f001 fa83 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%2.1f %2.1f", water.min_temp, water.max_temp);
 800437a:	4ba2      	ldr	r3, [pc, #648]	; (8004604 <Main_Task+0x7ec>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8ba 	bl	80004f8 <__aeabi_f2d>
 8004384:	4604      	mov	r4, r0
 8004386:	460d      	mov	r5, r1
 8004388:	4b9e      	ldr	r3, [pc, #632]	; (8004604 <Main_Task+0x7ec>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fc f8b3 	bl	80004f8 <__aeabi_f2d>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	e9cd 2300 	strd	r2, r3, [sp]
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	499d      	ldr	r1, [pc, #628]	; (8004614 <Main_Task+0x7fc>)
 80043a0:	489a      	ldr	r0, [pc, #616]	; (800460c <Main_Task+0x7f4>)
 80043a2:	f00b f883 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 80043a6:	4a9c      	ldr	r2, [pc, #624]	; (8004618 <Main_Task+0x800>)
 80043a8:	2301      	movs	r3, #1
 80043aa:	ca06      	ldmia	r2, {r1, r2}
 80043ac:	4897      	ldr	r0, [pc, #604]	; (800460c <Main_Task+0x7f4>)
 80043ae:	f001 fa41 	bl	8005834 <ssd1306_WriteString>

	  	  	  		ssd1306_SetCursor(0, 28);
 80043b2:	211c      	movs	r1, #28
 80043b4:	2000      	movs	r0, #0
 80043b6:	f001 fa63 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		if (water.depth >= 0) sprintf(display.buf1, "%1.1f", water.depth);
 80043ba:	4b92      	ldr	r3, [pc, #584]	; (8004604 <Main_Task+0x7ec>)
 80043bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80043c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	db0a      	blt.n	80043e0 <Main_Task+0x5c8>
 80043ca:	4b8e      	ldr	r3, [pc, #568]	; (8004604 <Main_Task+0x7ec>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f892 	bl	80004f8 <__aeabi_f2d>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4990      	ldr	r1, [pc, #576]	; (800461c <Main_Task+0x804>)
 80043da:	4891      	ldr	r0, [pc, #580]	; (8004620 <Main_Task+0x808>)
 80043dc:	f00b f866 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf1, Font_16x26, White);
 80043e0:	4a8b      	ldr	r2, [pc, #556]	; (8004610 <Main_Task+0x7f8>)
 80043e2:	2301      	movs	r3, #1
 80043e4:	ca06      	ldmia	r2, {r1, r2}
 80043e6:	488e      	ldr	r0, [pc, #568]	; (8004620 <Main_Task+0x808>)
 80043e8:	f001 fa24 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 16);
 80043ec:	2110      	movs	r1, #16
 80043ee:	2000      	movs	r0, #0
 80043f0:	f001 fa46 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "Deep %1.1f", water.max_depth);
 80043f4:	4b83      	ldr	r3, [pc, #524]	; (8004604 <Main_Task+0x7ec>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc f87d 	bl	80004f8 <__aeabi_f2d>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4988      	ldr	r1, [pc, #544]	; (8004624 <Main_Task+0x80c>)
 8004404:	4881      	ldr	r0, [pc, #516]	; (800460c <Main_Task+0x7f4>)
 8004406:	f00b f851 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 800440a:	4a83      	ldr	r2, [pc, #524]	; (8004618 <Main_Task+0x800>)
 800440c:	2301      	movs	r3, #1
 800440e:	ca06      	ldmia	r2, {r1, r2}
 8004410:	487e      	ldr	r0, [pc, #504]	; (800460c <Main_Task+0x7f4>)
 8004412:	f001 fa0f 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 54);
 8004416:	2136      	movs	r1, #54	; 0x36
 8004418:	2000      	movs	r0, #0
 800441a:	f001 fa31 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%lu", water.under_water_time /1000);
 800441e:	4b79      	ldr	r3, [pc, #484]	; (8004604 <Main_Task+0x7ec>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	4a81      	ldr	r2, [pc, #516]	; (8004628 <Main_Task+0x810>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	461a      	mov	r2, r3
 800442c:	497f      	ldr	r1, [pc, #508]	; (800462c <Main_Task+0x814>)
 800442e:	4877      	ldr	r0, [pc, #476]	; (800460c <Main_Task+0x7f4>)
 8004430:	f00b f83c 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004434:	4a78      	ldr	r2, [pc, #480]	; (8004618 <Main_Task+0x800>)
 8004436:	2301      	movs	r3, #1
 8004438:	ca06      	ldmia	r2, {r1, r2}
 800443a:	4874      	ldr	r0, [pc, #464]	; (800460c <Main_Task+0x7f4>)
 800443c:	f001 f9fa 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(30, 54);
 8004440:	2136      	movs	r1, #54	; 0x36
 8004442:	201e      	movs	r0, #30
 8004444:	f001 fa1c 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%lu", water.max_time /1000);
 8004448:	4b6e      	ldr	r3, [pc, #440]	; (8004604 <Main_Task+0x7ec>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4a76      	ldr	r2, [pc, #472]	; (8004628 <Main_Task+0x810>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	461a      	mov	r2, r3
 8004456:	4975      	ldr	r1, [pc, #468]	; (800462c <Main_Task+0x814>)
 8004458:	486c      	ldr	r0, [pc, #432]	; (800460c <Main_Task+0x7f4>)
 800445a:	f00b f827 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 800445e:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <Main_Task+0x800>)
 8004460:	2301      	movs	r3, #1
 8004462:	ca06      	ldmia	r2, {r1, r2}
 8004464:	4869      	ldr	r0, [pc, #420]	; (800460c <Main_Task+0x7f4>)
 8004466:	f001 f9e5 	bl	8005834 <ssd1306_WriteString>

	  	  	  		display.off_counter++;
 800446a:	4b71      	ldr	r3, [pc, #452]	; (8004630 <Main_Task+0x818>)
 800446c:	78db      	ldrb	r3, [r3, #3]
 800446e:	3301      	adds	r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <Main_Task+0x818>)
 8004474:	70da      	strb	r2, [r3, #3]

	  	  	  			break;
 8004476:	e286      	b.n	8004986 <Main_Task+0xb6e>
	  	  	  	case 2:
	  	  	  		ssd1306_SetCursor(0, 0);
 8004478:	2100      	movs	r1, #0
 800447a:	2000      	movs	r0, #0
 800447c:	f001 fa00 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%02d:%02d %d", sfTime.Hours, sfTime.Minutes, mag.azimuth);
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <Main_Task+0x81c>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	4b6b      	ldr	r3, [pc, #428]	; (8004634 <Main_Task+0x81c>)
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	4619      	mov	r1, r3
 800448c:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <Main_Task+0x820>)
 800448e:	8b9b      	ldrh	r3, [r3, #28]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	460b      	mov	r3, r1
 8004494:	4969      	ldr	r1, [pc, #420]	; (800463c <Main_Task+0x824>)
 8004496:	485d      	ldr	r0, [pc, #372]	; (800460c <Main_Task+0x7f4>)
 8004498:	f00b f808 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 800449c:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <Main_Task+0x800>)
 800449e:	2301      	movs	r3, #1
 80044a0:	ca06      	ldmia	r2, {r1, r2}
 80044a2:	485a      	ldr	r0, [pc, #360]	; (800460c <Main_Task+0x7f4>)
 80044a4:	f001 f9c6 	bl	8005834 <ssd1306_WriteString>
	  	  	  		switch (sfDate.WeekDay) {
 80044a8:	4b65      	ldr	r3, [pc, #404]	; (8004640 <Main_Task+0x828>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d841      	bhi.n	8004536 <Main_Task+0x71e>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <Main_Task+0x6a0>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044d5 	.word	0x080044d5
 80044bc:	080044e3 	.word	0x080044e3
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044ff 	.word	0x080044ff
 80044c8:	0800450d 	.word	0x0800450d
 80044cc:	0800451b 	.word	0x0800451b
 80044d0:	08004529 	.word	0x08004529
	  	  	  		  	  		  				case 1: ssd1306_WriteString("  Mo", Font_7x10, White); break;
 80044d4:	4a50      	ldr	r2, [pc, #320]	; (8004618 <Main_Task+0x800>)
 80044d6:	2301      	movs	r3, #1
 80044d8:	ca06      	ldmia	r2, {r1, r2}
 80044da:	485a      	ldr	r0, [pc, #360]	; (8004644 <Main_Task+0x82c>)
 80044dc:	f001 f9aa 	bl	8005834 <ssd1306_WriteString>
 80044e0:	e02a      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				case 2: ssd1306_WriteString("  Tu", Font_7x10, White); break;
 80044e2:	4a4d      	ldr	r2, [pc, #308]	; (8004618 <Main_Task+0x800>)
 80044e4:	2301      	movs	r3, #1
 80044e6:	ca06      	ldmia	r2, {r1, r2}
 80044e8:	4857      	ldr	r0, [pc, #348]	; (8004648 <Main_Task+0x830>)
 80044ea:	f001 f9a3 	bl	8005834 <ssd1306_WriteString>
 80044ee:	e023      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				case 3: ssd1306_WriteString("  Wed", Font_7x10, White); break;
 80044f0:	4a49      	ldr	r2, [pc, #292]	; (8004618 <Main_Task+0x800>)
 80044f2:	2301      	movs	r3, #1
 80044f4:	ca06      	ldmia	r2, {r1, r2}
 80044f6:	4855      	ldr	r0, [pc, #340]	; (800464c <Main_Task+0x834>)
 80044f8:	f001 f99c 	bl	8005834 <ssd1306_WriteString>
 80044fc:	e01c      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				case 4: ssd1306_WriteString("  Thu", Font_7x10, White); break;
 80044fe:	4a46      	ldr	r2, [pc, #280]	; (8004618 <Main_Task+0x800>)
 8004500:	2301      	movs	r3, #1
 8004502:	ca06      	ldmia	r2, {r1, r2}
 8004504:	4852      	ldr	r0, [pc, #328]	; (8004650 <Main_Task+0x838>)
 8004506:	f001 f995 	bl	8005834 <ssd1306_WriteString>
 800450a:	e015      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				case 5: ssd1306_WriteString("  Fri", Font_7x10, White); break;
 800450c:	4a42      	ldr	r2, [pc, #264]	; (8004618 <Main_Task+0x800>)
 800450e:	2301      	movs	r3, #1
 8004510:	ca06      	ldmia	r2, {r1, r2}
 8004512:	4850      	ldr	r0, [pc, #320]	; (8004654 <Main_Task+0x83c>)
 8004514:	f001 f98e 	bl	8005834 <ssd1306_WriteString>
 8004518:	e00e      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				case 6: ssd1306_WriteString("  Sat", Font_7x10, White); break;
 800451a:	4a3f      	ldr	r2, [pc, #252]	; (8004618 <Main_Task+0x800>)
 800451c:	2301      	movs	r3, #1
 800451e:	ca06      	ldmia	r2, {r1, r2}
 8004520:	484d      	ldr	r0, [pc, #308]	; (8004658 <Main_Task+0x840>)
 8004522:	f001 f987 	bl	8005834 <ssd1306_WriteString>
 8004526:	e007      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				case 7: ssd1306_WriteString("  Sun", Font_7x10, White); break;
 8004528:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <Main_Task+0x800>)
 800452a:	2301      	movs	r3, #1
 800452c:	ca06      	ldmia	r2, {r1, r2}
 800452e:	484b      	ldr	r0, [pc, #300]	; (800465c <Main_Task+0x844>)
 8004530:	f001 f980 	bl	8005834 <ssd1306_WriteString>
 8004534:	e000      	b.n	8004538 <Main_Task+0x720>
	  	  	  		  	  		  				default: break;
 8004536:	bf00      	nop
	  	  	  		  	  		  				}
	  	  	  		ssd1306_Line(64, 20, 64, 64, White);
 8004538:	2301      	movs	r3, #1
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2340      	movs	r3, #64	; 0x40
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	2114      	movs	r1, #20
 8004542:	2040      	movs	r0, #64	; 0x40
 8004544:	f001 f9b4 	bl	80058b0 <ssd1306_Line>
	  	  	  		ssd1306_SetCursor(0, 20);
 8004548:	2114      	movs	r1, #20
 800454a:	2000      	movs	r0, #0
 800454c:	f001 f998 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "Dep %1.1f", MS5837_depth(water.pressure));
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <Main_Task+0x7ec>)
 8004552:	edd3 7a03 	vldr	s15, [r3, #12]
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	f000 ff45 	bl	80053e8 <MS5837_depth>
 800455e:	ee10 3a10 	vmov	r3, s0
 8004562:	4618      	mov	r0, r3
 8004564:	f7fb ffc8 	bl	80004f8 <__aeabi_f2d>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	493c      	ldr	r1, [pc, #240]	; (8004660 <Main_Task+0x848>)
 800456e:	4827      	ldr	r0, [pc, #156]	; (800460c <Main_Task+0x7f4>)
 8004570:	f00a ff9c 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004574:	4a28      	ldr	r2, [pc, #160]	; (8004618 <Main_Task+0x800>)
 8004576:	2301      	movs	r3, #1
 8004578:	ca06      	ldmia	r2, {r1, r2}
 800457a:	4824      	ldr	r0, [pc, #144]	; (800460c <Main_Task+0x7f4>)
 800457c:	f001 f95a 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 32);
 8004580:	2120      	movs	r1, #32
 8004582:	2000      	movs	r0, #0
 8004584:	f001 f97c 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "Time %lu", water.under_water_time /1000);
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <Main_Task+0x7ec>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4a26      	ldr	r2, [pc, #152]	; (8004628 <Main_Task+0x810>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	099b      	lsrs	r3, r3, #6
 8004594:	461a      	mov	r2, r3
 8004596:	4933      	ldr	r1, [pc, #204]	; (8004664 <Main_Task+0x84c>)
 8004598:	481c      	ldr	r0, [pc, #112]	; (800460c <Main_Task+0x7f4>)
 800459a:	f00a ff87 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <Main_Task+0x800>)
 80045a0:	2301      	movs	r3, #1
 80045a2:	ca06      	ldmia	r2, {r1, r2}
 80045a4:	4819      	ldr	r0, [pc, #100]	; (800460c <Main_Task+0x7f4>)
 80045a6:	f001 f945 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 44);
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	2000      	movs	r0, #0
 80045ae:	f001 f967 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "To %2.1f", water.temperature);
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <Main_Task+0x7ec>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fb ff9e 	bl	80004f8 <__aeabi_f2d>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4929      	ldr	r1, [pc, #164]	; (8004668 <Main_Task+0x850>)
 80045c2:	4812      	ldr	r0, [pc, #72]	; (800460c <Main_Task+0x7f4>)
 80045c4:	f00a ff72 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <Main_Task+0x800>)
 80045ca:	2301      	movs	r3, #1
 80045cc:	ca06      	ldmia	r2, {r1, r2}
 80045ce:	480f      	ldr	r0, [pc, #60]	; (800460c <Main_Task+0x7f4>)
 80045d0:	f001 f930 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 54);
 80045d4:	2136      	movs	r1, #54	; 0x36
 80045d6:	2000      	movs	r0, #0
 80045d8:	f001 f952 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "Dive %lu", water.dive_counter);
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <Main_Task+0x7ec>)
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	461a      	mov	r2, r3
 80045e2:	4922      	ldr	r1, [pc, #136]	; (800466c <Main_Task+0x854>)
 80045e4:	4809      	ldr	r0, [pc, #36]	; (800460c <Main_Task+0x7f4>)
 80045e6:	f00a ff61 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 80045ea:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <Main_Task+0x800>)
 80045ec:	2301      	movs	r3, #1
 80045ee:	ca06      	ldmia	r2, {r1, r2}
 80045f0:	4806      	ldr	r0, [pc, #24]	; (800460c <Main_Task+0x7f4>)
 80045f2:	f001 f91f 	bl	8005834 <ssd1306_WriteString>

	  	  	  		display.off_counter++;
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <Main_Task+0x818>)
 80045f8:	78db      	ldrb	r3, [r3, #3]
 80045fa:	3301      	adds	r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <Main_Task+0x818>)
 8004600:	70da      	strb	r2, [r3, #3]

	  	  	  			break;
 8004602:	e1c0      	b.n	8004986 <Main_Task+0xb6e>
 8004604:	2000000c 	.word	0x2000000c
 8004608:	08013448 	.word	0x08013448
 800460c:	20000057 	.word	0x20000057
 8004610:	2000009c 	.word	0x2000009c
 8004614:	08013450 	.word	0x08013450
 8004618:	2000008c 	.word	0x2000008c
 800461c:	0801345c 	.word	0x0801345c
 8004620:	20000043 	.word	0x20000043
 8004624:	08013464 	.word	0x08013464
 8004628:	10624dd3 	.word	0x10624dd3
 800462c:	08013470 	.word	0x08013470
 8004630:	2000003c 	.word	0x2000003c
 8004634:	20000438 	.word	0x20000438
 8004638:	20000414 	.word	0x20000414
 800463c:	08013474 	.word	0x08013474
 8004640:	2000044c 	.word	0x2000044c
 8004644:	08013484 	.word	0x08013484
 8004648:	0801348c 	.word	0x0801348c
 800464c:	08013494 	.word	0x08013494
 8004650:	0801349c 	.word	0x0801349c
 8004654:	080134a4 	.word	0x080134a4
 8004658:	080134ac 	.word	0x080134ac
 800465c:	080134b4 	.word	0x080134b4
 8004660:	080134bc 	.word	0x080134bc
 8004664:	080134c8 	.word	0x080134c8
 8004668:	080134d4 	.word	0x080134d4
 800466c:	080134e0 	.word	0x080134e0
	  	  	  	case 3:
	  	  	  		ssd1306_SetCursor(0, 0);
 8004670:	2100      	movs	r1, #0
 8004672:	2000      	movs	r0, #0
 8004674:	f001 f904 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%02d:%02d:%02d", sfTime.Hours, sfTime.Minutes, sfTime.Seconds);
 8004678:	4baf      	ldr	r3, [pc, #700]	; (8004938 <Main_Task+0xb20>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	4bae      	ldr	r3, [pc, #696]	; (8004938 <Main_Task+0xb20>)
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	4619      	mov	r1, r3
 8004684:	4bac      	ldr	r3, [pc, #688]	; (8004938 <Main_Task+0xb20>)
 8004686:	789b      	ldrb	r3, [r3, #2]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	460b      	mov	r3, r1
 800468c:	49ab      	ldr	r1, [pc, #684]	; (800493c <Main_Task+0xb24>)
 800468e:	48ac      	ldr	r0, [pc, #688]	; (8004940 <Main_Task+0xb28>)
 8004690:	f00a ff0c 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004694:	4aab      	ldr	r2, [pc, #684]	; (8004944 <Main_Task+0xb2c>)
 8004696:	2301      	movs	r3, #1
 8004698:	ca06      	ldmia	r2, {r1, r2}
 800469a:	48a9      	ldr	r0, [pc, #676]	; (8004940 <Main_Task+0xb28>)
 800469c:	f001 f8ca 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 52);
 80046a0:	2134      	movs	r1, #52	; 0x34
 80046a2:	2000      	movs	r0, #0
 80046a4:	f001 f8ec 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		ssd1306_WriteString("Depth", Font_7x10, White);
 80046a8:	4aa6      	ldr	r2, [pc, #664]	; (8004944 <Main_Task+0xb2c>)
 80046aa:	2301      	movs	r3, #1
 80046ac:	ca06      	ldmia	r2, {r1, r2}
 80046ae:	48a6      	ldr	r0, [pc, #664]	; (8004948 <Main_Task+0xb30>)
 80046b0:	f001 f8c0 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 25);
 80046b4:	2119      	movs	r1, #25
 80046b6:	2000      	movs	r0, #0
 80046b8:	f001 f8e2 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%2.3fM", MS5837_depth(water.pressure));
 80046bc:	4ba3      	ldr	r3, [pc, #652]	; (800494c <Main_Task+0xb34>)
 80046be:	edd3 7a03 	vldr	s15, [r3, #12]
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	f000 fe8f 	bl	80053e8 <MS5837_depth>
 80046ca:	ee10 3a10 	vmov	r3, s0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb ff12 	bl	80004f8 <__aeabi_f2d>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	499d      	ldr	r1, [pc, #628]	; (8004950 <Main_Task+0xb38>)
 80046da:	4899      	ldr	r0, [pc, #612]	; (8004940 <Main_Task+0xb28>)
 80046dc:	f00a fee6 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_16x26, White);
 80046e0:	4a9c      	ldr	r2, [pc, #624]	; (8004954 <Main_Task+0xb3c>)
 80046e2:	2301      	movs	r3, #1
 80046e4:	ca06      	ldmia	r2, {r1, r2}
 80046e6:	4896      	ldr	r0, [pc, #600]	; (8004940 <Main_Task+0xb28>)
 80046e8:	f001 f8a4 	bl	8005834 <ssd1306_WriteString>
	  	  	  		display.off_counter++;
 80046ec:	4b9a      	ldr	r3, [pc, #616]	; (8004958 <Main_Task+0xb40>)
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	3301      	adds	r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b98      	ldr	r3, [pc, #608]	; (8004958 <Main_Task+0xb40>)
 80046f6:	70da      	strb	r2, [r3, #3]

	  	  	  		break;
 80046f8:	e145      	b.n	8004986 <Main_Task+0xb6e>
	  	  	  	case 4:
	  	  	  		ssd1306_SetCursor(0, 0);
 80046fa:	2100      	movs	r1, #0
 80046fc:	2000      	movs	r0, #0
 80046fe:	f001 f8bf 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%02d:%02d:%02d", sfTime.Hours, sfTime.Minutes, sfTime.Seconds);
 8004702:	4b8d      	ldr	r3, [pc, #564]	; (8004938 <Main_Task+0xb20>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	4b8b      	ldr	r3, [pc, #556]	; (8004938 <Main_Task+0xb20>)
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	4619      	mov	r1, r3
 800470e:	4b8a      	ldr	r3, [pc, #552]	; (8004938 <Main_Task+0xb20>)
 8004710:	789b      	ldrb	r3, [r3, #2]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	460b      	mov	r3, r1
 8004716:	4989      	ldr	r1, [pc, #548]	; (800493c <Main_Task+0xb24>)
 8004718:	4889      	ldr	r0, [pc, #548]	; (8004940 <Main_Task+0xb28>)
 800471a:	f00a fec7 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 800471e:	4a89      	ldr	r2, [pc, #548]	; (8004944 <Main_Task+0xb2c>)
 8004720:	2301      	movs	r3, #1
 8004722:	ca06      	ldmia	r2, {r1, r2}
 8004724:	4886      	ldr	r0, [pc, #536]	; (8004940 <Main_Task+0xb28>)
 8004726:	f001 f885 	bl	8005834 <ssd1306_WriteString>
	  	  	  		watch_state.end_hrm_measure = true;
 800472a:	4b8c      	ldr	r3, [pc, #560]	; (800495c <Main_Task+0xb44>)
 800472c:	2201      	movs	r2, #1
 800472e:	721a      	strb	r2, [r3, #8]
	  	  	  		ssd1306_SetCursor(0, 52);
 8004730:	2134      	movs	r1, #52	; 0x34
 8004732:	2000      	movs	r0, #0
 8004734:	f001 f8a4 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		ssd1306_WriteString("Pressure   mbar", Font_7x10, White);
 8004738:	4a82      	ldr	r2, [pc, #520]	; (8004944 <Main_Task+0xb2c>)
 800473a:	2301      	movs	r3, #1
 800473c:	ca06      	ldmia	r2, {r1, r2}
 800473e:	4888      	ldr	r0, [pc, #544]	; (8004960 <Main_Task+0xb48>)
 8004740:	f001 f878 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 25);
 8004744:	2119      	movs	r1, #25
 8004746:	2000      	movs	r0, #0
 8004748:	f001 f89a 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%4.1f", water.pressure);
 800474c:	4b7f      	ldr	r3, [pc, #508]	; (800494c <Main_Task+0xb34>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fb fed1 	bl	80004f8 <__aeabi_f2d>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4982      	ldr	r1, [pc, #520]	; (8004964 <Main_Task+0xb4c>)
 800475c:	4878      	ldr	r0, [pc, #480]	; (8004940 <Main_Task+0xb28>)
 800475e:	f00a fea5 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_16x26, White);
 8004762:	4a7c      	ldr	r2, [pc, #496]	; (8004954 <Main_Task+0xb3c>)
 8004764:	2301      	movs	r3, #1
 8004766:	ca06      	ldmia	r2, {r1, r2}
 8004768:	4875      	ldr	r0, [pc, #468]	; (8004940 <Main_Task+0xb28>)
 800476a:	f001 f863 	bl	8005834 <ssd1306_WriteString>
	  	  	  		display.off_counter++;
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <Main_Task+0xb40>)
 8004770:	78db      	ldrb	r3, [r3, #3]
 8004772:	3301      	adds	r3, #1
 8004774:	b2da      	uxtb	r2, r3
 8004776:	4b78      	ldr	r3, [pc, #480]	; (8004958 <Main_Task+0xb40>)
 8004778:	70da      	strb	r2, [r3, #3]

	  	  	  		break;
 800477a:	e104      	b.n	8004986 <Main_Task+0xb6e>

	  	  	  	case 5:

	  	  	  		ssd1306_SetCursor(0, 0);
 800477c:	2100      	movs	r1, #0
 800477e:	2000      	movs	r0, #0
 8004780:	f001 f87e 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		//ssd1306_WriteString("LSM303C data", Font_7x10, White);
	  	  	  		//ssd1306_SetCursor(0, 12);
	  	  	  		ssd1306_WriteString("Mag    Accel", Font_7x10, White);
 8004784:	4a6f      	ldr	r2, [pc, #444]	; (8004944 <Main_Task+0xb2c>)
 8004786:	2301      	movs	r3, #1
 8004788:	ca06      	ldmia	r2, {r1, r2}
 800478a:	4877      	ldr	r0, [pc, #476]	; (8004968 <Main_Task+0xb50>)
 800478c:	f001 f852 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0, 15);
 8004790:	210f      	movs	r1, #15
 8004792:	2000      	movs	r0, #0
 8004794:	f001 f874 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%3.3f    %3.1f", mag.magneto[0], mag.accel[0]);
 8004798:	4b74      	ldr	r3, [pc, #464]	; (800496c <Main_Task+0xb54>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fb feab 	bl	80004f8 <__aeabi_f2d>
 80047a2:	4604      	mov	r4, r0
 80047a4:	460d      	mov	r5, r1
 80047a6:	4b71      	ldr	r3, [pc, #452]	; (800496c <Main_Task+0xb54>)
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fb fea4 	bl	80004f8 <__aeabi_f2d>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	e9cd 2300 	strd	r2, r3, [sp]
 80047b8:	4622      	mov	r2, r4
 80047ba:	462b      	mov	r3, r5
 80047bc:	496c      	ldr	r1, [pc, #432]	; (8004970 <Main_Task+0xb58>)
 80047be:	4860      	ldr	r0, [pc, #384]	; (8004940 <Main_Task+0xb28>)
 80047c0:	f00a fe74 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 80047c4:	4a5f      	ldr	r2, [pc, #380]	; (8004944 <Main_Task+0xb2c>)
 80047c6:	2301      	movs	r3, #1
 80047c8:	ca06      	ldmia	r2, {r1, r2}
 80047ca:	485d      	ldr	r0, [pc, #372]	; (8004940 <Main_Task+0xb28>)
 80047cc:	f001 f832 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0,27);
 80047d0:	211b      	movs	r1, #27
 80047d2:	2000      	movs	r0, #0
 80047d4:	f001 f854 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%3.3f    %3.1f", mag.magneto[1], mag.accel[1]);
 80047d8:	4b64      	ldr	r3, [pc, #400]	; (800496c <Main_Task+0xb54>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fe8b 	bl	80004f8 <__aeabi_f2d>
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <Main_Task+0xb54>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb fe84 	bl	80004f8 <__aeabi_f2d>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	e9cd 2300 	strd	r2, r3, [sp]
 80047f8:	4622      	mov	r2, r4
 80047fa:	462b      	mov	r3, r5
 80047fc:	495c      	ldr	r1, [pc, #368]	; (8004970 <Main_Task+0xb58>)
 80047fe:	4850      	ldr	r0, [pc, #320]	; (8004940 <Main_Task+0xb28>)
 8004800:	f00a fe54 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004804:	4a4f      	ldr	r2, [pc, #316]	; (8004944 <Main_Task+0xb2c>)
 8004806:	2301      	movs	r3, #1
 8004808:	ca06      	ldmia	r2, {r1, r2}
 800480a:	484d      	ldr	r0, [pc, #308]	; (8004940 <Main_Task+0xb28>)
 800480c:	f001 f812 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0,39);
 8004810:	2127      	movs	r1, #39	; 0x27
 8004812:	2000      	movs	r0, #0
 8004814:	f001 f834 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "%3.3f    %3.1f", mag.magneto[2], mag.accel[2]);
 8004818:	4b54      	ldr	r3, [pc, #336]	; (800496c <Main_Task+0xb54>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fb fe6b 	bl	80004f8 <__aeabi_f2d>
 8004822:	4604      	mov	r4, r0
 8004824:	460d      	mov	r5, r1
 8004826:	4b51      	ldr	r3, [pc, #324]	; (800496c <Main_Task+0xb54>)
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fe64 	bl	80004f8 <__aeabi_f2d>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	e9cd 2300 	strd	r2, r3, [sp]
 8004838:	4622      	mov	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	494c      	ldr	r1, [pc, #304]	; (8004970 <Main_Task+0xb58>)
 800483e:	4840      	ldr	r0, [pc, #256]	; (8004940 <Main_Task+0xb28>)
 8004840:	f00a fe34 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 8004844:	4a3f      	ldr	r2, [pc, #252]	; (8004944 <Main_Task+0xb2c>)
 8004846:	2301      	movs	r3, #1
 8004848:	ca06      	ldmia	r2, {r1, r2}
 800484a:	483d      	ldr	r0, [pc, #244]	; (8004940 <Main_Task+0xb28>)
 800484c:	f000 fff2 	bl	8005834 <ssd1306_WriteString>
	  	  	  		ssd1306_SetCursor(0,52);
 8004850:	2134      	movs	r1, #52	; 0x34
 8004852:	2000      	movs	r0, #0
 8004854:	f001 f814 	bl	8005880 <ssd1306_SetCursor>
	  	  	  		sprintf(display.buf2, "T chip - %3.1f", mag.lsm303c_chip_tC);
 8004858:	4b44      	ldr	r3, [pc, #272]	; (800496c <Main_Task+0xb54>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fb fe4b 	bl	80004f8 <__aeabi_f2d>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4943      	ldr	r1, [pc, #268]	; (8004974 <Main_Task+0xb5c>)
 8004868:	4835      	ldr	r0, [pc, #212]	; (8004940 <Main_Task+0xb28>)
 800486a:	f00a fe1f 	bl	800f4ac <siprintf>
	  	  	  		ssd1306_WriteString(display.buf2, Font_7x10, White);
 800486e:	4a35      	ldr	r2, [pc, #212]	; (8004944 <Main_Task+0xb2c>)
 8004870:	2301      	movs	r3, #1
 8004872:	ca06      	ldmia	r2, {r1, r2}
 8004874:	4832      	ldr	r0, [pc, #200]	; (8004940 <Main_Task+0xb28>)
 8004876:	f000 ffdd 	bl	8005834 <ssd1306_WriteString>
	  	  	  		display.off_counter++;
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <Main_Task+0xb40>)
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	3301      	adds	r3, #1
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4b35      	ldr	r3, [pc, #212]	; (8004958 <Main_Task+0xb40>)
 8004884:	70da      	strb	r2, [r3, #3]
	  	  	  		break;
 8004886:	e07e      	b.n	8004986 <Main_Task+0xb6e>

	  	  	  case 6:

	  	  		  	  ssd1306_SetCursor(0, 0);
 8004888:	2100      	movs	r1, #0
 800488a:	2000      	movs	r0, #0
 800488c:	f000 fff8 	bl	8005880 <ssd1306_SetCursor>
	  	  		  	  sprintf(display.buf2, "%02d:%02d:%02d", sfTime.Hours, sfTime.Minutes, sfTime.Seconds);
 8004890:	4b29      	ldr	r3, [pc, #164]	; (8004938 <Main_Task+0xb20>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b28      	ldr	r3, [pc, #160]	; (8004938 <Main_Task+0xb20>)
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	4619      	mov	r1, r3
 800489c:	4b26      	ldr	r3, [pc, #152]	; (8004938 <Main_Task+0xb20>)
 800489e:	789b      	ldrb	r3, [r3, #2]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	460b      	mov	r3, r1
 80048a4:	4925      	ldr	r1, [pc, #148]	; (800493c <Main_Task+0xb24>)
 80048a6:	4826      	ldr	r0, [pc, #152]	; (8004940 <Main_Task+0xb28>)
 80048a8:	f00a fe00 	bl	800f4ac <siprintf>
	  	  		  	  ssd1306_WriteString(display.buf2, Font_7x10, White);
 80048ac:	4a25      	ldr	r2, [pc, #148]	; (8004944 <Main_Task+0xb2c>)
 80048ae:	2301      	movs	r3, #1
 80048b0:	ca06      	ldmia	r2, {r1, r2}
 80048b2:	4823      	ldr	r0, [pc, #140]	; (8004940 <Main_Task+0xb28>)
 80048b4:	f000 ffbe 	bl	8005834 <ssd1306_WriteString>
	  	  		  	  ssd1306_SetCursor(0, 52);
 80048b8:	2134      	movs	r1, #52	; 0x34
 80048ba:	2000      	movs	r0, #0
 80048bc:	f000 ffe0 	bl	8005880 <ssd1306_SetCursor>
	  	  			  ssd1306_WriteString("     Compass", Font_7x10, White);
 80048c0:	4a20      	ldr	r2, [pc, #128]	; (8004944 <Main_Task+0xb2c>)
 80048c2:	2301      	movs	r3, #1
 80048c4:	ca06      	ldmia	r2, {r1, r2}
 80048c6:	482c      	ldr	r0, [pc, #176]	; (8004978 <Main_Task+0xb60>)
 80048c8:	f000 ffb4 	bl	8005834 <ssd1306_WriteString>
	  	  			  ssd1306_Line(32,32,42,20, White);
 80048cc:	2301      	movs	r3, #1
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2314      	movs	r3, #20
 80048d2:	222a      	movs	r2, #42	; 0x2a
 80048d4:	2120      	movs	r1, #32
 80048d6:	2020      	movs	r0, #32
 80048d8:	f000 ffea 	bl	80058b0 <ssd1306_Line>
	  	  			  mag.azimuth = LSM303C_getAzimuth();
 80048dc:	f7fe f930 	bl	8002b40 <LSM303C_getAzimuth>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <Main_Task+0xb54>)
 80048e6:	839a      	strh	r2, [r3, #28]
	  	  			  //azimuth = tmp_azimuth + 90;
	  	  			  //if (tmp_azimuth > 270) azimuth = tmp_azimuth - 270;
	  	  			  LSM303C_getDirection(mag.direction, mag.azimuth);
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <Main_Task+0xb54>)
 80048ea:	8b9b      	ldrh	r3, [r3, #28]
 80048ec:	4619      	mov	r1, r3
 80048ee:	4823      	ldr	r0, [pc, #140]	; (800497c <Main_Task+0xb64>)
 80048f0:	f7fe f9aa 	bl	8002c48 <LSM303C_getDirection>
	  	  			  ssd1306_SetCursor(54,15);
 80048f4:	210f      	movs	r1, #15
 80048f6:	2036      	movs	r0, #54	; 0x36
 80048f8:	f000 ffc2 	bl	8005880 <ssd1306_SetCursor>
	  	  			  sprintf(display.buf2, "Az %d", mag.azimuth);
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <Main_Task+0xb54>)
 80048fe:	8b9b      	ldrh	r3, [r3, #28]
 8004900:	461a      	mov	r2, r3
 8004902:	491f      	ldr	r1, [pc, #124]	; (8004980 <Main_Task+0xb68>)
 8004904:	480e      	ldr	r0, [pc, #56]	; (8004940 <Main_Task+0xb28>)
 8004906:	f00a fdd1 	bl	800f4ac <siprintf>
	  	  			  ssd1306_WriteString(display.buf2, Font_7x10, White);
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <Main_Task+0xb2c>)
 800490c:	2301      	movs	r3, #1
 800490e:	ca06      	ldmia	r2, {r1, r2}
 8004910:	480b      	ldr	r0, [pc, #44]	; (8004940 <Main_Task+0xb28>)
 8004912:	f000 ff8f 	bl	8005834 <ssd1306_WriteString>

	  	  			  ssd1306_SetCursor(54,27);
 8004916:	211b      	movs	r1, #27
 8004918:	2036      	movs	r0, #54	; 0x36
 800491a:	f000 ffb1 	bl	8005880 <ssd1306_SetCursor>
	  	  			  //sprintf(buf2, "maxX %3.3f", max_x);
	  	  			  ssd1306_WriteString(mag.direction, Font_7x10, White);
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <Main_Task+0xb2c>)
 8004920:	2301      	movs	r3, #1
 8004922:	ca06      	ldmia	r2, {r1, r2}
 8004924:	4815      	ldr	r0, [pc, #84]	; (800497c <Main_Task+0xb64>)
 8004926:	f000 ff85 	bl	8005834 <ssd1306_WriteString>

	  	  			  display.off_counter++;
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <Main_Task+0xb40>)
 800492c:	78db      	ldrb	r3, [r3, #3]
 800492e:	3301      	adds	r3, #1
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <Main_Task+0xb40>)
 8004934:	70da      	strb	r2, [r3, #3]
	  	  	  	  	break;
 8004936:	e026      	b.n	8004986 <Main_Task+0xb6e>
 8004938:	20000438 	.word	0x20000438
 800493c:	08013270 	.word	0x08013270
 8004940:	20000057 	.word	0x20000057
 8004944:	2000008c 	.word	0x2000008c
 8004948:	080134ec 	.word	0x080134ec
 800494c:	2000000c 	.word	0x2000000c
 8004950:	080134f4 	.word	0x080134f4
 8004954:	2000009c 	.word	0x2000009c
 8004958:	2000003c 	.word	0x2000003c
 800495c:	20000480 	.word	0x20000480
 8004960:	080134fc 	.word	0x080134fc
 8004964:	0801350c 	.word	0x0801350c
 8004968:	08013514 	.word	0x08013514
 800496c:	20000414 	.word	0x20000414
 8004970:	08013524 	.word	0x08013524
 8004974:	08013534 	.word	0x08013534
 8004978:	08013544 	.word	0x08013544
 800497c:	20000432 	.word	0x20000432
 8004980:	08013554 	.word	0x08013554


	  	  	  	default:
	  	  	  			break;
 8004984:	bf00      	nop

	  	  	}

	  	  	  	if (!display.off_flag) ssd1306_UpdateScreen();
 8004986:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <Main_Task+0xb8c>)
 8004988:	789b      	ldrb	r3, [r3, #2]
 800498a:	f083 0301 	eor.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <Main_Task+0xb80>
 8004994:	f000 fe4a 	bl	800562c <ssd1306_UpdateScreen>


	      osDelay(200);
 8004998:	20c8      	movs	r0, #200	; 0xc8
 800499a:	f007 f821 	bl	800b9e0 <osDelay>
	  display.off_counter--;
 800499e:	f7ff ba3f 	b.w	8003e20 <Main_Task+0x8>
 80049a2:	bf00      	nop
 80049a4:	2000003c 	.word	0x2000003c

080049a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80049ba:	f001 fb6b 	bl	8006094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00

080049cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049d0:	b672      	cpsid	i
}
 80049d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <Error_Handler+0x8>
	...

080049d8 <ms5837_Port_Init>:
*
* \return bool : status of MS5837
*       - true : Device is present
*       - false : Device is not acknowledging I2C address
*/
void ms5837_Port_Init(I2C_HandleTypeDef *hi2c) {
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	_MS5837_ui2c = hi2c;
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <ms5837_Port_Init+0x1c>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6013      	str	r3, [r2, #0]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000494 	.word	0x20000494

080049f8 <ms5837_is_connected>:


HAL_StatusTypeDef ms5837_is_connected(void) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af02      	add	r7, sp, #8
	return HAL_I2C_Master_Transmit(_MS5837_ui2c, MS5837_ADDR, 0x00, 1, I2C_TIMEOUT);
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <ms5837_is_connected+0x20>)
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	230a      	movs	r3, #10
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2301      	movs	r3, #1
 8004a08:	2200      	movs	r2, #0
 8004a0a:	21ec      	movs	r1, #236	; 0xec
 8004a0c:	f003 f910 	bl	8007c30 <HAL_I2C_Master_Transmit>
 8004a10:	4603      	mov	r3, r0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000494 	.word	0x20000494

08004a1c <ms5837_write_command>:
* \return ms5837_status : status of MS5837
*       - ms5837_status_ok : I2C transfer completed successfully
*       - ms5837_status_i2c_transfer_error : Problem with i2c transfer
*       - ms5837_status_no_i2c_acknowledge : I2C did not acknowledge
*/
enum ms5837_status ms5837_write_command(uint8_t cmd) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_status;
	taskENTER_CRITICAL();
 8004a26:	f009 f96d 	bl	800dd04 <vPortEnterCritical>
	i2c_status = HAL_I2C_Master_Transmit(_MS5837_ui2c, MS5837_ADDR, &cmd, 1, I2C_TIMEOUT);
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <ms5837_write_command+0x48>)
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	1dfa      	adds	r2, r7, #7
 8004a30:	230a      	movs	r3, #10
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2301      	movs	r3, #1
 8004a36:	21ec      	movs	r1, #236	; 0xec
 8004a38:	f003 f8fa 	bl	8007c30 <HAL_I2C_Master_Transmit>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	73fb      	strb	r3, [r7, #15]
	taskEXIT_CRITICAL();
 8004a40:	f009 f990 	bl	800dd64 <vPortExitCritical>

  /* Do the transfer */
  if (i2c_status == HAL_ERROR)
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <ms5837_write_command+0x32>
    return ms5837_status_no_i2c_acknowledge;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e005      	b.n	8004a5a <ms5837_write_command+0x3e>
  if (i2c_status != HAL_OK)
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <ms5837_write_command+0x3c>
    return ms5837_status_i2c_transfer_error;
 8004a54:	2302      	movs	r3, #2
 8004a56:	e000      	b.n	8004a5a <ms5837_write_command+0x3e>

  return ms5837_status_ok;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000494 	.word	0x20000494

08004a68 <ms5837_reset>:
* \return ms5837_status : status of MS5837
*       - ms5837_status_ok : I2C transfer completed successfully
*       - ms5837_status_i2c_transfer_error : Problem with i2c transfer
*       - ms5837_status_no_i2c_acknowledge : I2C did not acknowledge
*/
enum ms5837_status ms5837_reset(void) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  return ms5837_write_command(MS5837_RESET_COMMAND);
 8004a6c:	201e      	movs	r0, #30
 8004a6e:	f7ff ffd5 	bl	8004a1c <ms5837_write_command>
 8004a72:	4603      	mov	r3, r0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <ms5837_read_eeprom_coeff>:
*       - ms5837_status_ok : I2C transfer completed successfully
*       - ms5837_status_i2c_transfer_error : Problem with i2c transfer
*       - ms5837_status_no_i2c_acknowledge : I2C did not acknowledge
*       - ms5837_status_crc_error : CRC check error on the coefficients
*/
enum ms5837_status ms5837_read_eeprom_coeff(uint8_t command, uint16_t *coeff) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	71fb      	strb	r3, [r7, #7]
  uint8_t buffer[2] = {0,0};
 8004a84:	2300      	movs	r3, #0
 8004a86:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef i2c_status;

  /* Read data */
  taskENTER_CRITICAL();
 8004a88:	f009 f93c 	bl	800dd04 <vPortEnterCritical>
  i2c_status = HAL_I2C_Master_Transmit(_MS5837_ui2c, MS5837_ADDR, &command, 1, I2C_TIMEOUT);
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <ms5837_read_eeprom_coeff+0x6c>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	1dfa      	adds	r2, r7, #7
 8004a92:	230a      	movs	r3, #10
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	2301      	movs	r3, #1
 8004a98:	21ec      	movs	r1, #236	; 0xec
 8004a9a:	f003 f8c9 	bl	8007c30 <HAL_I2C_Master_Transmit>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Receive(_MS5837_ui2c, MS5837_ADDR, &buffer[0], 2,  I2C_TIMEOUT);
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <ms5837_read_eeprom_coeff+0x6c>)
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	f107 020c 	add.w	r2, r7, #12
 8004aaa:	230a      	movs	r3, #10
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2302      	movs	r3, #2
 8004ab0:	21ec      	movs	r1, #236	; 0xec
 8004ab2:	f003 f9b1 	bl	8007e18 <HAL_I2C_Master_Receive>
  taskEXIT_CRITICAL();
 8004ab6:	f009 f955 	bl	800dd64 <vPortExitCritical>
  // Send the conversion command
  if (i2c_status == HAL_ERROR)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <ms5837_read_eeprom_coeff+0x4c>
    return ms5837_status_no_i2c_acknowledge;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e00a      	b.n	8004ada <ms5837_read_eeprom_coeff+0x62>

  *coeff = buffer[0] << 8 | buffer[1];
 8004ac4:	7b3b      	ldrb	r3, [r7, #12]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	b21a      	sxth	r2, r3
 8004aca:	7b7b      	ldrb	r3, [r7, #13]
 8004acc:	b21b      	sxth	r3, r3
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	801a      	strh	r2, [r3, #0]

  return ms5837_status_ok;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000494 	.word	0x20000494

08004ae8 <ms5837_read_eeprom>:
*       - ms5837_status_ok : I2C transfer completed successfully
*       - ms5837_status_i2c_transfer_error : Problem with i2c transfer
*       - ms5837_status_no_i2c_acknowledge : I2C did not acknowledge
*       - ms5837_status_crc_error : CRC check error on the coefficients
*/
enum ms5837_status ms5837_read_eeprom(void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  enum ms5837_status status;
  uint8_t i;

  for (i = 0; i < MS5837_COEFFICIENT_COUNT; i++) {
 8004aee:	2300      	movs	r3, #0
 8004af0:	71fb      	strb	r3, [r7, #7]
 8004af2:	e016      	b.n	8004b22 <ms5837_read_eeprom+0x3a>
    status = ms5837_read_eeprom_coeff(MS5837_PROM_ADDRESS_READ_ADDRESS_0 + i * 2,
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	3350      	adds	r3, #80	; 0x50
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	b2da      	uxtb	r2, r3
                               eeprom_coeff + i);
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	005b      	lsls	r3, r3, #1
    status = ms5837_read_eeprom_coeff(MS5837_PROM_ADDRESS_READ_ADDRESS_0 + i * 2,
 8004b02:	4916      	ldr	r1, [pc, #88]	; (8004b5c <ms5837_read_eeprom+0x74>)
 8004b04:	440b      	add	r3, r1
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7ff ffb5 	bl	8004a78 <ms5837_read_eeprom_coeff>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71bb      	strb	r3, [r7, #6]
    if (status != ms5837_status_ok)
 8004b12:	79bb      	ldrb	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <ms5837_read_eeprom+0x34>
      return status;
 8004b18:	79bb      	ldrb	r3, [r7, #6]
 8004b1a:	e01a      	b.n	8004b52 <ms5837_read_eeprom+0x6a>
  for (i = 0; i < MS5837_COEFFICIENT_COUNT; i++) {
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	71fb      	strb	r3, [r7, #7]
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d9e5      	bls.n	8004af4 <ms5837_read_eeprom+0xc>
  }
  if (!ms5837_crc_check(eeprom_coeff, (eeprom_coeff[MS5837_CRC_INDEX] & 0xF000) >> 12))
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <ms5837_read_eeprom+0x74>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	0b1b      	lsrs	r3, r3, #12
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	4809      	ldr	r0, [pc, #36]	; (8004b5c <ms5837_read_eeprom+0x74>)
 8004b36:	f000 f815 	bl	8004b64 <ms5837_crc_check>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f083 0301 	eor.w	r3, r3, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <ms5837_read_eeprom+0x62>
    return ms5837_status_crc_error;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e003      	b.n	8004b52 <ms5837_read_eeprom+0x6a>

  coeff_read = true;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <ms5837_read_eeprom+0x78>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]

  return ms5837_status_ok;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000498 	.word	0x20000498
 8004b60:	200004a8 	.word	0x200004a8

08004b64 <ms5837_crc_check>:
* \param[in] uint16_t *: List of EEPROM coefficients
* \param[in] uint8_t : crc to compare with
*
* \return bool : TRUE if CRC is OK, FALSE if KO
*/
bool ms5837_crc_check(uint16_t *n_prom, uint8_t crc) {
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  uint8_t cnt, n_bit;
  uint16_t n_rem, crc_read;

  n_rem = 0x00;
 8004b70:	2300      	movs	r3, #0
 8004b72:	81bb      	strh	r3, [r7, #12]
  crc_read = n_prom[0];
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	817b      	strh	r3, [r7, #10]
  n_prom[MS5837_COEFFICIENT_COUNT] = 0;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	330e      	adds	r3, #14
 8004b7e:	2200      	movs	r2, #0
 8004b80:	801a      	strh	r2, [r3, #0]
  n_prom[0] = (0x0FFF & (n_prom[0])); // Clear the CRC byte
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	801a      	strh	r2, [r3, #0]

  for (cnt = 0; cnt < (MS5837_COEFFICIENT_COUNT + 1) * 2; cnt++) {
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e03c      	b.n	8004c10 <ms5837_crc_check+0xac>

    // Get next byte
    if (cnt % 2 == 1)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00f      	beq.n	8004bc2 <ms5837_crc_check+0x5e>
      n_rem ^= n_prom[cnt >> 1] & 0x00FF;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004bba:	4053      	eors	r3, r2
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	81bb      	strh	r3, [r7, #12]
 8004bc0:	e00b      	b.n	8004bda <ms5837_crc_check+0x76>
    else
      n_rem ^= n_prom[cnt >> 1] >> 8;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	89bb      	ldrh	r3, [r7, #12]
 8004bd6:	4053      	eors	r3, r2
 8004bd8:	81bb      	strh	r3, [r7, #12]

    for (n_bit = 8; n_bit > 0; n_bit--) {
 8004bda:	2308      	movs	r3, #8
 8004bdc:	73bb      	strb	r3, [r7, #14]
 8004bde:	e011      	b.n	8004c04 <ms5837_crc_check+0xa0>

      if (n_rem & 0x8000)
 8004be0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da07      	bge.n	8004bf8 <ms5837_crc_check+0x94>
        n_rem = (n_rem << 1) ^ 0x3000;
 8004be8:	89bb      	ldrh	r3, [r7, #12]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004bf2:	b21b      	sxth	r3, r3
 8004bf4:	81bb      	strh	r3, [r7, #12]
 8004bf6:	e002      	b.n	8004bfe <ms5837_crc_check+0x9a>
      else
        n_rem <<= 1;
 8004bf8:	89bb      	ldrh	r3, [r7, #12]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	81bb      	strh	r3, [r7, #12]
    for (n_bit = 8; n_bit > 0; n_bit--) {
 8004bfe:	7bbb      	ldrb	r3, [r7, #14]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	73bb      	strb	r3, [r7, #14]
 8004c04:	7bbb      	ldrb	r3, [r7, #14]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1ea      	bne.n	8004be0 <ms5837_crc_check+0x7c>
  for (cnt = 0; cnt < (MS5837_COEFFICIENT_COUNT + 1) * 2; cnt++) {
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	d9bf      	bls.n	8004b96 <ms5837_crc_check+0x32>
    }
  }
  n_rem >>= 12;
 8004c16:	89bb      	ldrh	r3, [r7, #12]
 8004c18:	0b1b      	lsrs	r3, r3, #12
 8004c1a:	81bb      	strh	r3, [r7, #12]
  n_prom[0] = crc_read;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	897a      	ldrh	r2, [r7, #10]
 8004c20:	801a      	strh	r2, [r3, #0]

  return (n_rem == crc);
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	89ba      	ldrh	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <ms5837_conversion_and_read_adc>:
* \return ms5837_status : status of MS5837
*       - ms5837_status_ok : I2C transfer completed successfully
*       - ms5837_status_i2c_transfer_error : Problem with i2c transfer
*       - ms5837_status_no_i2c_acknowledge : I2C did not acknowledge
*/
enum ms5837_status ms5837_conversion_and_read_adc(uint8_t cmd, uint32_t *adc) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
  enum ms5837_status status = ms5837_status_ok;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef i2c_status;
  uint8_t buffer[3] = {0, 0, 0};
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <ms5837_conversion_and_read_adc+0xc4>)
 8004c52:	f107 0308 	add.w	r3, r7, #8
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	8019      	strh	r1, [r3, #0]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	0c12      	lsrs	r2, r2, #16
 8004c60:	701a      	strb	r2, [r3, #0]

  /* Read data */
  taskENTER_CRITICAL();
 8004c62:	f009 f84f 	bl	800dd04 <vPortEnterCritical>
  HAL_I2C_Master_Transmit(_MS5837_ui2c, MS5837_ADDR, &cmd, 1, I2C_TIMEOUT);
 8004c66:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <ms5837_conversion_and_read_adc+0xc8>)
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	1dfa      	adds	r2, r7, #7
 8004c6c:	230a      	movs	r3, #10
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2301      	movs	r3, #1
 8004c72:	21ec      	movs	r1, #236	; 0xec
 8004c74:	f002 ffdc 	bl	8007c30 <HAL_I2C_Master_Transmit>

  HAL_Delay(conversion_time[(cmd & MS5837_CONVERSION_OSR_MASK) / 2]);
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	0fda      	lsrs	r2, r3, #31
 8004c80:	4413      	add	r3, r2
 8004c82:	105b      	asrs	r3, r3, #1
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <ms5837_conversion_and_read_adc+0xcc>)
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fa2d 	bl	80060ec <HAL_Delay>
  //HAL_Delay(20);
  //osDelay(conversion_time[(cmd & MS5837_CONVERSION_OSR_MASK) / 2]);

  i2c_status = (HAL_I2C_Master_Transmit(_MS5837_ui2c, MS5837_ADDR, 0x00, 1, I2C_TIMEOUT) != HAL_OK) ;
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <ms5837_conversion_and_read_adc+0xc8>)
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	230a      	movs	r3, #10
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	21ec      	movs	r1, #236	; 0xec
 8004ca0:	f002 ffc6 	bl	8007c30 <HAL_I2C_Master_Transmit>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	73bb      	strb	r3, [r7, #14]


  HAL_I2C_Master_Receive(_MS5837_ui2c, MS5837_ADDR, &buffer[0], 3,  I2C_TIMEOUT);
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <ms5837_conversion_and_read_adc+0xc8>)
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	f107 0208 	add.w	r2, r7, #8
 8004cba:	230a      	movs	r3, #10
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	21ec      	movs	r1, #236	; 0xec
 8004cc2:	f003 f8a9 	bl	8007e18 <HAL_I2C_Master_Receive>
  taskEXIT_CRITICAL();
 8004cc6:	f009 f84d 	bl	800dd64 <vPortExitCritical>

  // delay conversion depending on resolution
  if (status != ms5837_status_ok)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <ms5837_conversion_and_read_adc+0x94>
    return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	e013      	b.n	8004cfc <ms5837_conversion_and_read_adc+0xbc>

  // Send the read command
  // status = ms5837_write_command(MS5837_READ_ADC);
  if (status != ms5837_status_ok)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <ms5837_conversion_and_read_adc+0x9e>
    return status;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	e00e      	b.n	8004cfc <ms5837_conversion_and_read_adc+0xbc>

  if (i2c_status == HAL_ERROR)
 8004cde:	7bbb      	ldrb	r3, [r7, #14]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <ms5837_conversion_and_read_adc+0xa8>
    return ms5837_status_no_i2c_acknowledge;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e009      	b.n	8004cfc <ms5837_conversion_and_read_adc+0xbc>


  *adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8004ce8:	7a3b      	ldrb	r3, [r7, #8]
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	7a7b      	ldrb	r3, [r7, #9]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	7aba      	ldrb	r2, [r7, #10]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	601a      	str	r2, [r3, #0]

  return status;
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	0801355c 	.word	0x0801355c
 8004d08:	20000494 	.word	0x20000494
 8004d0c:	2000006c 	.word	0x2000006c

08004d10 <ms5837_read_temperature_and_pressure>:
*       - ms5837_status_i2c_transfer_error : Problem with i2c transfer
*       - ms5837_status_no_i2c_acknowledge : I2C did not acknowledge
*       - ms5837_status_crc_error : CRC check error on the coefficients
*/
enum ms5837_status ms5837_read_temperature_and_pressure(float *temperature,
                                                         float *pressure) {
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	ed2d 8b02 	vpush	{d8}
 8004d18:	b0ec      	sub	sp, #432	; 0x1b0
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 8004d20:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
  enum ms5837_status status = ms5837_status_ok;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
  int32_t dT, TEMP;
  int64_t OFF, SENS, P, T2, OFF2, SENS2;
  uint8_t cmd;

  // If first time adc is requested, get EEPROM coefficients
  if (coeff_read == false)
 8004d2a:	4bd1      	ldr	r3, [pc, #836]	; (8005070 <ms5837_read_temperature_and_pressure+0x360>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f083 0301 	eor.w	r3, r3, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <ms5837_read_temperature_and_pressure+0x32>
    status = ms5837_read_eeprom();
 8004d38:	f7ff fed6 	bl	8004ae8 <ms5837_read_eeprom>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

  if (status != ms5837_status_ok)
 8004d42:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <ms5837_read_temperature_and_pressure+0x40>
    return status;
 8004d4a:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004d4e:	e33c      	b.n	80053ca <ms5837_read_temperature_and_pressure+0x6ba>

  // First read temperature
  cmd = ms5837_resolution_osr * 2;
 8004d50:	4bc8      	ldr	r3, [pc, #800]	; (8005074 <ms5837_read_temperature_and_pressure+0x364>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
  cmd |= MS5837_START_TEMPERATURE_ADC_CONVERSION;
 8004d5a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8004d5e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004d62:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
  status = ms5837_conversion_and_read_adc(cmd, &adc_temperature);
 8004d66:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004d6a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff65 	bl	8004c40 <ms5837_conversion_and_read_adc>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
  if (status != ms5837_status_ok)
 8004d7c:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <ms5837_read_temperature_and_pressure+0x7a>
    return status;
 8004d84:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004d88:	e31f      	b.n	80053ca <ms5837_read_temperature_and_pressure+0x6ba>

  // Now read pressure
  cmd = ms5837_resolution_osr * 2;
 8004d8a:	4bba      	ldr	r3, [pc, #744]	; (8005074 <ms5837_read_temperature_and_pressure+0x364>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
  cmd |= MS5837_START_PRESSURE_ADC_CONVERSION;
 8004d94:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8004d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
  status = ms5837_conversion_and_read_adc(cmd, &adc_pressure);
 8004da0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004da4:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff48 	bl	8004c40 <ms5837_conversion_and_read_adc>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
  if (status != ms5837_status_ok)
 8004db6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <ms5837_read_temperature_and_pressure+0xb4>
    return status;
 8004dbe:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004dc2:	e302      	b.n	80053ca <ms5837_read_temperature_and_pressure+0x6ba>

  if (adc_temperature == 0 || adc_pressure == 0)
 8004dc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <ms5837_read_temperature_and_pressure+0xc4>
 8004dcc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <ms5837_read_temperature_and_pressure+0xc8>
    return ms5837_status_i2c_transfer_error;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e2f8      	b.n	80053ca <ms5837_read_temperature_and_pressure+0x6ba>

  // Difference between actual and reference temperature = D2 - Tref
  dT = (int32_t)adc_temperature -
 8004dd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004ddc:	461a      	mov	r2, r3
       ((int32_t)eeprom_coeff[MS5837_REFERENCE_TEMPERATURE_INDEX] << 8);
 8004dde:	4ba6      	ldr	r3, [pc, #664]	; (8005078 <ms5837_read_temperature_and_pressure+0x368>)
 8004de0:	895b      	ldrh	r3, [r3, #10]
 8004de2:	021b      	lsls	r3, r3, #8
  dT = (int32_t)adc_temperature -
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

  // Actual temperature = 2000 + dT * TEMPSENS
  TEMP = 2000 +
         ((int64_t)dT *
 8004dea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004dee:	17da      	asrs	r2, r3, #31
 8004df0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004df4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
              (int64_t)eeprom_coeff[MS5837_TEMP_COEFF_OF_TEMPERATURE_INDEX] >>
 8004df8:	4b9f      	ldr	r3, [pc, #636]	; (8005078 <ms5837_read_temperature_and_pressure+0x368>)
 8004dfa:	899b      	ldrh	r3, [r3, #12]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004e04:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
         ((int64_t)dT *
 8004e08:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e12:	fb02 f203 	mul.w	r2, r2, r3
 8004e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e1a:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
 8004e1e:	4601      	mov	r1, r0
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004e2a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004e2e:	fba2 8901 	umull	r8, r9, r2, r1
 8004e32:	444b      	add	r3, r9
 8004e34:	4699      	mov	r9, r3
              (int64_t)eeprom_coeff[MS5837_TEMP_COEFF_OF_TEMPERATURE_INDEX] >>
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 8004e42:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 8004e46:	ea4f 53e9 	mov.w	r3, r9, asr #23
  TEMP = 2000 +
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004e50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
          23);

  // Second order temperature compensation
  if (TEMP < 2000) {
 8004e54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004e58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e5c:	f280 810e 	bge.w	800507c <ms5837_read_temperature_and_pressure+0x36c>
    T2 = (3 * ((int64_t)dT * (int64_t)dT)) >> 33;
 8004e60:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e64:	17da      	asrs	r2, r3, #31
 8004e66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004e6a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004e6e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e72:	17da      	asrs	r2, r3, #31
 8004e74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e78:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004e7c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8004e80:	462b      	mov	r3, r5
 8004e82:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8004e86:	4642      	mov	r2, r8
 8004e88:	fb02 f203 	mul.w	r2, r2, r3
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	4621      	mov	r1, r4
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	4622      	mov	r2, r4
 8004e98:	4641      	mov	r1, r8
 8004e9a:	fba2 ab01 	umull	sl, fp, r2, r1
 8004e9e:	445b      	add	r3, fp
 8004ea0:	469b      	mov	fp, r3
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004eb2:	eb12 010a 	adds.w	r1, r2, sl
 8004eb6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8004eba:	eb43 030b 	adc.w	r3, r3, fp
 8004ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004ece:	4629      	mov	r1, r5
 8004ed0:	104a      	asrs	r2, r1, #1
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	17cb      	asrs	r3, r1, #31
 8004ed6:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    OFF2 = 3 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) >> 1;
 8004eda:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004ede:	17da      	asrs	r2, r3, #31
 8004ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ee4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004ee8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004eec:	460b      	mov	r3, r1
 8004eee:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004efc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004f04:	17da      	asrs	r2, r3, #31
 8004f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f0e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f12:	460b      	mov	r3, r1
 8004f14:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f26:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 8004f30:	4642      	mov	r2, r8
 8004f32:	fb02 f203 	mul.w	r2, r2, r3
 8004f36:	464b      	mov	r3, r9
 8004f38:	4621      	mov	r1, r4
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	4622      	mov	r2, r4
 8004f42:	4641      	mov	r1, r8
 8004f44:	fba2 1201 	umull	r1, r2, r2, r1
 8004f48:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004f52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f56:	4413      	add	r3, r2
 8004f58:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004f5c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8004f60:	4622      	mov	r2, r4
 8004f62:	462b      	mov	r3, r5
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f70:	4621      	mov	r1, r4
 8004f72:	1851      	adds	r1, r2, r1
 8004f74:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004f78:	4629      	mov	r1, r5
 8004f7a:	eb43 0101 	adc.w	r1, r3, r1
 8004f7e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004f8e:	4621      	mov	r1, r4
 8004f90:	084a      	lsrs	r2, r1, #1
 8004f92:	4629      	mov	r1, r5
 8004f94:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004f98:	4629      	mov	r1, r5
 8004f9a:	104b      	asrs	r3, r1, #1
 8004f9c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    SENS2 = 5 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) >> 3;
 8004fa0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004fa4:	17da      	asrs	r2, r3, #31
 8004fa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004faa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004fc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fc6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004fca:	17da      	asrs	r2, r3, #31
 8004fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004fec:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	fb02 f203 	mul.w	r2, r2, r3
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4621      	mov	r1, r4
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	4622      	mov	r2, r4
 8005008:	4641      	mov	r1, r8
 800500a:	fba2 1201 	umull	r1, r2, r2, r1
 800500e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005012:	460a      	mov	r2, r1
 8005014:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8005018:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800501c:	4413      	add	r3, r2
 800501e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005022:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f04f 0000 	mov.w	r0, #0
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	0099      	lsls	r1, r3, #2
 8005034:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005038:	0090      	lsls	r0, r2, #2
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4621      	mov	r1, r4
 8005040:	1851      	adds	r1, r2, r1
 8005042:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005046:	4629      	mov	r1, r5
 8005048:	eb43 0101 	adc.w	r1, r3, r1
 800504c:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800505c:	4621      	mov	r1, r4
 800505e:	08ca      	lsrs	r2, r1, #3
 8005060:	4629      	mov	r1, r5
 8005062:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8005066:	4629      	mov	r1, r5
 8005068:	10cb      	asrs	r3, r1, #3
 800506a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
 800506e:	e08b      	b.n	8005188 <ms5837_read_temperature_and_pressure+0x478>
 8005070:	200004a8 	.word	0x200004a8
 8005074:	20000084 	.word	0x20000084
 8005078:	20000498 	.word	0x20000498
  } else {
    T2 = (2 * ((int64_t)dT * (int64_t)dT)) >> 37;
 800507c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005080:	17da      	asrs	r2, r3, #31
 8005082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005086:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800508a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800508e:	17da      	asrs	r2, r3, #31
 8005090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005094:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005098:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800509c:	464b      	mov	r3, r9
 800509e:	e9d7 ab28 	ldrd	sl, fp, [r7, #160]	; 0xa0
 80050a2:	4652      	mov	r2, sl
 80050a4:	fb02 f203 	mul.w	r2, r2, r3
 80050a8:	465b      	mov	r3, fp
 80050aa:	4641      	mov	r1, r8
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	4642      	mov	r2, r8
 80050b4:	4651      	mov	r1, sl
 80050b6:	fba2 4501 	umull	r4, r5, r2, r1
 80050ba:	442b      	add	r3, r5
 80050bc:	461d      	mov	r5, r3
 80050be:	1923      	adds	r3, r4, r4
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	eb45 0305 	adc.w	r3, r5, r5
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
 80050c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050cc:	f04f 0000 	mov.w	r0, #0
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	1158      	asrs	r0, r3, #5
 80050d6:	17d9      	asrs	r1, r3, #31
 80050d8:	e9c7 0168 	strd	r0, r1, [r7, #416]	; 0x1a0
    OFF2 = 1 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) >> 4;
 80050dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80050e0:	17da      	asrs	r2, r3, #31
 80050e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050e6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80050ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80050ee:	460b      	mov	r3, r1
 80050f0:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 80050f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f8:	4613      	mov	r3, r2
 80050fa:	f143 33ff 	adc.w	r3, r3, #4294967295
 80050fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005102:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005106:	17da      	asrs	r2, r3, #31
 8005108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800510c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005110:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005114:	460b      	mov	r3, r1
 8005116:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 800511a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800511e:	4613      	mov	r3, r2
 8005120:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005128:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800512c:	462b      	mov	r3, r5
 800512e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005132:	4642      	mov	r2, r8
 8005134:	fb02 f203 	mul.w	r2, r2, r3
 8005138:	464b      	mov	r3, r9
 800513a:	4621      	mov	r1, r4
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	4622      	mov	r2, r4
 8005144:	4641      	mov	r1, r8
 8005146:	fba2 1201 	umull	r1, r2, r2, r1
 800514a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800514e:	460a      	mov	r2, r1
 8005150:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8005154:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005158:	4413      	add	r3, r2
 800515a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800516a:	4621      	mov	r1, r4
 800516c:	090a      	lsrs	r2, r1, #4
 800516e:	4629      	mov	r1, r5
 8005170:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8005174:	4629      	mov	r1, r5
 8005176:	110b      	asrs	r3, r1, #4
 8005178:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    SENS2 = 0;
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
  }

  // OFF = OFF_T1 + TCO * dT
  OFF = ((int64_t)(eeprom_coeff[MS5837_PRESSURE_OFFSET_INDEX]) << 16) +
 8005188:	4b94      	ldr	r3, [pc, #592]	; (80053dc <ms5837_read_temperature_and_pressure+0x6cc>)
 800518a:	889b      	ldrh	r3, [r3, #4]
 800518c:	b29b      	uxth	r3, r3
 800518e:	2200      	movs	r2, #0
 8005190:	67bb      	str	r3, [r7, #120]	; 0x78
 8005192:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005194:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005198:	460b      	mov	r3, r1
 800519a:	0c1b      	lsrs	r3, r3, #16
 800519c:	677b      	str	r3, [r7, #116]	; 0x74
 800519e:	460b      	mov	r3, r1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	673b      	str	r3, [r7, #112]	; 0x70
        (((int64_t)(eeprom_coeff[MS5837_TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) *
 80051a4:	4b8d      	ldr	r3, [pc, #564]	; (80053dc <ms5837_read_temperature_and_pressure+0x6cc>)
 80051a6:	891b      	ldrh	r3, [r3, #8]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2200      	movs	r2, #0
 80051ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80051b4:	17da      	asrs	r2, r3, #31
 80051b6:	663b      	str	r3, [r7, #96]	; 0x60
 80051b8:	667a      	str	r2, [r7, #100]	; 0x64
 80051ba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80051be:	462b      	mov	r3, r5
 80051c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051c4:	4642      	mov	r2, r8
 80051c6:	fb02 f203 	mul.w	r2, r2, r3
 80051ca:	464b      	mov	r3, r9
 80051cc:	4621      	mov	r1, r4
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	4622      	mov	r2, r4
 80051d6:	4641      	mov	r1, r8
 80051d8:	fba2 1201 	umull	r1, r2, r2, r1
 80051dc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80051e0:	460a      	mov	r2, r1
 80051e2:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80051e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80051ea:	4413      	add	r3, r2
 80051ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          dT) >>
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80051fc:	4621      	mov	r1, r4
 80051fe:	09ca      	lsrs	r2, r1, #7
 8005200:	4629      	mov	r1, r5
 8005202:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8005206:	4629      	mov	r1, r5
 8005208:	11cb      	asrs	r3, r1, #7
  OFF = ((int64_t)(eeprom_coeff[MS5837_PRESSURE_OFFSET_INDEX]) << 16) +
 800520a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800520e:	4621      	mov	r1, r4
 8005210:	1889      	adds	r1, r1, r2
 8005212:	61b9      	str	r1, [r7, #24]
 8005214:	4629      	mov	r1, r5
 8005216:	eb43 0101 	adc.w	r1, r3, r1
 800521a:	61f9      	str	r1, [r7, #28]
 800521c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005220:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
         7);
  OFF -= OFF2;
 8005224:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005228:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800522c:	1a84      	subs	r4, r0, r2
 800522e:	613c      	str	r4, [r7, #16]
 8005230:	eb61 0303 	sbc.w	r3, r1, r3
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800523a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

  // Sensitivity at actual temperature = SENS_T1 + TCS * dT
  SENS =
      ((int64_t)eeprom_coeff[MS5837_PRESSURE_SENSITIVITY_INDEX] << 15) +
 800523e:	4b67      	ldr	r3, [pc, #412]	; (80053dc <ms5837_read_temperature_and_pressure+0x6cc>)
 8005240:	885b      	ldrh	r3, [r3, #2]
 8005242:	b29b      	uxth	r3, r3
 8005244:	2200      	movs	r2, #0
 8005246:	65bb      	str	r3, [r7, #88]	; 0x58
 8005248:	65fa      	str	r2, [r7, #92]	; 0x5c
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8005256:	462b      	mov	r3, r5
 8005258:	03d9      	lsls	r1, r3, #15
 800525a:	4623      	mov	r3, r4
 800525c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8005260:	4623      	mov	r3, r4
 8005262:	03d8      	lsls	r0, r3, #15
      (((int64_t)eeprom_coeff[MS5837_TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] *
 8005264:	4b5d      	ldr	r3, [pc, #372]	; (80053dc <ms5837_read_temperature_and_pressure+0x6cc>)
 8005266:	88db      	ldrh	r3, [r3, #6]
 8005268:	b29b      	uxth	r3, r3
 800526a:	2200      	movs	r2, #0
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
 800526e:	657a      	str	r2, [r7, #84]	; 0x54
 8005270:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005274:	17da      	asrs	r2, r3, #31
 8005276:	64bb      	str	r3, [r7, #72]	; 0x48
 8005278:	64fa      	str	r2, [r7, #76]	; 0x4c
 800527a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800527e:	464b      	mov	r3, r9
 8005280:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005284:	4652      	mov	r2, sl
 8005286:	fb02 f203 	mul.w	r2, r2, r3
 800528a:	465b      	mov	r3, fp
 800528c:	4644      	mov	r4, r8
 800528e:	fb04 f303 	mul.w	r3, r4, r3
 8005292:	4413      	add	r3, r2
 8005294:	4642      	mov	r2, r8
 8005296:	4654      	mov	r4, sl
 8005298:	fba2 4204 	umull	r4, r2, r2, r4
 800529c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80052a0:	4622      	mov	r2, r4
 80052a2:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80052a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80052aa:	4413      	add	r3, r2
 80052ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        dT) >>
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80052bc:	4644      	mov	r4, r8
 80052be:	0a22      	lsrs	r2, r4, #8
 80052c0:	464c      	mov	r4, r9
 80052c2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80052c6:	464c      	mov	r4, r9
 80052c8:	1223      	asrs	r3, r4, #8
  SENS =
 80052ca:	1884      	adds	r4, r0, r2
 80052cc:	60bc      	str	r4, [r7, #8]
 80052ce:	eb41 0303 	adc.w	r3, r1, r3
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052d8:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
       8);
  SENS -= SENS2;
 80052dc:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80052e0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80052e4:	1a84      	subs	r4, r0, r2
 80052e6:	603c      	str	r4, [r7, #0]
 80052e8:	eb61 0303 	sbc.w	r3, r1, r3
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052f2:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170

  // Temperature compensated pressure = D1 * SENS - OFF
  P = (((adc_pressure * SENS) >> 21) - OFF) >> 13;
 80052f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80052fa:	2200      	movs	r2, #0
 80052fc:	643b      	str	r3, [r7, #64]	; 0x40
 80052fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005300:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005304:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8005308:	462a      	mov	r2, r5
 800530a:	fb02 f203 	mul.w	r2, r2, r3
 800530e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005312:	4621      	mov	r1, r4
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	4413      	add	r3, r2
 800531a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800531e:	4621      	mov	r1, r4
 8005320:	fba2 1201 	umull	r1, r2, r2, r1
 8005324:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005328:	460a      	mov	r2, r1
 800532a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800532e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005332:	4413      	add	r3, r2
 8005334:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8005344:	4621      	mov	r1, r4
 8005346:	0d4a      	lsrs	r2, r1, #21
 8005348:	4629      	mov	r1, r5
 800534a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800534e:	4629      	mov	r1, r5
 8005350:	154b      	asrs	r3, r1, #21
 8005352:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005356:	1a14      	subs	r4, r2, r0
 8005358:	63bc      	str	r4, [r7, #56]	; 0x38
 800535a:	eb63 0301 	sbc.w	r3, r3, r1
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800536c:	4621      	mov	r1, r4
 800536e:	0b4a      	lsrs	r2, r1, #13
 8005370:	4629      	mov	r1, r5
 8005372:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8005376:	4629      	mov	r1, r5
 8005378:	134b      	asrs	r3, r1, #13
 800537a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168

  *temperature = ((float)TEMP - T2) / 100;
 800537e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800538a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800538e:	f7fb fd23 	bl	8000dd8 <__aeabi_l2f>
 8005392:	ee07 0a90 	vmov	s15, r0
 8005396:	ee38 7a67 	vsub.f32	s14, s16, s15
 800539a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80053e0 <ms5837_read_temperature_and_pressure+0x6d0>
 800539e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80053a6:	edc3 7a00 	vstr	s15, [r3]
  *pressure = (float)P / 10;
 80053aa:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80053ae:	f7fb fd13 	bl	8000dd8 <__aeabi_l2f>
 80053b2:	ee06 0a90 	vmov	s13, r0
 80053b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80053c2:	edc3 7a00 	vstr	s15, [r3]

  return status;
 80053c6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80053d0:	46bd      	mov	sp, r7
 80053d2:	ecbd 8b02 	vpop	{d8}
 80053d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	20000498 	.word	0x20000498
 80053e0:	42c80000 	.word	0x42c80000
 80053e4:	00000000 	.word	0x00000000

080053e8 <MS5837_depth>:
// We subtract the atmospheric pressure to calculate the depth with only the water pressure
// The average atmospheric pressure of 101300 pascal is used for the calcuation, but atmospheric pressure varies
// If the atmospheric pressure is not 101300 at the time of reading, the depth reported will be offset
// In order to calculate the correct depth, the actual atmospheric pressure should be measured once in air, and
// that value should subtracted for subsequent depth calculations.
float MS5837_depth(float pressure) {
 80053e8:	b5b0      	push	{r4, r5, r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((pressure * 100) - atm_pressure) / (fluidDensity * 9.80665);
 80053f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80053f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005458 <MS5837_depth+0x70>
 80053fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <MS5837_depth+0x74>)
 8005400:	edd3 7a00 	vldr	s15, [r3]
 8005404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005408:	ee17 0a90 	vmov	r0, s15
 800540c:	f7fb f874 	bl	80004f8 <__aeabi_f2d>
 8005410:	4604      	mov	r4, r0
 8005412:	460d      	mov	r5, r1
 8005414:	f240 4305 	movw	r3, #1029	; 0x405
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb f85b 	bl	80004d4 <__aeabi_i2d>
 800541e:	a30c      	add	r3, pc, #48	; (adr r3, 8005450 <MS5837_depth+0x68>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fb f8c0 	bl	80005a8 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb f9e4 	bl	80007fc <__aeabi_ddiv>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f7fb fbac 	bl	8000b98 <__aeabi_d2f>
 8005440:	4603      	mov	r3, r0
 8005442:	ee07 3a90 	vmov	s15, r3
}
 8005446:	eeb0 0a67 	vmov.f32	s0, s15
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bdb0      	pop	{r4, r5, r7, pc}
 8005450:	3a92a305 	.word	0x3a92a305
 8005454:	40239d01 	.word	0x40239d01
 8005458:	42c80000 	.word	0x42c80000
 800545c:	20000088 	.word	0x20000088

08005460 <MS5837_set_atm_pressure>:

float MS5837_altitude(float pressure) {
	return (1-pow((pressure/(atm_pressure / 100)),.190284))*145366.45*.3048;
}

void MS5837_set_atm_pressure(float pressure) {
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	ed87 0a01 	vstr	s0, [r7, #4]
	atm_pressure = pressure * 100;
 800546a:	edd7 7a01 	vldr	s15, [r7, #4]
 800546e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005488 <MS5837_set_atm_pressure+0x28>
 8005472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <MS5837_set_atm_pressure+0x2c>)
 8005478:	edc3 7a00 	vstr	s15, [r3]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	42c80000 	.word	0x42c80000
 800548c:	20000088 	.word	0x20000088

08005490 <ssd1306_Reset>:
#include <main.h>
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af04      	add	r7, sp, #16
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80054aa:	f008 fc2b 	bl	800dd04 <vPortEnterCritical>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, SSD1306_I2C_TIMEOUT);
 80054ae:	2305      	movs	r3, #5
 80054b0:	9302      	str	r3, [sp, #8]
 80054b2:	2301      	movs	r3, #1
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2301      	movs	r3, #1
 80054bc:	2200      	movs	r2, #0
 80054be:	2178      	movs	r1, #120	; 0x78
 80054c0:	4804      	ldr	r0, [pc, #16]	; (80054d4 <ssd1306_WriteCommand+0x34>)
 80054c2:	f002 fd9f 	bl	8008004 <HAL_I2C_Mem_Write>
    taskEXIT_CRITICAL();
 80054c6:	f008 fc4d 	bl	800dd64 <vPortExitCritical>
	//HAL_I2C_Master_Transmit(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, SSD1306_I2C_TIMEOUT);
	//HAL_I2C_Master_Transmit(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, &byte, 1, SSD1306_I2C_TIMEOUT);
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	2000037c 	.word	0x2000037c

080054d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af04      	add	r7, sp, #16
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	//uint8_t tmp_cmd = 0x40;
	//HAL_I2C_Master_Transmit(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, &tmp_cmd, 1, SSD1306_I2C_TIMEOUT);
	//HAL_I2C_Master_Transmit(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, (uint8_t)buff_size, SSD1306_I2C_TIMEOUT);
	taskENTER_CRITICAL();
 80054e2:	f008 fc0f 	bl	800dd04 <vPortEnterCritical>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, SSD1306_I2C_TIMEOUT);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2205      	movs	r2, #5
 80054ec:	9202      	str	r2, [sp, #8]
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2301      	movs	r3, #1
 80054f6:	2240      	movs	r2, #64	; 0x40
 80054f8:	2178      	movs	r1, #120	; 0x78
 80054fa:	4804      	ldr	r0, [pc, #16]	; (800550c <ssd1306_WriteData+0x34>)
 80054fc:	f002 fd82 	bl	8008004 <HAL_I2C_Mem_Write>
    taskEXIT_CRITICAL();
 8005500:	f008 fc30 	bl	800dd64 <vPortExitCritical>
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000037c 	.word	0x2000037c

08005510 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005514:	f7ff ffbc 	bl	8005490 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005518:	2064      	movs	r0, #100	; 0x64
 800551a:	f000 fde7 	bl	80060ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800551e:	2000      	movs	r0, #0
 8005520:	f000 fa7c 	bl	8005a1c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005524:	2020      	movs	r0, #32
 8005526:	f7ff ffbb 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800552a:	2000      	movs	r0, #0
 800552c:	f7ff ffb8 	bl	80054a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005530:	20b0      	movs	r0, #176	; 0xb0
 8005532:	f7ff ffb5 	bl	80054a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005536:	20c8      	movs	r0, #200	; 0xc8
 8005538:	f7ff ffb2 	bl	80054a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800553c:	2000      	movs	r0, #0
 800553e:	f7ff ffaf 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005542:	2010      	movs	r0, #16
 8005544:	f7ff ffac 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005548:	2040      	movs	r0, #64	; 0x40
 800554a:	f7ff ffa9 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800554e:	20ff      	movs	r0, #255	; 0xff
 8005550:	f000 fa51 	bl	80059f6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005554:	20a1      	movs	r0, #161	; 0xa1
 8005556:	f7ff ffa3 	bl	80054a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800555a:	20a6      	movs	r0, #166	; 0xa6
 800555c:	f7ff ffa0 	bl	80054a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005560:	20a8      	movs	r0, #168	; 0xa8
 8005562:	f7ff ff9d 	bl	80054a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005566:	203f      	movs	r0, #63	; 0x3f
 8005568:	f7ff ff9a 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800556c:	20a4      	movs	r0, #164	; 0xa4
 800556e:	f7ff ff97 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005572:	20d3      	movs	r0, #211	; 0xd3
 8005574:	f7ff ff94 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005578:	2000      	movs	r0, #0
 800557a:	f7ff ff91 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800557e:	20d5      	movs	r0, #213	; 0xd5
 8005580:	f7ff ff8e 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005584:	20f0      	movs	r0, #240	; 0xf0
 8005586:	f7ff ff8b 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800558a:	20d9      	movs	r0, #217	; 0xd9
 800558c:	f7ff ff88 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005590:	2022      	movs	r0, #34	; 0x22
 8005592:	f7ff ff85 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005596:	20da      	movs	r0, #218	; 0xda
 8005598:	f7ff ff82 	bl	80054a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800559c:	2012      	movs	r0, #18
 800559e:	f7ff ff7f 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80055a2:	20db      	movs	r0, #219	; 0xdb
 80055a4:	f7ff ff7c 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80055a8:	2020      	movs	r0, #32
 80055aa:	f7ff ff79 	bl	80054a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80055ae:	208d      	movs	r0, #141	; 0x8d
 80055b0:	f7ff ff76 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80055b4:	2014      	movs	r0, #20
 80055b6:	f7ff ff73 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80055ba:	2001      	movs	r0, #1
 80055bc:	f000 fa2e 	bl	8005a1c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f000 f80f 	bl	80055e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80055c6:	f000 f831 	bl	800562c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <ssd1306_Init+0xd0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <ssd1306_Init+0xd0>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80055d6:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <ssd1306_Init+0xd0>)
 80055d8:	2201      	movs	r2, #1
 80055da:	711a      	strb	r2, [r3, #4]
}
 80055dc:	bf00      	nop
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200008ac 	.word	0x200008ac

080055e4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e00d      	b.n	8005610 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <ssd1306_Fill+0x1a>
 80055fa:	2100      	movs	r1, #0
 80055fc:	e000      	b.n	8005600 <ssd1306_Fill+0x1c>
 80055fe:	21ff      	movs	r1, #255	; 0xff
 8005600:	4a09      	ldr	r2, [pc, #36]	; (8005628 <ssd1306_Fill+0x44>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	460a      	mov	r2, r1
 8005608:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d3ed      	bcc.n	80055f4 <ssd1306_Fill+0x10>
    }
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	200004ac 	.word	0x200004ac

0800562c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005632:	2300      	movs	r3, #0
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	e016      	b.n	8005666 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	3b50      	subs	r3, #80	; 0x50
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff2e 	bl	80054a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8005644:	2000      	movs	r0, #0
 8005646:	f7ff ff2b 	bl	80054a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800564a:	2010      	movs	r0, #16
 800564c:	f7ff ff28 	bl	80054a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	01db      	lsls	r3, r3, #7
 8005654:	4a08      	ldr	r2, [pc, #32]	; (8005678 <ssd1306_UpdateScreen+0x4c>)
 8005656:	4413      	add	r3, r2
 8005658:	2180      	movs	r1, #128	; 0x80
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff3c 	bl	80054d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	3301      	adds	r3, #1
 8005664:	71fb      	strb	r3, [r7, #7]
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	2b07      	cmp	r3, #7
 800566a:	d9e5      	bls.n	8005638 <ssd1306_UpdateScreen+0xc>
    }
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	200004ac 	.word	0x200004ac

0800567c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	71fb      	strb	r3, [r7, #7]
 8005686:	460b      	mov	r3, r1
 8005688:	71bb      	strb	r3, [r7, #6]
 800568a:	4613      	mov	r3, r2
 800568c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800568e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005692:	2b00      	cmp	r3, #0
 8005694:	db3d      	blt.n	8005712 <ssd1306_DrawPixel+0x96>
 8005696:	79bb      	ldrb	r3, [r7, #6]
 8005698:	2b3f      	cmp	r3, #63	; 0x3f
 800569a:	d83a      	bhi.n	8005712 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800569c:	797b      	ldrb	r3, [r7, #5]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d11a      	bne.n	80056d8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80056a2:	79fa      	ldrb	r2, [r7, #7]
 80056a4:	79bb      	ldrb	r3, [r7, #6]
 80056a6:	08db      	lsrs	r3, r3, #3
 80056a8:	b2d8      	uxtb	r0, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	01db      	lsls	r3, r3, #7
 80056ae:	4413      	add	r3, r2
 80056b0:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <ssd1306_DrawPixel+0xa4>)
 80056b2:	5cd3      	ldrb	r3, [r2, r3]
 80056b4:	b25a      	sxtb	r2, r3
 80056b6:	79bb      	ldrb	r3, [r7, #6]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	4313      	orrs	r3, r2
 80056c6:	b259      	sxtb	r1, r3
 80056c8:	79fa      	ldrb	r2, [r7, #7]
 80056ca:	4603      	mov	r3, r0
 80056cc:	01db      	lsls	r3, r3, #7
 80056ce:	4413      	add	r3, r2
 80056d0:	b2c9      	uxtb	r1, r1
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <ssd1306_DrawPixel+0xa4>)
 80056d4:	54d1      	strb	r1, [r2, r3]
 80056d6:	e01d      	b.n	8005714 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80056d8:	79fa      	ldrb	r2, [r7, #7]
 80056da:	79bb      	ldrb	r3, [r7, #6]
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	b2d8      	uxtb	r0, r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	4413      	add	r3, r2
 80056e6:	4a0e      	ldr	r2, [pc, #56]	; (8005720 <ssd1306_DrawPixel+0xa4>)
 80056e8:	5cd3      	ldrb	r3, [r2, r3]
 80056ea:	b25a      	sxtb	r2, r3
 80056ec:	79bb      	ldrb	r3, [r7, #6]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	2101      	movs	r1, #1
 80056f4:	fa01 f303 	lsl.w	r3, r1, r3
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	b25b      	sxtb	r3, r3
 80056fe:	4013      	ands	r3, r2
 8005700:	b259      	sxtb	r1, r3
 8005702:	79fa      	ldrb	r2, [r7, #7]
 8005704:	4603      	mov	r3, r0
 8005706:	01db      	lsls	r3, r3, #7
 8005708:	4413      	add	r3, r2
 800570a:	b2c9      	uxtb	r1, r1
 800570c:	4a04      	ldr	r2, [pc, #16]	; (8005720 <ssd1306_DrawPixel+0xa4>)
 800570e:	54d1      	strb	r1, [r2, r3]
 8005710:	e000      	b.n	8005714 <ssd1306_DrawPixel+0x98>
        return;
 8005712:	bf00      	nop
    }
}
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	200004ac 	.word	0x200004ac

08005724 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	4604      	mov	r4, r0
 800572c:	1d38      	adds	r0, r7, #4
 800572e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005732:	461a      	mov	r2, r3
 8005734:	4623      	mov	r3, r4
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	4613      	mov	r3, r2
 800573a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b1f      	cmp	r3, #31
 8005740:	d902      	bls.n	8005748 <ssd1306_WriteChar+0x24>
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	2b7e      	cmp	r3, #126	; 0x7e
 8005746:	d901      	bls.n	800574c <ssd1306_WriteChar+0x28>
        return 0;
 8005748:	2300      	movs	r3, #0
 800574a:	e06d      	b.n	8005828 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800574c:	4b38      	ldr	r3, [pc, #224]	; (8005830 <ssd1306_WriteChar+0x10c>)
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	793b      	ldrb	r3, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	dc06      	bgt.n	8005768 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800575a:	4b35      	ldr	r3, [pc, #212]	; (8005830 <ssd1306_WriteChar+0x10c>)
 800575c:	885b      	ldrh	r3, [r3, #2]
 800575e:	461a      	mov	r2, r3
 8005760:	797b      	ldrb	r3, [r7, #5]
 8005762:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	dd01      	ble.n	800576c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005768:	2300      	movs	r3, #0
 800576a:	e05d      	b.n	8005828 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e04c      	b.n	800580c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	3b20      	subs	r3, #32
 8005778:	7979      	ldrb	r1, [r7, #5]
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	4619      	mov	r1, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	440b      	add	r3, r1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	e034      	b.n	80057fc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d012      	beq.n	80057c8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80057a2:	4b23      	ldr	r3, [pc, #140]	; (8005830 <ssd1306_WriteChar+0x10c>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4413      	add	r3, r2
 80057ae:	b2d8      	uxtb	r0, r3
 80057b0:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <ssd1306_WriteChar+0x10c>)
 80057b2:	885b      	ldrh	r3, [r3, #2]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	7bba      	ldrb	r2, [r7, #14]
 80057c0:	4619      	mov	r1, r3
 80057c2:	f7ff ff5b 	bl	800567c <ssd1306_DrawPixel>
 80057c6:	e016      	b.n	80057f6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <ssd1306_WriteChar+0x10c>)
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	b2d8      	uxtb	r0, r3
 80057d6:	4b16      	ldr	r3, [pc, #88]	; (8005830 <ssd1306_WriteChar+0x10c>)
 80057d8:	885b      	ldrh	r3, [r3, #2]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	b2d9      	uxtb	r1, r3
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	f7ff ff43 	bl	800567c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	3301      	adds	r3, #1
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	793b      	ldrb	r3, [r7, #4]
 80057fe:	461a      	mov	r2, r3
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	4293      	cmp	r3, r2
 8005804:	d3c5      	bcc.n	8005792 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	797b      	ldrb	r3, [r7, #5]
 800580e:	461a      	mov	r2, r3
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4293      	cmp	r3, r2
 8005814:	d3ad      	bcc.n	8005772 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <ssd1306_WriteChar+0x10c>)
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	793b      	ldrb	r3, [r7, #4]
 800581c:	b29b      	uxth	r3, r3
 800581e:	4413      	add	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	4b03      	ldr	r3, [pc, #12]	; (8005830 <ssd1306_WriteChar+0x10c>)
 8005824:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3724      	adds	r7, #36	; 0x24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}
 8005830:	200008ac 	.word	0x200008ac

08005834 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	1d38      	adds	r0, r7, #4
 800583e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005842:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8005844:	e012      	b.n	800586c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	7818      	ldrb	r0, [r3, #0]
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	1d3a      	adds	r2, r7, #4
 800584e:	ca06      	ldmia	r2, {r1, r2}
 8005850:	f7ff ff68 	bl	8005724 <ssd1306_WriteChar>
 8005854:	4603      	mov	r3, r0
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d002      	beq.n	8005866 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	e008      	b.n	8005878 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e8      	bne.n	8005846 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	781b      	ldrb	r3, [r3, #0]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	460a      	mov	r2, r1
 800588a:	71fb      	strb	r3, [r7, #7]
 800588c:	4613      	mov	r3, r2
 800588e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	b29a      	uxth	r2, r3
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <ssd1306_SetCursor+0x2c>)
 8005896:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005898:	79bb      	ldrb	r3, [r7, #6]
 800589a:	b29a      	uxth	r2, r3
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <ssd1306_SetCursor+0x2c>)
 800589e:	805a      	strh	r2, [r3, #2]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	200008ac 	.word	0x200008ac

080058b0 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	461a      	mov	r2, r3
 80058be:	4623      	mov	r3, r4
 80058c0:	71fb      	strb	r3, [r7, #7]
 80058c2:	4603      	mov	r3, r0
 80058c4:	71bb      	strb	r3, [r7, #6]
 80058c6:	460b      	mov	r3, r1
 80058c8:	717b      	strb	r3, [r7, #5]
 80058ca:	4613      	mov	r3, r2
 80058cc:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80058ce:	797a      	ldrb	r2, [r7, #5]
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bfb8      	it	lt
 80058d8:	425b      	neglt	r3, r3
 80058da:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80058dc:	793a      	ldrb	r2, [r7, #4]
 80058de:	79bb      	ldrb	r3, [r7, #6]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bfb8      	it	lt
 80058e6:	425b      	neglt	r3, r3
 80058e8:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80058ea:	79fa      	ldrb	r2, [r7, #7]
 80058ec:	797b      	ldrb	r3, [r7, #5]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d201      	bcs.n	80058f6 <ssd1306_Line+0x46>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e001      	b.n	80058fa <ssd1306_Line+0x4a>
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80058fc:	79ba      	ldrb	r2, [r7, #6]
 80058fe:	793b      	ldrb	r3, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d201      	bcs.n	8005908 <ssd1306_Line+0x58>
 8005904:	2301      	movs	r3, #1
 8005906:	e001      	b.n	800590c <ssd1306_Line+0x5c>
 8005908:	f04f 33ff 	mov.w	r3, #4294967295
 800590c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8005916:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800591a:	7939      	ldrb	r1, [r7, #4]
 800591c:	797b      	ldrb	r3, [r7, #5]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff feac 	bl	800567c <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8005924:	e024      	b.n	8005970 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8005926:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800592a:	79b9      	ldrb	r1, [r7, #6]
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fea4 	bl	800567c <ssd1306_DrawPixel>
    error2 = error * 2;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	425b      	negs	r3, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	dd08      	ble.n	8005956 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	b2da      	uxtb	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	4413      	add	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	429a      	cmp	r2, r3
 800595c:	da08      	bge.n	8005970 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	4413      	add	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	79bb      	ldrb	r3, [r7, #6]
 800596c:	4413      	add	r3, r2
 800596e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8005970:	79fa      	ldrb	r2, [r7, #7]
 8005972:	797b      	ldrb	r3, [r7, #5]
 8005974:	429a      	cmp	r2, r3
 8005976:	d1d6      	bne.n	8005926 <ssd1306_Line+0x76>
 8005978:	79ba      	ldrb	r2, [r7, #6]
 800597a:	793b      	ldrb	r3, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d1d2      	bne.n	8005926 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8005980:	bf00      	nop
}
 8005982:	3724      	adds	r7, #36	; 0x24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}

08005988 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b085      	sub	sp, #20
 800598c:	af02      	add	r7, sp, #8
 800598e:	4604      	mov	r4, r0
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	461a      	mov	r2, r3
 8005996:	4623      	mov	r3, r4
 8005998:	71fb      	strb	r3, [r7, #7]
 800599a:	4603      	mov	r3, r0
 800599c:	71bb      	strb	r3, [r7, #6]
 800599e:	460b      	mov	r3, r1
 80059a0:	717b      	strb	r3, [r7, #5]
 80059a2:	4613      	mov	r3, r2
 80059a4:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 80059a6:	79bc      	ldrb	r4, [r7, #6]
 80059a8:	797a      	ldrb	r2, [r7, #5]
 80059aa:	79b9      	ldrb	r1, [r7, #6]
 80059ac:	79f8      	ldrb	r0, [r7, #7]
 80059ae:	7e3b      	ldrb	r3, [r7, #24]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	4623      	mov	r3, r4
 80059b4:	f7ff ff7c 	bl	80058b0 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 80059b8:	793c      	ldrb	r4, [r7, #4]
 80059ba:	797a      	ldrb	r2, [r7, #5]
 80059bc:	79b9      	ldrb	r1, [r7, #6]
 80059be:	7978      	ldrb	r0, [r7, #5]
 80059c0:	7e3b      	ldrb	r3, [r7, #24]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4623      	mov	r3, r4
 80059c6:	f7ff ff73 	bl	80058b0 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80059ca:	793c      	ldrb	r4, [r7, #4]
 80059cc:	79fa      	ldrb	r2, [r7, #7]
 80059ce:	7939      	ldrb	r1, [r7, #4]
 80059d0:	7978      	ldrb	r0, [r7, #5]
 80059d2:	7e3b      	ldrb	r3, [r7, #24]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4623      	mov	r3, r4
 80059d8:	f7ff ff6a 	bl	80058b0 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80059dc:	79bc      	ldrb	r4, [r7, #6]
 80059de:	79fa      	ldrb	r2, [r7, #7]
 80059e0:	7939      	ldrb	r1, [r7, #4]
 80059e2:	79f8      	ldrb	r0, [r7, #7]
 80059e4:	7e3b      	ldrb	r3, [r7, #24]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	4623      	mov	r3, r4
 80059ea:	f7ff ff61 	bl	80058b0 <ssd1306_Line>

  return;
 80059ee:	bf00      	nop
}
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd90      	pop	{r4, r7, pc}

080059f6 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	4603      	mov	r3, r0
 80059fe:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005a00:	2381      	movs	r3, #129	; 0x81
 8005a02:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fd4a 	bl	80054a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fd46 	bl	80054a0 <ssd1306_WriteCommand>
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005a2c:	23af      	movs	r3, #175	; 0xaf
 8005a2e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <ssd1306_SetDisplayOn+0x38>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	715a      	strb	r2, [r3, #5]
 8005a36:	e004      	b.n	8005a42 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005a38:	23ae      	movs	r3, #174	; 0xae
 8005a3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <ssd1306_SetDisplayOn+0x38>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fd2b 	bl	80054a0 <ssd1306_WriteCommand>
}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200008ac 	.word	0x200008ac

08005a58 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LL_AHB2_GRP1_EnableClock>:
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	210f      	movs	r1, #15
 8005ae6:	f06f 0001 	mvn.w	r0, #1
 8005aea:	f001 fe49 	bl	8007780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b09c      	sub	sp, #112	; 0x70
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	60da      	str	r2, [r3, #12]
 8005b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	2250      	movs	r2, #80	; 0x50
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f008 fd32 	bl	800e57e <memset>
  if(hadc->Instance==ADC1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <HAL_ADC_MspInit+0x9c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d131      	bne.n	8005b88 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 14;
 8005b2a:	230e      	movs	r3, #14
 8005b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8005b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8005b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8005b3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005b3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8005b40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8005b46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b4a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b4c:	f107 030c 	add.w	r3, r7, #12
 8005b50:	4618      	mov	r0, r3
 8005b52:	f004 fc22 	bl	800a39a <HAL_RCCEx_PeriphCLKConfig>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8005b5c:	f7fe ff36 	bl	80049cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005b60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b64:	f7ff ff89 	bl	8005a7a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b68:	2001      	movs	r0, #1
 8005b6a:	f7ff ff86 	bl	8005a7a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b6e:	2310      	movs	r3, #16
 8005b70:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b72:	2303      	movs	r3, #3
 8005b74:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b84:	f001 fe24 	bl	80077d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b88:	bf00      	nop
 8005b8a:	3770      	adds	r7, #112	; 0x70
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	50040000 	.word	0x50040000

08005b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b09c      	sub	sp, #112	; 0x70
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bac:	f107 030c 	add.w	r3, r7, #12
 8005bb0:	2250      	movs	r2, #80	; 0x50
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f008 fce2 	bl	800e57e <memset>
  if(hi2c->Instance==I2C1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <HAL_I2C_MspInit+0xb0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d13b      	bne.n	8005c3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005bc8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f004 fbe1 	bl	800a39a <HAL_RCCEx_PeriphCLKConfig>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005bde:	f7fe fef5 	bl	80049cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be2:	2002      	movs	r0, #2
 8005be4:	f7ff ff49 	bl	8005a7a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be8:	2001      	movs	r0, #1
 8005bea:	f7ff ff46 	bl	8005a7a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bf4:	2312      	movs	r3, #18
 8005bf6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c00:	2304      	movs	r3, #4
 8005c02:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c08:	4619      	mov	r1, r3
 8005c0a:	480f      	ldr	r0, [pc, #60]	; (8005c48 <HAL_I2C_MspInit+0xb4>)
 8005c0c:	f001 fde0 	bl	80077d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c16:	2312      	movs	r3, #18
 8005c18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c22:	2304      	movs	r3, #4
 8005c24:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c30:	f001 fdce 	bl	80077d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c34:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005c38:	f7ff ff38 	bl	8005aac <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005c3c:	bf00      	nop
 8005c3e:	3770      	adds	r7, #112	; 0x70
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40005400 	.word	0x40005400
 8005c48:	48000400 	.word	0x48000400

08005c4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b096      	sub	sp, #88	; 0x58
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	2250      	movs	r2, #80	; 0x50
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f008 fc8e 	bl	800e57e <memset>
  if(hrtc->Instance==RTC)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <HAL_RTC_MspInit+0x54>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d115      	bne.n	8005c98 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c70:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f004 fb8c 	bl	800a39a <HAL_RCCEx_PeriphCLKConfig>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8005c88:	f7fe fea0 	bl	80049cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005c8c:	f7ff fee4 	bl	8005a58 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005c90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005c94:	f7ff ff0a 	bl	8005aac <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005c98:	bf00      	nop
 8005c9a:	3758      	adds	r7, #88	; 0x58
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40002800 	.word	0x40002800

08005ca4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	; 0x30
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	2019      	movs	r0, #25
 8005cee:	f001 fd47 	bl	8007780 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005cf2:	2019      	movs	r0, #25
 8005cf4:	f001 fd5e 	bl	80077b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005cf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005cfc:	f7ff ffd2 	bl	8005ca4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d00:	f107 0208 	add.w	r2, r7, #8
 8005d04:	f107 030c 	add.w	r3, r7, #12
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f004 f8c2 	bl	8009e94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005d10:	f004 f8aa 	bl	8009e68 <HAL_RCC_GetPCLK2Freq>
 8005d14:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <HAL_InitTick+0x8c>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	0c9b      	lsrs	r3, r3, #18
 8005d20:	3b01      	subs	r3, #1
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <HAL_InitTick+0x90>)
 8005d26:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <HAL_InitTick+0x94>)
 8005d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <HAL_InitTick+0x90>)
 8005d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005d32:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_InitTick+0x90>)
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <HAL_InitTick+0x90>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <HAL_InitTick+0x90>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005d44:	4808      	ldr	r0, [pc, #32]	; (8005d68 <HAL_InitTick+0x90>)
 8005d46:	f005 fab1 	bl	800b2ac <HAL_TIM_Base_Init>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005d50:	4805      	ldr	r0, [pc, #20]	; (8005d68 <HAL_InitTick+0x90>)
 8005d52:	f005 fb0d 	bl	800b370 <HAL_TIM_Base_Start_IT>
 8005d56:	4603      	mov	r3, r0
 8005d58:	e000      	b.n	8005d5c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3730      	adds	r7, #48	; 0x30
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	431bde83 	.word	0x431bde83
 8005d68:	200008b4 	.word	0x200008b4
 8005d6c:	40012c00 	.word	0x40012c00

08005d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d74:	e7fe      	b.n	8005d74 <NMI_Handler+0x4>

08005d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d76:	b480      	push	{r7}
 8005d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d7a:	e7fe      	b.n	8005d7a <HardFault_Handler+0x4>

08005d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d80:	e7fe      	b.n	8005d80 <MemManage_Handler+0x4>

08005d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d82:	b480      	push	{r7}
 8005d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d86:	e7fe      	b.n	8005d86 <BusFault_Handler+0x4>

08005d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d8c:	e7fe      	b.n	8005d8c <UsageFault_Handler+0x4>

08005d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005da2:	f005 fb33 	bl	800b40c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200008b4 	.word	0x200008b4

08005db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return 1;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <_kill>:

int _kill(int pid, int sig)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005dca:	f008 faa7 	bl	800e31c <__errno>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2216      	movs	r2, #22
 8005dd2:	601a      	str	r2, [r3, #0]
  return -1;
 8005dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <_exit>:

void _exit (int status)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005de8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ffe7 	bl	8005dc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005df2:	e7fe      	b.n	8005df2 <_exit+0x12>

08005df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	e00a      	b.n	8005e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e06:	f3af 8000 	nop.w
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	60ba      	str	r2, [r7, #8]
 8005e12:	b2ca      	uxtb	r2, r1
 8005e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	dbf0      	blt.n	8005e06 <_read+0x12>
  }

  return len;
 8005e24:	687b      	ldr	r3, [r7, #4]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b086      	sub	sp, #24
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e009      	b.n	8005e54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	60ba      	str	r2, [r7, #8]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	3301      	adds	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	dbf1      	blt.n	8005e40 <_write+0x12>
  }
  return len;
 8005e5c:	687b      	ldr	r3, [r7, #4]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <_close>:

int _close(int file)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <_isatty>:

int _isatty(int file)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ea6:	2301      	movs	r3, #1
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ed8:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <_sbrk+0x5c>)
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <_sbrk+0x60>)
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ee4:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <_sbrk+0x64>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <_sbrk+0x64>)
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <_sbrk+0x68>)
 8005ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <_sbrk+0x64>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d207      	bcs.n	8005f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f00:	f008 fa0c 	bl	800e31c <__errno>
 8005f04:	4603      	mov	r3, r0
 8005f06:	220c      	movs	r2, #12
 8005f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0e:	e009      	b.n	8005f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <_sbrk+0x64>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <_sbrk+0x64>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <_sbrk+0x64>)
 8005f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20030000 	.word	0x20030000
 8005f30:	00000400 	.word	0x00000400
 8005f34:	20000900 	.word	0x20000900
 8005f38:	200036c8 	.word	0x200036c8

08005f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8005f40:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <SystemInit+0x98>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <SystemInit+0x98>)
 8005f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f64:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005f68:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f74:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <SystemInit+0x9c>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f86:	f023 0305 	bic.w	r3, r3, #5
 8005f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa6:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <SystemInit+0xa0>)
 8005fa8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fae:	4a0b      	ldr	r2, [pc, #44]	; (8005fdc <SystemInit+0xa0>)
 8005fb0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	619a      	str	r2, [r3, #24]
}
 8005fca:	bf00      	nop
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	e000ed00 	.word	0xe000ed00
 8005fd8:	faf6fefb 	.word	0xfaf6fefb
 8005fdc:	22041000 	.word	0x22041000

08005fe0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005fe0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fe2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fe4:	3304      	adds	r3, #4

08005fe6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fe6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fe8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005fea:	d3f9      	bcc.n	8005fe0 <CopyDataInit>
  bx lr
 8005fec:	4770      	bx	lr

08005fee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005fee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005ff0:	3004      	adds	r0, #4

08005ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005ff2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005ff4:	d3fb      	bcc.n	8005fee <FillZerobss>
  bx lr
 8005ff6:	4770      	bx	lr

08005ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ff8:	480c      	ldr	r0, [pc, #48]	; (800602c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ffa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005ffc:	f7ff ff9e 	bl	8005f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006000:	480b      	ldr	r0, [pc, #44]	; (8006030 <LoopForever+0x6>)
 8006002:	490c      	ldr	r1, [pc, #48]	; (8006034 <LoopForever+0xa>)
 8006004:	4a0c      	ldr	r2, [pc, #48]	; (8006038 <LoopForever+0xe>)
 8006006:	2300      	movs	r3, #0
 8006008:	f7ff ffed 	bl	8005fe6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800600c:	480b      	ldr	r0, [pc, #44]	; (800603c <LoopForever+0x12>)
 800600e:	490c      	ldr	r1, [pc, #48]	; (8006040 <LoopForever+0x16>)
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <LoopForever+0x1a>)
 8006012:	2300      	movs	r3, #0
 8006014:	f7ff ffe7 	bl	8005fe6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006018:	480b      	ldr	r0, [pc, #44]	; (8006048 <LoopForever+0x1e>)
 800601a:	490c      	ldr	r1, [pc, #48]	; (800604c <LoopForever+0x22>)
 800601c:	2300      	movs	r3, #0
 800601e:	f7ff ffe8 	bl	8005ff2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006022:	f008 fa77 	bl	800e514 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006026:	f7fd fb9f 	bl	8003768 <main>

0800602a <LoopForever>:

LoopForever:
  b LoopForever
 800602a:	e7fe      	b.n	800602a <LoopForever>
  ldr   r0, =_estack
 800602c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006030:	20000008 	.word	0x20000008
 8006034:	20000288 	.word	0x20000288
 8006038:	08016438 	.word	0x08016438
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800603c:	20030000 	.word	0x20030000
 8006040:	20030000 	.word	0x20030000
 8006044:	080166b8 	.word	0x080166b8
  INIT_BSS _sbss, _ebss
 8006048:	20000288 	.word	0x20000288
 800604c:	200036c4 	.word	0x200036c4

08006050 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006050:	e7fe      	b.n	8006050 <ADC1_IRQHandler>
	...

08006054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <HAL_Init+0x3c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a0b      	ldr	r2, [pc, #44]	; (8006090 <HAL_Init+0x3c>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006068:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800606a:	2003      	movs	r0, #3
 800606c:	f001 fb7d 	bl	800776a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006070:	200f      	movs	r0, #15
 8006072:	f7ff fe31 	bl	8005cd8 <HAL_InitTick>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	71fb      	strb	r3, [r7, #7]
 8006080:	e001      	b.n	8006086 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006082:	f7ff fd2c 	bl	8005ade <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006086:	79fb      	ldrb	r3, [r7, #7]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	58004000 	.word	0x58004000

08006094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_IncTick+0x20>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <HAL_IncTick+0x24>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4413      	add	r3, r2
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <HAL_IncTick+0x24>)
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200000ac 	.word	0x200000ac
 80060b8:	20000904 	.word	0x20000904

080060bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return uwTick;
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <HAL_GetTick+0x14>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000904 	.word	0x20000904

080060d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80060d8:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <HAL_GetTickPrio+0x14>)
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	200000a8 	.word	0x200000a8

080060ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060f4:	f7ff ffe2 	bl	80060bc <HAL_GetTick>
 80060f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d005      	beq.n	8006112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_Delay+0x44>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006112:	bf00      	nop
 8006114:	f7ff ffd2 	bl	80060bc <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	429a      	cmp	r2, r3
 8006122:	d8f7      	bhi.n	8006114 <HAL_Delay+0x28>
  {
  }
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200000ac 	.word	0x200000ac

08006134 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3360      	adds	r3, #96	; 0x60
 80061ae:	461a      	mov	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <LL_ADC_SetOffset+0x44>)
 80061be:	4013      	ands	r3, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	03fff000 	.word	0x03fff000

080061e4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3360      	adds	r3, #96	; 0x60
 80061f2:	461a      	mov	r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3360      	adds	r3, #96	; 0x60
 8006220:	461a      	mov	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	431a      	orrs	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800625e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3330      	adds	r3, #48	; 0x30
 800627c:	461a      	mov	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	4413      	add	r3, r2
 800628a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	211f      	movs	r1, #31
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	401a      	ands	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	0e9b      	lsrs	r3, r3, #26
 80062a4:	f003 011f 	and.w	r1, r3, #31
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	431a      	orrs	r2, r3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3314      	adds	r3, #20
 80062d4:	461a      	mov	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	0e5b      	lsrs	r3, r3, #25
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	4413      	add	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	0d1b      	lsrs	r3, r3, #20
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	2107      	movs	r1, #7
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	43db      	mvns	r3, r3
 80062f8:	401a      	ands	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	0d1b      	lsrs	r3, r3, #20
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0318 	and.w	r3, r3, #24
 800633e:	4908      	ldr	r1, [pc, #32]	; (8006360 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006340:	40d9      	lsrs	r1, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	400b      	ands	r3, r1
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	431a      	orrs	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	0007ffff 	.word	0x0007ffff

08006364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6093      	str	r3, [r2, #8]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800639c:	d101      	bne.n	80063a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80063c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ec:	d101      	bne.n	80063f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800643c:	f043 0202 	orr.w	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <LL_ADC_IsEnabled+0x18>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <LL_ADC_IsEnabled+0x1a>
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d101      	bne.n	800648e <LL_ADC_IsDisableOngoing+0x18>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <LL_ADC_IsDisableOngoing+0x1a>
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064b0:	f043 0204 	orr.w	r2, r3, #4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d101      	bne.n	8006504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006522:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006526:	f043 0220 	orr.w	r2, r3, #32
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b08      	cmp	r3, #8
 800654c:	d101      	bne.n	8006552 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006570:	2300      	movs	r3, #0
 8006572:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e12e      	b.n	80067dc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	2b00      	cmp	r3, #0
 800658a:	d109      	bne.n	80065a0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fab1 	bl	8005af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff feef 	bl	8006388 <LL_ADC_IsDeepPowerDownEnabled>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fed5 	bl	8006364 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff ff0a 	bl	80063d8 <LL_ADC_IsInternalRegulatorEnabled>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d115      	bne.n	80065f6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff feee 	bl	80063b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065d4:	4b83      	ldr	r3, [pc, #524]	; (80067e4 <HAL_ADC_Init+0x284>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	099b      	lsrs	r3, r3, #6
 80065da:	4a83      	ldr	r2, [pc, #524]	; (80067e8 <HAL_ADC_Init+0x288>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	099b      	lsrs	r3, r3, #6
 80065e2:	3301      	adds	r3, #1
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80065e8:	e002      	b.n	80065f0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f9      	bne.n	80065ea <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff feec 	bl	80063d8 <LL_ADC_IsInternalRegulatorEnabled>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10d      	bne.n	8006622 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	f043 0210 	orr.w	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f043 0201 	orr.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff ff60 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 800662c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80c7 	bne.w	80067ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 80c3 	bne.w	80067ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006648:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800664c:	f043 0202 	orr.w	r2, r3, #2
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fef9 	bl	8006450 <LL_ADC_IsEnabled>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006664:	4861      	ldr	r0, [pc, #388]	; (80067ec <HAL_ADC_Init+0x28c>)
 8006666:	f7ff fef3 	bl	8006450 <LL_ADC_IsEnabled>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4619      	mov	r1, r3
 8006676:	485e      	ldr	r0, [pc, #376]	; (80067f0 <HAL_ADC_Init+0x290>)
 8006678:	f7ff fd5c 	bl	8006134 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7e5b      	ldrb	r3, [r3, #25]
 8006680:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006686:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800668c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006692:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800669a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800669c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d106      	bne.n	80066bc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	3b01      	subs	r3, #1
 80066b4:	045b      	lsls	r3, r3, #17
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d009      	beq.n	80066d8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	4b45      	ldr	r3, [pc, #276]	; (80067f4 <HAL_ADC_Init+0x294>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	69b9      	ldr	r1, [r7, #24]
 80066e8:	430b      	orrs	r3, r1
 80066ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fefb 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 80066f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ff1c 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 8006702:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d13d      	bne.n	8006786 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d13a      	bne.n	8006786 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006714:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800671c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800671e:	4313      	orrs	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800672c:	f023 0302 	bic.w	r3, r3, #2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	69b9      	ldr	r1, [r7, #24]
 8006736:	430b      	orrs	r3, r1
 8006738:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006740:	2b01      	cmp	r3, #1
 8006742:	d118      	bne.n	8006776 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800674e:	f023 0304 	bic.w	r3, r3, #4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800675a:	4311      	orrs	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006760:	4311      	orrs	r1, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006766:	430a      	orrs	r2, r1
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	611a      	str	r2, [r3, #16]
 8006774:	e007      	b.n	8006786 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d10c      	bne.n	80067a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	f023 010f 	bic.w	r1, r3, #15
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	1e5a      	subs	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
 80067a6:	e007      	b.n	80067b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 020f 	bic.w	r2, r2, #15
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	f023 0303 	bic.w	r3, r3, #3
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
 80067c8:	e007      	b.n	80067da <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	f043 0210 	orr.w	r2, r3, #16
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80067da:	7ffb      	ldrb	r3, [r7, #31]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	200000a4 	.word	0x200000a4
 80067e8:	053e2d63 	.word	0x053e2d63
 80067ec:	50040000 	.word	0x50040000
 80067f0:	50040300 	.word	0x50040300
 80067f4:	fff0c007 	.word	0xfff0c007

080067f8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fe71 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d140      	bne.n	8006892 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_ADC_Start+0x26>
 800681a:	2302      	movs	r3, #2
 800681c:	e03c      	b.n	8006898 <HAL_ADC_Start+0xa0>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fd8a 	bl	8007340 <ADC_Enable>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d128      	bne.n	8006888 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d106      	bne.n	8006866 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	f023 0206 	bic.w	r2, r3, #6
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	659a      	str	r2, [r3, #88]	; 0x58
 8006864:	e002      	b.n	800686c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	221c      	movs	r2, #28
 8006872:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fe0b 	bl	800649c <LL_ADC_REG_StartConversion>
 8006886:	e006      	b.n	8006896 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006890:	e001      	b.n	8006896 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006892:	2302      	movs	r3, #2
 8006894:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_ADC_Stop+0x16>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e023      	b.n	80068fe <HAL_ADC_Stop+0x5e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80068be:	2103      	movs	r1, #3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc81 	bl	80071c8 <ADC_ConversionStop>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d111      	bne.n	80068f4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fdaf 	bl	8007434 <ADC_Disable>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	f043 0201 	orr.w	r2, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d102      	bne.n	800691e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006918:	2308      	movs	r3, #8
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e010      	b.n	8006940 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006930:	f043 0220 	orr.w	r2, r3, #32
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e06d      	b.n	8006a18 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800693c:	2304      	movs	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006940:	f7ff fbbc 	bl	80060bc <HAL_GetTick>
 8006944:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006946:	e021      	b.n	800698c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d01d      	beq.n	800698c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006950:	f7ff fbb4 	bl	80060bc <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <HAL_ADC_PollForConversion+0x60>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d112      	bne.n	800698c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	f043 0204 	orr.w	r2, r3, #4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e045      	b.n	8006a18 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0d6      	beq.n	8006948 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fc4b 	bl	8006246 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01c      	beq.n	80069f0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7e5b      	ldrb	r3, [r3, #25]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d118      	bne.n	80069f0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d111      	bne.n	80069f0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	f043 0201 	orr.w	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d104      	bne.n	8006a00 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2208      	movs	r2, #8
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e00a      	b.n	8006a16 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	220c      	movs	r2, #12
 8006a14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b0b6      	sub	sp, #216	; 0xd8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_ADC_ConfigChannel+0x22>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e39f      	b.n	800719e <HAL_ADC_ConfigChannel+0x762>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fd3e 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 8384 	bne.w	8007180 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	f7ff fbf1 	bl	800626c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fd2c 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8006a94:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fd4c 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 8006aa2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006aa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 81a6 	bne.w	8006dfc <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 81a1 	bne.w	8006dfc <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f7ff fbfc 	bl	80062c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	695a      	ldr	r2, [r3, #20]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d00a      	beq.n	8006b04 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6919      	ldr	r1, [r3, #16]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006afe:	f7ff fb4d 	bl	800619c <LL_ADC_SetOffset>
 8006b02:	e17b      	b.n	8006dfc <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff fb6a 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <HAL_ADC_ConfigChannel+0xf4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fb5f 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006b26:	4603      	mov	r3, r0
 8006b28:	0e9b      	lsrs	r3, r3, #26
 8006b2a:	f003 021f 	and.w	r2, r3, #31
 8006b2e:	e01e      	b.n	8006b6e <HAL_ADC_ConfigChannel+0x132>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fb54 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b46:	fa93 f3a3 	rbit	r3, r3
 8006b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8006b5e:	2320      	movs	r3, #32
 8006b60:	e004      	b.n	8006b6c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8006b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b66:	fab3 f383 	clz	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <HAL_ADC_ConfigChannel+0x14a>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	0e9b      	lsrs	r3, r3, #26
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	e018      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x17c>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b92:	fa93 f3a3 	rbit	r3, r3
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8006baa:	2320      	movs	r3, #32
 8006bac:	e004      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8006bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bb2:	fab3 f383 	clz	r3, r3
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d106      	bne.n	8006bca <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff fb23 	bl	8006210 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fb07 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <HAL_ADC_ConfigChannel+0x1ba>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2101      	movs	r1, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fafc 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006bec:	4603      	mov	r3, r0
 8006bee:	0e9b      	lsrs	r3, r3, #26
 8006bf0:	f003 021f 	and.w	r2, r3, #31
 8006bf4:	e01e      	b.n	8006c34 <HAL_ADC_ConfigChannel+0x1f8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff faf1 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c0c:	fa93 f3a3 	rbit	r3, r3
 8006c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8006c24:	2320      	movs	r3, #32
 8006c26:	e004      	b.n	8006c32 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8006c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c2c:	fab3 f383 	clz	r3, r3
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_ADC_ConfigChannel+0x210>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	0e9b      	lsrs	r3, r3, #26
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	e018      	b.n	8006c7e <HAL_ADC_ConfigChannel+0x242>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c58:	fa93 f3a3 	rbit	r3, r3
 8006c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006c60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8006c70:	2320      	movs	r3, #32
 8006c72:	e004      	b.n	8006c7e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8006c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d106      	bne.n	8006c90 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff fac0 	bl	8006210 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2102      	movs	r1, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff faa4 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_ADC_ConfigChannel+0x280>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2102      	movs	r1, #2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fa99 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	0e9b      	lsrs	r3, r3, #26
 8006cb6:	f003 021f 	and.w	r2, r3, #31
 8006cba:	e01e      	b.n	8006cfa <HAL_ADC_ConfigChannel+0x2be>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fa8e 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cd2:	fa93 f3a3 	rbit	r3, r3
 8006cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8006cea:	2320      	movs	r3, #32
 8006cec:	e004      	b.n	8006cf8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cf2:	fab3 f383 	clz	r3, r3
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <HAL_ADC_ConfigChannel+0x2d6>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	0e9b      	lsrs	r3, r3, #26
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	e016      	b.n	8006d40 <HAL_ADC_ConfigChannel+0x304>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d1e:	fa93 f3a3 	rbit	r3, r3
 8006d22:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8006d32:	2320      	movs	r3, #32
 8006d34:	e004      	b.n	8006d40 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8006d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d3a:	fab3 f383 	clz	r3, r3
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d106      	bne.n	8006d52 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2102      	movs	r1, #2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff fa5f 	bl	8006210 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2103      	movs	r1, #3
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fa43 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x342>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2103      	movs	r1, #3
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fa38 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006d74:	4603      	mov	r3, r0
 8006d76:	0e9b      	lsrs	r3, r3, #26
 8006d78:	f003 021f 	and.w	r2, r3, #31
 8006d7c:	e017      	b.n	8006dae <HAL_ADC_ConfigChannel+0x372>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2103      	movs	r1, #3
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fa2d 	bl	80061e4 <LL_ADC_GetOffsetChannel>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d90:	fa93 f3a3 	rbit	r3, r3
 8006d94:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d98:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8006da0:	2320      	movs	r3, #32
 8006da2:	e003      	b.n	8006dac <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8006da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da6:	fab3 f383 	clz	r3, r3
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x38a>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	0e9b      	lsrs	r3, r3, #26
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	e011      	b.n	8006dea <HAL_ADC_ConfigChannel+0x3ae>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dce:	fa93 f3a3 	rbit	r3, r3
 8006dd2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8006dde:	2320      	movs	r3, #32
 8006de0:	e003      	b.n	8006dea <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8006de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de4:	fab3 f383 	clz	r3, r3
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d106      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2103      	movs	r1, #3
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fa0a 	bl	8006210 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fb25 	bl	8006450 <LL_ADC_IsEnabled>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f040 81c2 	bne.w	8007192 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6819      	ldr	r1, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f7ff fa7e 	bl	800631c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	4a8e      	ldr	r2, [pc, #568]	; (8007060 <HAL_ADC_ConfigChannel+0x624>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	f040 8130 	bne.w	800708c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10b      	bne.n	8006e54 <HAL_ADC_ConfigChannel+0x418>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	0e9b      	lsrs	r3, r3, #26
 8006e42:	3301      	adds	r3, #1
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	2b09      	cmp	r3, #9
 8006e4a:	bf94      	ite	ls
 8006e4c:	2301      	movls	r3, #1
 8006e4e:	2300      	movhi	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	e019      	b.n	8006e88 <HAL_ADC_ConfigChannel+0x44c>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5c:	fa93 f3a3 	rbit	r3, r3
 8006e60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	e003      	b.n	8006e78 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e72:	fab3 f383 	clz	r3, r3
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	bf94      	ite	ls
 8006e82:	2301      	movls	r3, #1
 8006e84:	2300      	movhi	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d079      	beq.n	8006f80 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d107      	bne.n	8006ea8 <HAL_ADC_ConfigChannel+0x46c>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	0e9b      	lsrs	r3, r3, #26
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	069b      	lsls	r3, r3, #26
 8006ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ea6:	e015      	b.n	8006ed4 <HAL_ADC_ConfigChannel+0x498>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb0:	fa93 f3a3 	rbit	r3, r3
 8006eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	e003      	b.n	8006ecc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	069b      	lsls	r3, r3, #26
 8006ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <HAL_ADC_ConfigChannel+0x4b8>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	0e9b      	lsrs	r3, r3, #26
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	e017      	b.n	8006f24 <HAL_ADC_ConfigChannel+0x4e8>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efc:	fa93 f3a3 	rbit	r3, r3
 8006f00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8006f0c:	2320      	movs	r3, #32
 8006f0e:	e003      	b.n	8006f18 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	fab3 f383 	clz	r3, r3
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	3301      	adds	r3, #1
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2101      	movs	r1, #1
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	ea42 0103 	orr.w	r1, r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x50e>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	0e9b      	lsrs	r3, r3, #26
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f003 021f 	and.w	r2, r3, #31
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	051b      	lsls	r3, r3, #20
 8006f48:	e018      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x540>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	fa93 f3a3 	rbit	r3, r3
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006f62:	2320      	movs	r3, #32
 8006f64:	e003      	b.n	8006f6e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f68:	fab3 f383 	clz	r3, r3
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	3301      	adds	r3, #1
 8006f70:	f003 021f 	and.w	r2, r3, #31
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	e080      	b.n	8007082 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <HAL_ADC_ConfigChannel+0x560>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	0e9b      	lsrs	r3, r3, #26
 8006f92:	3301      	adds	r3, #1
 8006f94:	069b      	lsls	r3, r3, #26
 8006f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f9a:	e015      	b.n	8006fc8 <HAL_ADC_ConfigChannel+0x58c>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	fa93 f3a3 	rbit	r3, r3
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8006fb4:	2320      	movs	r3, #32
 8006fb6:	e003      	b.n	8006fc0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	fab3 f383 	clz	r3, r3
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	069b      	lsls	r3, r3, #26
 8006fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_ADC_ConfigChannel+0x5ac>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	0e9b      	lsrs	r3, r3, #26
 8006fda:	3301      	adds	r3, #1
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe6:	e017      	b.n	8007018 <HAL_ADC_ConfigChannel+0x5dc>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	fa93 f3a3 	rbit	r3, r3
 8006ff4:	61fb      	str	r3, [r7, #28]
  return result;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8007000:	2320      	movs	r3, #32
 8007002:	e003      	b.n	800700c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	fab3 f383 	clz	r3, r3
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3301      	adds	r3, #1
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2101      	movs	r1, #1
 8007014:	fa01 f303 	lsl.w	r3, r1, r3
 8007018:	ea42 0103 	orr.w	r1, r2, r3
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10d      	bne.n	8007044 <HAL_ADC_ConfigChannel+0x608>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	0e9b      	lsrs	r3, r3, #26
 800702e:	3301      	adds	r3, #1
 8007030:	f003 021f 	and.w	r2, r3, #31
 8007034:	4613      	mov	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4413      	add	r3, r2
 800703a:	3b1e      	subs	r3, #30
 800703c:	051b      	lsls	r3, r3, #20
 800703e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007042:	e01d      	b.n	8007080 <HAL_ADC_ConfigChannel+0x644>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	fa93 f3a3 	rbit	r3, r3
 8007050:	613b      	str	r3, [r7, #16]
  return result;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d103      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800705c:	2320      	movs	r3, #32
 800705e:	e005      	b.n	800706c <HAL_ADC_ConfigChannel+0x630>
 8007060:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	fab3 f383 	clz	r3, r3
 800706a:	b2db      	uxtb	r3, r3
 800706c:	3301      	adds	r3, #1
 800706e:	f003 021f 	and.w	r2, r3, #31
 8007072:	4613      	mov	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4413      	add	r3, r2
 8007078:	3b1e      	subs	r3, #30
 800707a:	051b      	lsls	r3, r3, #20
 800707c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007080:	430b      	orrs	r3, r1
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	6892      	ldr	r2, [r2, #8]
 8007086:	4619      	mov	r1, r3
 8007088:	f7ff f91c 	bl	80062c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	4b45      	ldr	r3, [pc, #276]	; (80071a8 <HAL_ADC_ConfigChannel+0x76c>)
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d07c      	beq.n	8007192 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007098:	4844      	ldr	r0, [pc, #272]	; (80071ac <HAL_ADC_ConfigChannel+0x770>)
 800709a:	f7ff f871 	bl	8006180 <LL_ADC_GetCommonPathInternalCh>
 800709e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070a2:	4843      	ldr	r0, [pc, #268]	; (80071b0 <HAL_ADC_ConfigChannel+0x774>)
 80070a4:	f7ff f9d4 	bl	8006450 <LL_ADC_IsEnabled>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d15e      	bne.n	800716c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a40      	ldr	r2, [pc, #256]	; (80071b4 <HAL_ADC_ConfigChannel+0x778>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d127      	bne.n	8007108 <HAL_ADC_ConfigChannel+0x6cc>
 80070b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d121      	bne.n	8007108 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <HAL_ADC_ConfigChannel+0x774>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d161      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80070ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070d6:	4619      	mov	r1, r3
 80070d8:	4834      	ldr	r0, [pc, #208]	; (80071ac <HAL_ADC_ConfigChannel+0x770>)
 80070da:	f7ff f83e 	bl	800615a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070de:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <HAL_ADC_ConfigChannel+0x77c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	4a35      	ldr	r2, [pc, #212]	; (80071bc <HAL_ADC_ConfigChannel+0x780>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	099b      	lsrs	r3, r3, #6
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80070f8:	e002      	b.n	8007100 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f9      	bne.n	80070fa <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007106:	e044      	b.n	8007192 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2c      	ldr	r2, [pc, #176]	; (80071c0 <HAL_ADC_ConfigChannel+0x784>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d113      	bne.n	800713a <HAL_ADC_ConfigChannel+0x6fe>
 8007112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a23      	ldr	r2, [pc, #140]	; (80071b0 <HAL_ADC_ConfigChannel+0x774>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d134      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800712c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007130:	4619      	mov	r1, r3
 8007132:	481e      	ldr	r0, [pc, #120]	; (80071ac <HAL_ADC_ConfigChannel+0x770>)
 8007134:	f7ff f811 	bl	800615a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007138:	e02b      	b.n	8007192 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <HAL_ADC_ConfigChannel+0x788>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d126      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x756>
 8007144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d120      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <HAL_ADC_ConfigChannel+0x774>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d11b      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800715a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800715e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007162:	4619      	mov	r1, r3
 8007164:	4811      	ldr	r0, [pc, #68]	; (80071ac <HAL_ADC_ConfigChannel+0x770>)
 8007166:	f7fe fff8 	bl	800615a <LL_ADC_SetCommonPathInternalCh>
 800716a:	e012      	b.n	8007192 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007170:	f043 0220 	orr.w	r2, r3, #32
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800717e:	e008      	b.n	8007192 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800719a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800719e:	4618      	mov	r0, r3
 80071a0:	37d8      	adds	r7, #216	; 0xd8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	80080000 	.word	0x80080000
 80071ac:	50040300 	.word	0x50040300
 80071b0:	50040000 	.word	0x50040000
 80071b4:	c7520000 	.word	0xc7520000
 80071b8:	200000a4 	.word	0x200000a4
 80071bc:	053e2d63 	.word	0x053e2d63
 80071c0:	cb840000 	.word	0xcb840000
 80071c4:	80000001 	.word	0x80000001

080071c8 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff f984 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 80071e4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff f9a5 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 80071f0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8098 	beq.w	8007330 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d02a      	beq.n	8007264 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7e5b      	ldrb	r3, [r3, #25]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d126      	bne.n	8007264 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7e1b      	ldrb	r3, [r3, #24]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d122      	bne.n	8007264 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800721e:	2301      	movs	r3, #1
 8007220:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007222:	e014      	b.n	800724e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4a45      	ldr	r2, [pc, #276]	; (800733c <ADC_ConversionStop+0x174>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d90d      	bls.n	8007248 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007230:	f043 0210 	orr.w	r2, r3, #16
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	f043 0201 	orr.w	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e074      	b.n	8007332 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	3301      	adds	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d1e3      	bne.n	8007224 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2240      	movs	r2, #64	; 0x40
 8007262:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d014      	beq.n	8007294 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff f93c 	bl	80064ec <LL_ADC_REG_IsConversionOngoing>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff f8f9 	bl	8006476 <LL_ADC_IsDisableOngoing>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff f918 	bl	80064c4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d014      	beq.n	80072c4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff f94b 	bl	800653a <LL_ADC_INJ_IsConversionOngoing>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff f8e1 	bl	8006476 <LL_ADC_IsDisableOngoing>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f927 	bl	8006512 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d005      	beq.n	80072d6 <ADC_ConversionStop+0x10e>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d105      	bne.n	80072dc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80072d0:	230c      	movs	r3, #12
 80072d2:	617b      	str	r3, [r7, #20]
        break;
 80072d4:	e005      	b.n	80072e2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80072d6:	2308      	movs	r3, #8
 80072d8:	617b      	str	r3, [r7, #20]
        break;
 80072da:	e002      	b.n	80072e2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80072dc:	2304      	movs	r3, #4
 80072de:	617b      	str	r3, [r7, #20]
        break;
 80072e0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80072e2:	f7fe feeb 	bl	80060bc <HAL_GetTick>
 80072e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80072e8:	e01b      	b.n	8007322 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80072ea:	f7fe fee7 	bl	80060bc <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b05      	cmp	r3, #5
 80072f6:	d914      	bls.n	8007322 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	4013      	ands	r3, r2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	f043 0210 	orr.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007316:	f043 0201 	orr.w	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e007      	b.n	8007332 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1dc      	bne.n	80072ea <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	a33fffff 	.word	0xa33fffff

08007340 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff f87d 	bl	8006450 <LL_ADC_IsEnabled>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d15e      	bne.n	800741a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	4b30      	ldr	r3, [pc, #192]	; (8007424 <ADC_Enable+0xe4>)
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f043 0210 	orr.w	r2, r3, #16
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737a:	f043 0201 	orr.w	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e04a      	b.n	800741c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff f838 	bl	8006400 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007390:	4825      	ldr	r0, [pc, #148]	; (8007428 <ADC_Enable+0xe8>)
 8007392:	f7fe fef5 	bl	8006180 <LL_ADC_GetCommonPathInternalCh>
 8007396:	4603      	mov	r3, r0
 8007398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073a0:	4b22      	ldr	r3, [pc, #136]	; (800742c <ADC_Enable+0xec>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	099b      	lsrs	r3, r3, #6
 80073a6:	4a22      	ldr	r2, [pc, #136]	; (8007430 <ADC_Enable+0xf0>)
 80073a8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ac:	099b      	lsrs	r3, r3, #6
 80073ae:	3301      	adds	r3, #1
 80073b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80073b2:	e002      	b.n	80073ba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1f9      	bne.n	80073b4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80073c0:	f7fe fe7c 	bl	80060bc <HAL_GetTick>
 80073c4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073c6:	e021      	b.n	800740c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff f83f 	bl	8006450 <LL_ADC_IsEnabled>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff f80f 	bl	8006400 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80073e2:	f7fe fe6b 	bl	80060bc <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d90d      	bls.n	800740c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f4:	f043 0210 	orr.w	r2, r3, #16
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	f043 0201 	orr.w	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e007      	b.n	800741c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b01      	cmp	r3, #1
 8007418:	d1d6      	bne.n	80073c8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	8000003f 	.word	0x8000003f
 8007428:	50040300 	.word	0x50040300
 800742c:	200000a4 	.word	0x200000a4
 8007430:	053e2d63 	.word	0x053e2d63

08007434 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff f818 	bl	8006476 <LL_ADC_IsDisableOngoing>
 8007446:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe ffff 	bl	8006450 <LL_ADC_IsEnabled>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d047      	beq.n	80074e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d144      	bne.n	80074e8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 030d 	and.w	r3, r3, #13
 8007468:	2b01      	cmp	r3, #1
 800746a:	d10c      	bne.n	8007486 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe ffd9 	bl	8006428 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2203      	movs	r2, #3
 800747c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800747e:	f7fe fe1d 	bl	80060bc <HAL_GetTick>
 8007482:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007484:	e029      	b.n	80074da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	f043 0210 	orr.w	r2, r3, #16
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007496:	f043 0201 	orr.w	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e023      	b.n	80074ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80074a2:	f7fe fe0b 	bl	80060bc <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d914      	bls.n	80074da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c2:	f043 0210 	orr.w	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ce:	f043 0201 	orr.w	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e007      	b.n	80074ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1dc      	bne.n	80074a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <LL_ADC_StartCalibration>:
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800750e:	4313      	orrs	r3, r2
 8007510:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	609a      	str	r2, [r3, #8]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <LL_ADC_IsCalibrationOnGoing>:
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007538:	d101      	bne.n	800753e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_ADCEx_Calibration_Start+0x1c>
 8007564:	2302      	movs	r3, #2
 8007566:	e04d      	b.n	8007604 <HAL_ADCEx_Calibration_Start+0xb8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ff5f 	bl	8007434 <ADC_Disable>
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d136      	bne.n	80075ee <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007588:	f023 0302 	bic.w	r3, r3, #2
 800758c:	f043 0202 	orr.w	r2, r3, #2
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff ffa9 	bl	80074f2 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075a0:	e014      	b.n	80075cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a18      	ldr	r2, [pc, #96]	; (800760c <HAL_ADCEx_Calibration_Start+0xc0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d90d      	bls.n	80075cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	f023 0312 	bic.w	r3, r3, #18
 80075b8:	f043 0210 	orr.w	r2, r3, #16
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e01b      	b.n	8007604 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ffa7 	bl	8007524 <LL_ADC_IsCalibrationOnGoing>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e2      	bne.n	80075a2 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	f043 0201 	orr.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54
 80075ec:	e005      	b.n	80075fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f043 0210 	orr.w	r2, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	00026aaa 	.word	0x00026aaa

08007610 <__NVIC_SetPriorityGrouping>:
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <__NVIC_SetPriorityGrouping+0x44>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800762c:	4013      	ands	r3, r2
 800762e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800763c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007642:	4a04      	ldr	r2, [pc, #16]	; (8007654 <__NVIC_SetPriorityGrouping+0x44>)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	60d3      	str	r3, [r2, #12]
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	e000ed00 	.word	0xe000ed00

08007658 <__NVIC_GetPriorityGrouping>:
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <__NVIC_GetPriorityGrouping+0x18>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	f003 0307 	and.w	r3, r3, #7
}
 8007666:	4618      	mov	r0, r3
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	e000ed00 	.word	0xe000ed00

08007674 <__NVIC_EnableIRQ>:
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800767e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	db0b      	blt.n	800769e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	f003 021f 	and.w	r2, r3, #31
 800768c:	4907      	ldr	r1, [pc, #28]	; (80076ac <__NVIC_EnableIRQ+0x38>)
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	2001      	movs	r0, #1
 8007696:	fa00 f202 	lsl.w	r2, r0, r2
 800769a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	e000e100 	.word	0xe000e100

080076b0 <__NVIC_SetPriority>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db0a      	blt.n	80076da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	490c      	ldr	r1, [pc, #48]	; (80076fc <__NVIC_SetPriority+0x4c>)
 80076ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ce:	0112      	lsls	r2, r2, #4
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	440b      	add	r3, r1
 80076d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80076d8:	e00a      	b.n	80076f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	4908      	ldr	r1, [pc, #32]	; (8007700 <__NVIC_SetPriority+0x50>)
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	3b04      	subs	r3, #4
 80076e8:	0112      	lsls	r2, r2, #4
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	440b      	add	r3, r1
 80076ee:	761a      	strb	r2, [r3, #24]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	e000e100 	.word	0xe000e100
 8007700:	e000ed00 	.word	0xe000ed00

08007704 <NVIC_EncodePriority>:
{
 8007704:	b480      	push	{r7}
 8007706:	b089      	sub	sp, #36	; 0x24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f1c3 0307 	rsb	r3, r3, #7
 800771e:	2b04      	cmp	r3, #4
 8007720:	bf28      	it	cs
 8007722:	2304      	movcs	r3, #4
 8007724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	3304      	adds	r3, #4
 800772a:	2b06      	cmp	r3, #6
 800772c:	d902      	bls.n	8007734 <NVIC_EncodePriority+0x30>
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	3b03      	subs	r3, #3
 8007732:	e000      	b.n	8007736 <NVIC_EncodePriority+0x32>
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43da      	mvns	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	401a      	ands	r2, r3
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800774c:	f04f 31ff 	mov.w	r1, #4294967295
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	fa01 f303 	lsl.w	r3, r1, r3
 8007756:	43d9      	mvns	r1, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800775c:	4313      	orrs	r3, r2
}
 800775e:	4618      	mov	r0, r3
 8007760:	3724      	adds	r7, #36	; 0x24
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff ff4c 	bl	8007610 <__NVIC_SetPriorityGrouping>
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800778e:	f7ff ff63 	bl	8007658 <__NVIC_GetPriorityGrouping>
 8007792:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	6978      	ldr	r0, [r7, #20]
 800779a:	f7ff ffb3 	bl	8007704 <NVIC_EncodePriority>
 800779e:	4602      	mov	r2, r0
 80077a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077a4:	4611      	mov	r1, r2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff ff82 	bl	80076b0 <__NVIC_SetPriority>
}
 80077ac:	bf00      	nop
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff ff56 	bl	8007674 <__NVIC_EnableIRQ>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077de:	e14c      	b.n	8007a7a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	2101      	movs	r1, #1
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ec:	4013      	ands	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 813e 	beq.w	8007a74 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d005      	beq.n	8007810 <HAL_GPIO_Init+0x40>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d130      	bne.n	8007872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	2203      	movs	r2, #3
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4013      	ands	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007846:	2201      	movs	r2, #1
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	43db      	mvns	r3, r3
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4013      	ands	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	f003 0201 	and.w	r2, r3, #1
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	fa02 f303 	lsl.w	r3, r2, r3
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d017      	beq.n	80078ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	2203      	movs	r2, #3
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	43db      	mvns	r3, r3
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4013      	ands	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d123      	bne.n	8007902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	08da      	lsrs	r2, r3, #3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3208      	adds	r2, #8
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	220f      	movs	r2, #15
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	43db      	mvns	r3, r3
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4013      	ands	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	08da      	lsrs	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3208      	adds	r2, #8
 80078fc:	6939      	ldr	r1, [r7, #16]
 80078fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	2203      	movs	r2, #3
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4013      	ands	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 0203 	and.w	r2, r3, #3
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 8098 	beq.w	8007a74 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007944:	4a54      	ldr	r2, [pc, #336]	; (8007a98 <HAL_GPIO_Init+0x2c8>)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	089b      	lsrs	r3, r3, #2
 800794a:	3302      	adds	r3, #2
 800794c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	220f      	movs	r2, #15
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	43db      	mvns	r3, r3
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4013      	ands	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800796e:	d019      	beq.n	80079a4 <HAL_GPIO_Init+0x1d4>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a4a      	ldr	r2, [pc, #296]	; (8007a9c <HAL_GPIO_Init+0x2cc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d013      	beq.n	80079a0 <HAL_GPIO_Init+0x1d0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a49      	ldr	r2, [pc, #292]	; (8007aa0 <HAL_GPIO_Init+0x2d0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00d      	beq.n	800799c <HAL_GPIO_Init+0x1cc>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a48      	ldr	r2, [pc, #288]	; (8007aa4 <HAL_GPIO_Init+0x2d4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <HAL_GPIO_Init+0x1c8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a47      	ldr	r2, [pc, #284]	; (8007aa8 <HAL_GPIO_Init+0x2d8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d101      	bne.n	8007994 <HAL_GPIO_Init+0x1c4>
 8007990:	2304      	movs	r3, #4
 8007992:	e008      	b.n	80079a6 <HAL_GPIO_Init+0x1d6>
 8007994:	2307      	movs	r3, #7
 8007996:	e006      	b.n	80079a6 <HAL_GPIO_Init+0x1d6>
 8007998:	2303      	movs	r3, #3
 800799a:	e004      	b.n	80079a6 <HAL_GPIO_Init+0x1d6>
 800799c:	2302      	movs	r3, #2
 800799e:	e002      	b.n	80079a6 <HAL_GPIO_Init+0x1d6>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e000      	b.n	80079a6 <HAL_GPIO_Init+0x1d6>
 80079a4:	2300      	movs	r3, #0
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	f002 0203 	and.w	r2, r2, #3
 80079ac:	0092      	lsls	r2, r2, #2
 80079ae:	4093      	lsls	r3, r2
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80079b6:	4938      	ldr	r1, [pc, #224]	; (8007a98 <HAL_GPIO_Init+0x2c8>)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	3302      	adds	r3, #2
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079c4:	4b39      	ldr	r3, [pc, #228]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4013      	ands	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80079e8:	4a30      	ldr	r2, [pc, #192]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079ee:	4b2f      	ldr	r3, [pc, #188]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4013      	ands	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007a12:	4a26      	ldr	r2, [pc, #152]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007a18:	4b24      	ldr	r3, [pc, #144]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 8007a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	43db      	mvns	r3, r3
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4013      	ands	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 8007a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4013      	ands	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007a6c:	4a0f      	ldr	r2, [pc, #60]	; (8007aac <HAL_GPIO_Init+0x2dc>)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	3301      	adds	r3, #1
 8007a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f aeab 	bne.w	80077e0 <HAL_GPIO_Init+0x10>
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	48000400 	.word	0x48000400
 8007aa0:	48000800 	.word	0x48000800
 8007aa4:	48000c00 	.word	0x48000c00
 8007aa8:	48001000 	.word	0x48001000
 8007aac:	58000800 	.word	0x58000800

08007ab0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	887b      	ldrh	r3, [r7, #2]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
 8007acc:	e001      	b.n	8007ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	807b      	strh	r3, [r7, #2]
 8007aec:	4613      	mov	r3, r2
 8007aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007af0:	787b      	ldrb	r3, [r7, #1]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007af6:	887a      	ldrh	r2, [r7, #2]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007afc:	e002      	b.n	8007b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007afe:	887a      	ldrh	r2, [r7, #2]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e081      	b.n	8007c26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fe f82c 	bl	8005b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	; 0x24
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d107      	bne.n	8007b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	e006      	b.n	8007b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d104      	bne.n	8007baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69d9      	ldr	r1, [r3, #28]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a1a      	ldr	r2, [r3, #32]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0201 	orr.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	817b      	strh	r3, [r7, #10]
 8007c40:	4613      	mov	r3, r2
 8007c42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	f040 80da 	bne.w	8007e06 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_I2C_Master_Transmit+0x30>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e0d3      	b.n	8007e08 <HAL_I2C_Master_Transmit+0x1d8>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c68:	f7fe fa28 	bl	80060bc <HAL_GetTick>
 8007c6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	2319      	movs	r3, #25
 8007c74:	2201      	movs	r2, #1
 8007c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fcbc 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e0be      	b.n	8007e08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2221      	movs	r2, #33	; 0x21
 8007c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2210      	movs	r2, #16
 8007c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	893a      	ldrh	r2, [r7, #8]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2bff      	cmp	r3, #255	; 0xff
 8007cba:	d90e      	bls.n	8007cda <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	22ff      	movs	r2, #255	; 0xff
 8007cc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	8979      	ldrh	r1, [r7, #10]
 8007cca:	4b51      	ldr	r3, [pc, #324]	; (8007e10 <HAL_I2C_Master_Transmit+0x1e0>)
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fecc 	bl	8008a70 <I2C_TransferConfig>
 8007cd8:	e06c      	b.n	8007db4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	8979      	ldrh	r1, [r7, #10]
 8007cec:	4b48      	ldr	r3, [pc, #288]	; (8007e10 <HAL_I2C_Master_Transmit+0x1e0>)
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 febb 	bl	8008a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007cfa:	e05b      	b.n	8007db4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	6a39      	ldr	r1, [r7, #32]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fcc8 	bl	8008696 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e07b      	b.n	8007e08 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	781a      	ldrb	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d034      	beq.n	8007db4 <HAL_I2C_Master_Transmit+0x184>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d130      	bne.n	8007db4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2180      	movs	r1, #128	; 0x80
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fc4b 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e04d      	b.n	8007e08 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2bff      	cmp	r3, #255	; 0xff
 8007d74:	d90e      	bls.n	8007d94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	22ff      	movs	r2, #255	; 0xff
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	8979      	ldrh	r1, [r7, #10]
 8007d84:	2300      	movs	r3, #0
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fe6f 	bl	8008a70 <I2C_TransferConfig>
 8007d92:	e00f      	b.n	8007db4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	8979      	ldrh	r1, [r7, #10]
 8007da6:	2300      	movs	r3, #0
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fe5e 	bl	8008a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d19e      	bne.n	8007cfc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	6a39      	ldr	r1, [r7, #32]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fcae 	bl	8008724 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e01a      	b.n	8007e08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6859      	ldr	r1, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <HAL_I2C_Master_Transmit+0x1e4>)
 8007de6:	400b      	ands	r3, r1
 8007de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e000      	b.n	8007e08 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
  }
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	80002000 	.word	0x80002000
 8007e14:	fe00e800 	.word	0xfe00e800

08007e18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	607a      	str	r2, [r7, #4]
 8007e22:	461a      	mov	r2, r3
 8007e24:	460b      	mov	r3, r1
 8007e26:	817b      	strh	r3, [r7, #10]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	f040 80db 	bne.w	8007ff0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_I2C_Master_Receive+0x30>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e0d4      	b.n	8007ff2 <HAL_I2C_Master_Receive+0x1da>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e50:	f7fe f934 	bl	80060bc <HAL_GetTick>
 8007e54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	2319      	movs	r3, #25
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fbc8 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0bf      	b.n	8007ff2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2222      	movs	r2, #34	; 0x22
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	893a      	ldrh	r2, [r7, #8]
 8007e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2bff      	cmp	r3, #255	; 0xff
 8007ea2:	d90e      	bls.n	8007ec2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	22ff      	movs	r2, #255	; 0xff
 8007ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	8979      	ldrh	r1, [r7, #10]
 8007eb2:	4b52      	ldr	r3, [pc, #328]	; (8007ffc <HAL_I2C_Master_Receive+0x1e4>)
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fdd8 	bl	8008a70 <I2C_TransferConfig>
 8007ec0:	e06d      	b.n	8007f9e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	8979      	ldrh	r1, [r7, #10]
 8007ed4:	4b49      	ldr	r3, [pc, #292]	; (8007ffc <HAL_I2C_Master_Receive+0x1e4>)
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fdc7 	bl	8008a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007ee2:	e05c      	b.n	8007f9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	6a39      	ldr	r1, [r7, #32]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 fc5f 	bl	80087ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e07c      	b.n	8007ff2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d034      	beq.n	8007f9e <HAL_I2C_Master_Receive+0x186>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d130      	bne.n	8007f9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2200      	movs	r2, #0
 8007f44:	2180      	movs	r1, #128	; 0x80
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fb56 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e04d      	b.n	8007ff2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	2bff      	cmp	r3, #255	; 0xff
 8007f5e:	d90e      	bls.n	8007f7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	22ff      	movs	r2, #255	; 0xff
 8007f64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	8979      	ldrh	r1, [r7, #10]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fd7a 	bl	8008a70 <I2C_TransferConfig>
 8007f7c:	e00f      	b.n	8007f9e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	8979      	ldrh	r1, [r7, #10]
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 fd69 	bl	8008a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d19d      	bne.n	8007ee4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	6a39      	ldr	r1, [r7, #32]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fbb9 	bl	8008724 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e01a      	b.n	8007ff2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <HAL_I2C_Master_Receive+0x1e8>)
 8007fd0:	400b      	ands	r3, r1
 8007fd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	e000      	b.n	8007ff2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007ff0:	2302      	movs	r3, #2
  }
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	80002400 	.word	0x80002400
 8008000:	fe00e800 	.word	0xfe00e800

08008004 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	461a      	mov	r2, r3
 8008012:	4603      	mov	r3, r0
 8008014:	817b      	strh	r3, [r7, #10]
 8008016:	460b      	mov	r3, r1
 8008018:	813b      	strh	r3, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b20      	cmp	r3, #32
 8008028:	f040 80f9 	bne.w	800821e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_I2C_Mem_Write+0x34>
 8008032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0ed      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_I2C_Mem_Write+0x4e>
 800804e:	2302      	movs	r3, #2
 8008050:	e0e6      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800805a:	f7fe f82f 	bl	80060bc <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2319      	movs	r3, #25
 8008066:	2201      	movs	r2, #1
 8008068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 fac3 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e0d1      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2221      	movs	r2, #33	; 0x21
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2240      	movs	r2, #64	; 0x40
 8008088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800809c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080a4:	88f8      	ldrh	r0, [r7, #6]
 80080a6:	893a      	ldrh	r2, [r7, #8]
 80080a8:	8979      	ldrh	r1, [r7, #10]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4603      	mov	r3, r0
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 f9d3 	bl	8008460 <I2C_RequestMemoryWrite>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e0a9      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2bff      	cmp	r3, #255	; 0xff
 80080d4:	d90e      	bls.n	80080f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	8979      	ldrh	r1, [r7, #10]
 80080e4:	2300      	movs	r3, #0
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fcbf 	bl	8008a70 <I2C_TransferConfig>
 80080f2:	e00f      	b.n	8008114 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008102:	b2da      	uxtb	r2, r3
 8008104:	8979      	ldrh	r1, [r7, #10]
 8008106:	2300      	movs	r3, #0
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fcae 	bl	8008a70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fabc 	bl	8008696 <I2C_WaitOnTXISFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e07b      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d034      	beq.n	80081cc <HAL_I2C_Mem_Write+0x1c8>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d130      	bne.n	80081cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2200      	movs	r2, #0
 8008172:	2180      	movs	r1, #128	; 0x80
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fa3f 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e04d      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008188:	b29b      	uxth	r3, r3
 800818a:	2bff      	cmp	r3, #255	; 0xff
 800818c:	d90e      	bls.n	80081ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	22ff      	movs	r2, #255	; 0xff
 8008192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008198:	b2da      	uxtb	r2, r3
 800819a:	8979      	ldrh	r1, [r7, #10]
 800819c:	2300      	movs	r3, #0
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fc63 	bl	8008a70 <I2C_TransferConfig>
 80081aa:	e00f      	b.n	80081cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	8979      	ldrh	r1, [r7, #10]
 80081be:	2300      	movs	r3, #0
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fc52 	bl	8008a70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d19e      	bne.n	8008114 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 faa2 	bl	8008724 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e01a      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2220      	movs	r2, #32
 80081f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6859      	ldr	r1, [r3, #4]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <HAL_I2C_Mem_Write+0x224>)
 80081fe:	400b      	ands	r3, r1
 8008200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800821e:	2302      	movs	r3, #2
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	fe00e800 	.word	0xfe00e800

0800822c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	4608      	mov	r0, r1
 8008236:	4611      	mov	r1, r2
 8008238:	461a      	mov	r2, r3
 800823a:	4603      	mov	r3, r0
 800823c:	817b      	strh	r3, [r7, #10]
 800823e:	460b      	mov	r3, r1
 8008240:	813b      	strh	r3, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b20      	cmp	r3, #32
 8008250:	f040 80fd 	bne.w	800844e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_I2C_Mem_Read+0x34>
 800825a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d105      	bne.n	800826c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008266:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e0f1      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <HAL_I2C_Mem_Read+0x4e>
 8008276:	2302      	movs	r3, #2
 8008278:	e0ea      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008282:	f7fd ff1b 	bl	80060bc <HAL_GetTick>
 8008286:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	2319      	movs	r3, #25
 800828e:	2201      	movs	r2, #1
 8008290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f9af 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e0d5      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2222      	movs	r2, #34	; 0x22
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2240      	movs	r2, #64	; 0x40
 80082b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a3a      	ldr	r2, [r7, #32]
 80082be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082cc:	88f8      	ldrh	r0, [r7, #6]
 80082ce:	893a      	ldrh	r2, [r7, #8]
 80082d0:	8979      	ldrh	r1, [r7, #10]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	4603      	mov	r3, r0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f913 	bl	8008508 <I2C_RequestMemoryRead>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0ad      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2bff      	cmp	r3, #255	; 0xff
 80082fc:	d90e      	bls.n	800831c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008308:	b2da      	uxtb	r2, r3
 800830a:	8979      	ldrh	r1, [r7, #10]
 800830c:	4b52      	ldr	r3, [pc, #328]	; (8008458 <HAL_I2C_Mem_Read+0x22c>)
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 fbab 	bl	8008a70 <I2C_TransferConfig>
 800831a:	e00f      	b.n	800833c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832a:	b2da      	uxtb	r2, r3
 800832c:	8979      	ldrh	r1, [r7, #10]
 800832e:	4b4a      	ldr	r3, [pc, #296]	; (8008458 <HAL_I2C_Mem_Read+0x22c>)
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fb9a 	bl	8008a70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	2200      	movs	r2, #0
 8008344:	2104      	movs	r1, #4
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f956 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e07c      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d034      	beq.n	80083fc <HAL_I2C_Mem_Read+0x1d0>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d130      	bne.n	80083fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	2200      	movs	r2, #0
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f927 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e04d      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2bff      	cmp	r3, #255	; 0xff
 80083bc:	d90e      	bls.n	80083dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	22ff      	movs	r2, #255	; 0xff
 80083c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	8979      	ldrh	r1, [r7, #10]
 80083cc:	2300      	movs	r3, #0
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 fb4b 	bl	8008a70 <I2C_TransferConfig>
 80083da:	e00f      	b.n	80083fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	8979      	ldrh	r1, [r7, #10]
 80083ee:	2300      	movs	r3, #0
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fb3a 	bl	8008a70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d19a      	bne.n	800833c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f98a 	bl	8008724 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e01a      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2220      	movs	r2, #32
 8008420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6859      	ldr	r1, [r3, #4]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	4b0b      	ldr	r3, [pc, #44]	; (800845c <HAL_I2C_Mem_Read+0x230>)
 800842e:	400b      	ands	r3, r1
 8008430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	e000      	b.n	8008450 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800844e:	2302      	movs	r3, #2
  }
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	80002400 	.word	0x80002400
 800845c:	fe00e800 	.word	0xfe00e800

08008460 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	4608      	mov	r0, r1
 800846a:	4611      	mov	r1, r2
 800846c:	461a      	mov	r2, r3
 800846e:	4603      	mov	r3, r0
 8008470:	817b      	strh	r3, [r7, #10]
 8008472:	460b      	mov	r3, r1
 8008474:	813b      	strh	r3, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	b2da      	uxtb	r2, r3
 800847e:	8979      	ldrh	r1, [r7, #10]
 8008480:	4b20      	ldr	r3, [pc, #128]	; (8008504 <I2C_RequestMemoryWrite+0xa4>)
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 faf1 	bl	8008a70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	69b9      	ldr	r1, [r7, #24]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f8ff 	bl	8008696 <I2C_WaitOnTXISFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e02c      	b.n	80084fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d105      	bne.n	80084b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084a8:	893b      	ldrh	r3, [r7, #8]
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	629a      	str	r2, [r3, #40]	; 0x28
 80084b2:	e015      	b.n	80084e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084b4:	893b      	ldrh	r3, [r7, #8]
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	69b9      	ldr	r1, [r7, #24]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f8e5 	bl	8008696 <I2C_WaitOnTXISFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e012      	b.n	80084fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084d6:	893b      	ldrh	r3, [r7, #8]
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	2200      	movs	r2, #0
 80084e8:	2180      	movs	r1, #128	; 0x80
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f884 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	80002000 	.word	0x80002000

08008508 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	4608      	mov	r0, r1
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	4603      	mov	r3, r0
 8008518:	817b      	strh	r3, [r7, #10]
 800851a:	460b      	mov	r3, r1
 800851c:	813b      	strh	r3, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	b2da      	uxtb	r2, r3
 8008526:	8979      	ldrh	r1, [r7, #10]
 8008528:	4b20      	ldr	r3, [pc, #128]	; (80085ac <I2C_RequestMemoryRead+0xa4>)
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	2300      	movs	r3, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fa9e 	bl	8008a70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	69b9      	ldr	r1, [r7, #24]
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f8ac 	bl	8008696 <I2C_WaitOnTXISFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e02c      	b.n	80085a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d105      	bne.n	800855a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	b2da      	uxtb	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	629a      	str	r2, [r3, #40]	; 0x28
 8008558:	e015      	b.n	8008586 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	0a1b      	lsrs	r3, r3, #8
 800855e:	b29b      	uxth	r3, r3
 8008560:	b2da      	uxtb	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	69b9      	ldr	r1, [r7, #24]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f892 	bl	8008696 <I2C_WaitOnTXISFlagUntilTimeout>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e012      	b.n	80085a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800857c:	893b      	ldrh	r3, [r7, #8]
 800857e:	b2da      	uxtb	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2200      	movs	r2, #0
 800858e:	2140      	movs	r1, #64	; 0x40
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f831 	bl	80085f8 <I2C_WaitOnFlagUntilTimeout>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	80002000 	.word	0x80002000

080085b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d103      	bne.n	80085ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2200      	movs	r2, #0
 80085cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d007      	beq.n	80085ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	619a      	str	r2, [r3, #24]
  }
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008608:	e031      	b.n	800866e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d02d      	beq.n	800866e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008612:	f7fd fd53 	bl	80060bc <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d122      	bne.n	800866e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	4013      	ands	r3, r2
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	429a      	cmp	r2, r3
 8008644:	d113      	bne.n	800866e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e00f      	b.n	800868e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	429a      	cmp	r2, r3
 800867c:	bf0c      	ite	eq
 800867e:	2301      	moveq	r3, #1
 8008680:	2300      	movne	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	429a      	cmp	r2, r3
 800868a:	d0be      	beq.n	800860a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086a2:	e033      	b.n	800870c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f901 	bl	80088b0 <I2C_IsErrorOccurred>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e031      	b.n	800871c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d025      	beq.n	800870c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c0:	f7fd fcfc 	bl	80060bc <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d302      	bcc.n	80086d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d11a      	bne.n	800870c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d013      	beq.n	800870c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e8:	f043 0220 	orr.w	r2, r3, #32
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e007      	b.n	800871c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b02      	cmp	r3, #2
 8008718:	d1c4      	bne.n	80086a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008730:	e02f      	b.n	8008792 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 f8ba 	bl	80088b0 <I2C_IsErrorOccurred>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e02d      	b.n	80087a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008746:	f7fd fcb9 	bl	80060bc <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	429a      	cmp	r2, r3
 8008754:	d302      	bcc.n	800875c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d11a      	bne.n	8008792 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b20      	cmp	r3, #32
 8008768:	d013      	beq.n	8008792 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876e:	f043 0220 	orr.w	r2, r3, #32
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e007      	b.n	80087a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b20      	cmp	r3, #32
 800879e:	d1c8      	bne.n	8008732 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087b8:	e06b      	b.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 f876 	bl	80088b0 <I2C_IsErrorOccurred>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e069      	b.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f003 0320 	and.w	r3, r3, #32
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d138      	bne.n	800884e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d105      	bne.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e055      	b.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d107      	bne.n	8008814 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2210      	movs	r2, #16
 800880a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2204      	movs	r2, #4
 8008810:	645a      	str	r2, [r3, #68]	; 0x44
 8008812:	e002      	b.n	800881a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2220      	movs	r2, #32
 8008820:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6859      	ldr	r1, [r3, #4]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4b1f      	ldr	r3, [pc, #124]	; (80088ac <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800882e:	400b      	ands	r3, r1
 8008830:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e029      	b.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884e:	f7fd fc35 	bl	80060bc <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	429a      	cmp	r2, r3
 800885c:	d302      	bcc.n	8008864 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d116      	bne.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b04      	cmp	r3, #4
 8008870:	d00f      	beq.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008876:	f043 0220 	orr.w	r2, r3, #32
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e007      	b.n	80088a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b04      	cmp	r3, #4
 800889e:	d18c      	bne.n	80087ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	fe00e800 	.word	0xfe00e800

080088b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d068      	beq.n	80089ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2210      	movs	r2, #16
 80088e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088e4:	e049      	b.n	800897a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d045      	beq.n	800897a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088ee:	f7fd fbe5 	bl	80060bc <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <I2C_IsErrorOccurred+0x54>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d13a      	bne.n	800897a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800890e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008916:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008926:	d121      	bne.n	800896c <I2C_IsErrorOccurred+0xbc>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800892e:	d01d      	beq.n	800896c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008930:	7cfb      	ldrb	r3, [r7, #19]
 8008932:	2b20      	cmp	r3, #32
 8008934:	d01a      	beq.n	800896c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008944:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008946:	f7fd fbb9 	bl	80060bc <HAL_GetTick>
 800894a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800894c:	e00e      	b.n	800896c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800894e:	f7fd fbb5 	bl	80060bc <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b19      	cmp	r3, #25
 800895a:	d907      	bls.n	800896c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f043 0320 	orr.w	r3, r3, #32
 8008962:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800896a:	e006      	b.n	800897a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b20      	cmp	r3, #32
 8008978:	d1e9      	bne.n	800894e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b20      	cmp	r3, #32
 8008986:	d003      	beq.n	8008990 <I2C_IsErrorOccurred+0xe0>
 8008988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0aa      	beq.n	80088e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2220      	movs	r2, #32
 800899e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	f043 0304 	orr.w	r3, r3, #4
 80089a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	f043 0308 	orr.w	r3, r3, #8
 80089e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	f043 0302 	orr.w	r3, r3, #2
 8008a0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01c      	beq.n	8008a5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff fdc3 	bl	80085b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6859      	ldr	r1, [r3, #4]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <I2C_IsErrorOccurred+0x1bc>)
 8008a36:	400b      	ands	r3, r1
 8008a38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3728      	adds	r7, #40	; 0x28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	fe00e800 	.word	0xfe00e800

08008a70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	817b      	strh	r3, [r7, #10]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a82:	897b      	ldrh	r3, [r7, #10]
 8008a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a88:	7a7b      	ldrb	r3, [r7, #9]
 8008a8a:	041b      	lsls	r3, r3, #16
 8008a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	0d5b      	lsrs	r3, r3, #21
 8008aaa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008aae:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <I2C_TransferConfig+0x60>)
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	ea02 0103 	and.w	r1, r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	03ff63ff 	.word	0x03ff63ff

08008ad4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d138      	bne.n	8008b5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e032      	b.n	8008b5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2224      	movs	r2, #36	; 0x24
 8008b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6819      	ldr	r1, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e000      	b.n	8008b5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b5c:	2302      	movs	r3, #2
  }
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d139      	bne.n	8008bf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e033      	b.n	8008bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2224      	movs	r2, #36	; 0x24
 8008b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008bbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e000      	b.n	8008bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008bf4:	2302      	movs	r3, #2
  }
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e041      	b.n	8008c98 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008c1c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f245 5255 	movw	r2, #21845	; 0x5555
 8008c26:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6852      	ldr	r2, [r2, #4]
 8008c30:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6892      	ldr	r2, [r2, #8]
 8008c3a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008c3c:	f7fd fa3e 	bl	80060bc <HAL_GetTick>
 8008c40:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008c42:	e00f      	b.n	8008c64 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008c44:	f7fd fa3a 	bl	80060bc <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b31      	cmp	r3, #49	; 0x31
 8008c50:	d908      	bls.n	8008c64 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e019      	b.n	8008c98 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e8      	bne.n	8008c44 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d005      	beq.n	8008c8c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	68d2      	ldr	r2, [r2, #12]
 8008c88:	611a      	str	r2, [r3, #16]
 8008c8a:	e004      	b.n	8008c96 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008cb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a04      	ldr	r2, [pc, #16]	; (8008cdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cce:	6013      	str	r3, [r2, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	58000400 	.word	0x58000400

08008ce0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	58000400 	.word	0x58000400

08008cfc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d0e:	d101      	bne.n	8008d14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <LL_RCC_HSE_Enable>:
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d32:	6013      	str	r3, [r2, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <LL_RCC_HSE_Disable>:
{
 8008d3e:	b480      	push	{r7}
 8008d40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d50:	6013      	str	r3, [r2, #0]
}
 8008d52:	bf00      	nop
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <LL_RCC_HSE_IsReady>:
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d6e:	d101      	bne.n	8008d74 <LL_RCC_HSE_IsReady+0x18>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <LL_RCC_HSE_IsReady+0x1a>
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <LL_RCC_HSI_Enable>:
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d92:	6013      	str	r3, [r2, #0]
}
 8008d94:	bf00      	nop
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <LL_RCC_HSI_Disable>:
{
 8008d9e:	b480      	push	{r7}
 8008da0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db0:	6013      	str	r3, [r2, #0]
}
 8008db2:	bf00      	nop
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <LL_RCC_HSI_IsReady>:
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dce:	d101      	bne.n	8008dd4 <LL_RCC_HSI_IsReady+0x18>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <LL_RCC_HSI_IsReady+0x1a>
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	061b      	lsls	r3, r3, #24
 8008df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	604b      	str	r3, [r1, #4]
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <LL_RCC_HSI48_Enable>:
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008e22:	bf00      	nop
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <LL_RCC_HSI48_Disable>:
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e3c:	f023 0301 	bic.w	r3, r3, #1
 8008e40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008e44:	bf00      	nop
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <LL_RCC_HSI48_IsReady>:
{
 8008e4e:	b480      	push	{r7}
 8008e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d101      	bne.n	8008e66 <LL_RCC_HSI48_IsReady+0x18>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <LL_RCC_HSI48_IsReady+0x1a>
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <LL_RCC_LSE_Enable>:
{
 8008e72:	b480      	push	{r7}
 8008e74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008e8a:	bf00      	nop
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <LL_RCC_LSE_Disable>:
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ea4:	f023 0301 	bic.w	r3, r3, #1
 8008ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008eac:	bf00      	nop
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LL_RCC_LSE_EnableBypass>:
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ec6:	f043 0304 	orr.w	r3, r3, #4
 8008eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008ece:	bf00      	nop
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LL_RCC_LSE_DisableBypass>:
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ee8:	f023 0304 	bic.w	r3, r3, #4
 8008eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008ef0:	bf00      	nop
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <LL_RCC_LSE_IsReady>:
{
 8008efa:	b480      	push	{r7}
 8008efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d101      	bne.n	8008f12 <LL_RCC_LSE_IsReady+0x18>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <LL_RCC_LSE_IsReady+0x1a>
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <LL_RCC_LSI1_Enable>:
{
 8008f1e:	b480      	push	{r7}
 8008f20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008f36:	bf00      	nop
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <LL_RCC_LSI1_Disable>:
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008f58:	bf00      	nop
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <LL_RCC_LSI1_IsReady>:
{
 8008f62:	b480      	push	{r7}
 8008f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d101      	bne.n	8008f7a <LL_RCC_LSI1_IsReady+0x18>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <LL_RCC_LSI1_IsReady+0x1a>
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <LL_RCC_LSI2_Enable>:
{
 8008f86:	b480      	push	{r7}
 8008f88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f96:	f043 0304 	orr.w	r3, r3, #4
 8008f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008f9e:	bf00      	nop
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <LL_RCC_LSI2_Disable>:
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fb8:	f023 0304 	bic.w	r3, r3, #4
 8008fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008fc0:	bf00      	nop
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <LL_RCC_LSI2_IsReady>:
{
 8008fca:	b480      	push	{r7}
 8008fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	d101      	bne.n	8008fe2 <LL_RCC_LSI2_IsReady+0x18>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <LL_RCC_LSI2_IsReady+0x1a>
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <LL_RCC_LSI2_SetTrimming>:
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ffe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800900a:	4313      	orrs	r3, r2
 800900c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <LL_RCC_MSI_Enable>:
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	6013      	str	r3, [r2, #0]
}
 8009030:	bf00      	nop
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <LL_RCC_MSI_Disable>:
{
 800903a:	b480      	push	{r7}
 800903c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800903e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	6013      	str	r3, [r2, #0]
}
 800904e:	bf00      	nop
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <LL_RCC_MSI_IsReady>:
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800905c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b02      	cmp	r3, #2
 8009068:	d101      	bne.n	800906e <LL_RCC_MSI_IsReady+0x16>
 800906a:	2301      	movs	r3, #1
 800906c:	e000      	b.n	8009070 <LL_RCC_MSI_IsReady+0x18>
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <LL_RCC_MSI_SetRange>:
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800908c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4313      	orrs	r3, r2
 8009094:	600b      	str	r3, [r1, #0]
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <LL_RCC_MSI_GetRange>:
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80090a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2bb0      	cmp	r3, #176	; 0xb0
 80090b8:	d901      	bls.n	80090be <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80090ba:	23b0      	movs	r3, #176	; 0xb0
 80090bc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80090be:	687b      	ldr	r3, [r7, #4]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <LL_RCC_MSI_SetCalibTrimming>:
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80090d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090e6:	4313      	orrs	r3, r2
 80090e8:	604b      	str	r3, [r1, #4]
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <LL_RCC_SetSysClkSource>:
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80090fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f023 0203 	bic.w	r2, r3, #3
 8009108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4313      	orrs	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <LL_RCC_GetSysClkSource>:
{
 800911e:	b480      	push	{r7}
 8009120:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f003 030c 	and.w	r3, r3, #12
}
 800912c:	4618      	mov	r0, r3
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <LL_RCC_SetAHBPrescaler>:
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800913e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4313      	orrs	r3, r2
 8009150:	608b      	str	r3, [r1, #8]
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <LL_C2_RCC_SetAHBPrescaler>:
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8009166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800916a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800916e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <LL_RCC_SetAHB4Prescaler>:
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8009192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009196:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800919a:	f023 020f 	bic.w	r2, r3, #15
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091a6:	4313      	orrs	r3, r2
 80091a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <LL_RCC_SetAPB1Prescaler>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80091c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	608b      	str	r3, [r1, #8]
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <LL_RCC_SetAPB2Prescaler>:
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80091e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80091f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	608b      	str	r3, [r1, #8]
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <LL_RCC_GetAHBPrescaler>:
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800920c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009216:	4618      	mov	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <LL_C2_RCC_GetAHBPrescaler>:
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8009224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009228:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800922c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009230:	4618      	mov	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <LL_RCC_GetAHB4Prescaler>:
{
 800923a:	b480      	push	{r7}
 800923c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800923e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009242:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800924c:	4618      	mov	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <LL_RCC_GetAPB1Prescaler>:
{
 8009256:	b480      	push	{r7}
 8009258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800925a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8009264:	4618      	mov	r0, r3
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <LL_RCC_GetAPB2Prescaler>:
{
 800926e:	b480      	push	{r7}
 8009270:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800927c:	4618      	mov	r0, r3
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8009286:	b480      	push	{r7}
 8009288:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800928a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009298:	6013      	str	r3, [r2, #0]
}
 800929a:	bf00      	nop
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80092a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092b6:	6013      	str	r3, [r2, #0]
}
 80092b8:	bf00      	nop
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80092c2:	b480      	push	{r7}
 80092c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80092c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d4:	d101      	bne.n	80092da <LL_RCC_PLL_IsReady+0x18>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <LL_RCC_PLL_IsReady+0x1a>
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80092e6:	b480      	push	{r7}
 80092e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80092ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	0a1b      	lsrs	r3, r3, #8
 80092f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800930e:	4618      	mov	r0, r3
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800931c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009326:	4618      	mov	r0, r3
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f003 0303 	and.w	r3, r3, #3
}
 800933e:	4618      	mov	r0, r3
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800934c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935a:	d101      	bne.n	8009360 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8009370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009380:	d101      	bne.n	8009386 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8009382:	2301      	movs	r3, #1
 8009384:	e000      	b.n	8009388 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8009392:	b480      	push	{r7}
 8009394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800939a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800939e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a6:	d101      	bne.n	80093ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80093bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ca:	d101      	bne.n	80093d0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e000      	b.n	80093d2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80093e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093ee:	d101      	bne.n	80093f4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b08d      	sub	sp, #52	; 0x34
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e363      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 808d 	beq.w	800953a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009420:	f7ff fe7d 	bl	800911e <LL_RCC_GetSysClkSource>
 8009424:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009426:	f7ff ff83 	bl	8009330 <LL_RCC_PLL_GetMainSource>
 800942a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <HAL_RCC_OscConfig+0x3e>
 8009432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009434:	2b0c      	cmp	r3, #12
 8009436:	d147      	bne.n	80094c8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	2b01      	cmp	r3, #1
 800943c:	d144      	bne.n	80094c8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e347      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800944e:	f7ff fe28 	bl	80090a2 <LL_RCC_MSI_GetRange>
 8009452:	4603      	mov	r3, r0
 8009454:	429c      	cmp	r4, r3
 8009456:	d914      	bls.n	8009482 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fd4b 	bl	8009ef8 <RCC_SetFlashLatencyFromMSIRange>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e336      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fe02 	bl	800907a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fe26 	bl	80090cc <LL_RCC_MSI_SetCalibTrimming>
 8009480:	e013      	b.n	80094aa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fdf7 	bl	800907a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff fe1b 	bl	80090cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fd2c 	bl	8009ef8 <RCC_SetFlashLatencyFromMSIRange>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e317      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80094aa:	f000 fcc9 	bl	8009e40 <HAL_RCC_GetHCLKFreq>
 80094ae:	4603      	mov	r3, r0
 80094b0:	4aa4      	ldr	r2, [pc, #656]	; (8009744 <HAL_RCC_OscConfig+0x344>)
 80094b2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80094b4:	4ba4      	ldr	r3, [pc, #656]	; (8009748 <HAL_RCC_OscConfig+0x348>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fc fc0d 	bl	8005cd8 <HAL_InitTick>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d039      	beq.n	8009538 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e308      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d01e      	beq.n	800950e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80094d0:	f7ff fda4 	bl	800901c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80094d4:	f7fc fdf2 	bl	80060bc <HAL_GetTick>
 80094d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80094da:	e008      	b.n	80094ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094dc:	f7fc fdee 	bl	80060bc <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e2f5      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80094ee:	f7ff fdb3 	bl	8009058 <LL_RCC_MSI_IsReady>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f1      	beq.n	80094dc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fdbc 	bl	800907a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fde0 	bl	80090cc <LL_RCC_MSI_SetCalibTrimming>
 800950c:	e015      	b.n	800953a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800950e:	f7ff fd94 	bl	800903a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009512:	f7fc fdd3 	bl	80060bc <HAL_GetTick>
 8009516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009518:	e008      	b.n	800952c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800951a:	f7fc fdcf 	bl	80060bc <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d901      	bls.n	800952c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e2d6      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800952c:	f7ff fd94 	bl	8009058 <LL_RCC_MSI_IsReady>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1f1      	bne.n	800951a <HAL_RCC_OscConfig+0x11a>
 8009536:	e000      	b.n	800953a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009538:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d047      	beq.n	80095d6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009546:	f7ff fdea 	bl	800911e <LL_RCC_GetSysClkSource>
 800954a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800954c:	f7ff fef0 	bl	8009330 <LL_RCC_PLL_GetMainSource>
 8009550:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	2b08      	cmp	r3, #8
 8009556:	d005      	beq.n	8009564 <HAL_RCC_OscConfig+0x164>
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	2b0c      	cmp	r3, #12
 800955c:	d108      	bne.n	8009570 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d105      	bne.n	8009570 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d134      	bne.n	80095d6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e2b4      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009578:	d102      	bne.n	8009580 <HAL_RCC_OscConfig+0x180>
 800957a:	f7ff fbd1 	bl	8008d20 <LL_RCC_HSE_Enable>
 800957e:	e001      	b.n	8009584 <HAL_RCC_OscConfig+0x184>
 8009580:	f7ff fbdd 	bl	8008d3e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d012      	beq.n	80095b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958c:	f7fc fd96 	bl	80060bc <HAL_GetTick>
 8009590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009594:	f7fc fd92 	bl	80060bc <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b64      	cmp	r3, #100	; 0x64
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e299      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80095a6:	f7ff fbd9 	bl	8008d5c <LL_RCC_HSE_IsReady>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0f1      	beq.n	8009594 <HAL_RCC_OscConfig+0x194>
 80095b0:	e011      	b.n	80095d6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b2:	f7fc fd83 	bl	80060bc <HAL_GetTick>
 80095b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80095b8:	e008      	b.n	80095cc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095ba:	f7fc fd7f 	bl	80060bc <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b64      	cmp	r3, #100	; 0x64
 80095c6:	d901      	bls.n	80095cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e286      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80095cc:	f7ff fbc6 	bl	8008d5c <LL_RCC_HSE_IsReady>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f1      	bne.n	80095ba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d04c      	beq.n	800967c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095e2:	f7ff fd9c 	bl	800911e <LL_RCC_GetSysClkSource>
 80095e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095e8:	f7ff fea2 	bl	8009330 <LL_RCC_PLL_GetMainSource>
 80095ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d005      	beq.n	8009600 <HAL_RCC_OscConfig+0x200>
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	2b0c      	cmp	r3, #12
 80095f8:	d10e      	bne.n	8009618 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d10b      	bne.n	8009618 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e266      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff fbe5 	bl	8008de0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009616:	e031      	b.n	800967c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d019      	beq.n	8009654 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009620:	f7ff fbae 	bl	8008d80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009624:	f7fc fd4a 	bl	80060bc <HAL_GetTick>
 8009628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800962a:	e008      	b.n	800963e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800962c:	f7fc fd46 	bl	80060bc <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	2b02      	cmp	r3, #2
 8009638:	d901      	bls.n	800963e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e24d      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800963e:	f7ff fbbd 	bl	8008dbc <LL_RCC_HSI_IsReady>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0f1      	beq.n	800962c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fbc7 	bl	8008de0 <LL_RCC_HSI_SetCalibTrimming>
 8009652:	e013      	b.n	800967c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009654:	f7ff fba3 	bl	8008d9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009658:	f7fc fd30 	bl	80060bc <HAL_GetTick>
 800965c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800965e:	e008      	b.n	8009672 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009660:	f7fc fd2c 	bl	80060bc <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e233      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009672:	f7ff fba3 	bl	8008dbc <LL_RCC_HSI_IsReady>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f1      	bne.n	8009660 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 80a3 	beq.w	80097dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d076      	beq.n	800978c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d046      	beq.n	8009738 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80096aa:	f7ff fc5a 	bl	8008f62 <LL_RCC_LSI1_IsReady>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d113      	bne.n	80096dc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80096b4:	f7ff fc33 	bl	8008f1e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096b8:	f7fc fd00 	bl	80060bc <HAL_GetTick>
 80096bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80096be:	e008      	b.n	80096d2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80096c0:	f7fc fcfc 	bl	80060bc <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d901      	bls.n	80096d2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e203      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80096d2:	f7ff fc46 	bl	8008f62 <LL_RCC_LSI1_IsReady>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0f1      	beq.n	80096c0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80096dc:	f7ff fc53 	bl	8008f86 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e0:	f7fc fcec 	bl	80060bc <HAL_GetTick>
 80096e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80096e6:	e008      	b.n	80096fa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80096e8:	f7fc fce8 	bl	80060bc <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d901      	bls.n	80096fa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e1ef      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80096fa:	f7ff fc66 	bl	8008fca <LL_RCC_LSI2_IsReady>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0f1      	beq.n	80096e8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fc70 	bl	8008fee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800970e:	f7ff fc17 	bl	8008f40 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009712:	f7fc fcd3 	bl	80060bc <HAL_GetTick>
 8009716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009718:	e008      	b.n	800972c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800971a:	f7fc fccf 	bl	80060bc <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e1d6      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800972c:	f7ff fc19 	bl	8008f62 <LL_RCC_LSI1_IsReady>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1f1      	bne.n	800971a <HAL_RCC_OscConfig+0x31a>
 8009736:	e051      	b.n	80097dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009738:	f7ff fbf1 	bl	8008f1e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973c:	f7fc fcbe 	bl	80060bc <HAL_GetTick>
 8009740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009742:	e00c      	b.n	800975e <HAL_RCC_OscConfig+0x35e>
 8009744:	200000a4 	.word	0x200000a4
 8009748:	200000a8 	.word	0x200000a8
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800974c:	f7fc fcb6 	bl	80060bc <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	2b02      	cmp	r3, #2
 8009758:	d901      	bls.n	800975e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e1bd      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800975e:	f7ff fc00 	bl	8008f62 <LL_RCC_LSI1_IsReady>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0f1      	beq.n	800974c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009768:	f7ff fc1e 	bl	8008fa8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800976c:	e008      	b.n	8009780 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800976e:	f7fc fca5 	bl	80060bc <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b03      	cmp	r3, #3
 800977a:	d901      	bls.n	8009780 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e1ac      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009780:	f7ff fc23 	bl	8008fca <LL_RCC_LSI2_IsReady>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f1      	bne.n	800976e <HAL_RCC_OscConfig+0x36e>
 800978a:	e027      	b.n	80097dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800978c:	f7ff fc0c 	bl	8008fa8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009790:	f7fc fc94 	bl	80060bc <HAL_GetTick>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009798:	f7fc fc90 	bl	80060bc <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e197      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80097aa:	f7ff fc0e 	bl	8008fca <LL_RCC_LSI2_IsReady>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1f1      	bne.n	8009798 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80097b4:	f7ff fbc4 	bl	8008f40 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b8:	f7fc fc80 	bl	80060bc <HAL_GetTick>
 80097bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80097c0:	f7fc fc7c 	bl	80060bc <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e183      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80097d2:	f7ff fbc6 	bl	8008f62 <LL_RCC_LSI1_IsReady>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f1      	bne.n	80097c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d05b      	beq.n	80098a0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097e8:	4ba7      	ldr	r3, [pc, #668]	; (8009a88 <HAL_RCC_OscConfig+0x688>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d114      	bne.n	800981e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80097f4:	f7ff fa64 	bl	8008cc0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097f8:	f7fc fc60 	bl	80060bc <HAL_GetTick>
 80097fc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009800:	f7fc fc5c 	bl	80060bc <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b02      	cmp	r3, #2
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e163      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009812:	4b9d      	ldr	r3, [pc, #628]	; (8009a88 <HAL_RCC_OscConfig+0x688>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800981a:	2b00      	cmp	r3, #0
 800981c:	d0f0      	beq.n	8009800 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d102      	bne.n	800982c <HAL_RCC_OscConfig+0x42c>
 8009826:	f7ff fb24 	bl	8008e72 <LL_RCC_LSE_Enable>
 800982a:	e00c      	b.n	8009846 <HAL_RCC_OscConfig+0x446>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	2b05      	cmp	r3, #5
 8009832:	d104      	bne.n	800983e <HAL_RCC_OscConfig+0x43e>
 8009834:	f7ff fb3f 	bl	8008eb6 <LL_RCC_LSE_EnableBypass>
 8009838:	f7ff fb1b 	bl	8008e72 <LL_RCC_LSE_Enable>
 800983c:	e003      	b.n	8009846 <HAL_RCC_OscConfig+0x446>
 800983e:	f7ff fb29 	bl	8008e94 <LL_RCC_LSE_Disable>
 8009842:	f7ff fb49 	bl	8008ed8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d014      	beq.n	8009878 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800984e:	f7fc fc35 	bl	80060bc <HAL_GetTick>
 8009852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009854:	e00a      	b.n	800986c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009856:	f7fc fc31 	bl	80060bc <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f241 3288 	movw	r2, #5000	; 0x1388
 8009864:	4293      	cmp	r3, r2
 8009866:	d901      	bls.n	800986c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e136      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800986c:	f7ff fb45 	bl	8008efa <LL_RCC_LSE_IsReady>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0ef      	beq.n	8009856 <HAL_RCC_OscConfig+0x456>
 8009876:	e013      	b.n	80098a0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009878:	f7fc fc20 	bl	80060bc <HAL_GetTick>
 800987c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800987e:	e00a      	b.n	8009896 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009880:	f7fc fc1c 	bl	80060bc <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	f241 3288 	movw	r2, #5000	; 0x1388
 800988e:	4293      	cmp	r3, r2
 8009890:	d901      	bls.n	8009896 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e121      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009896:	f7ff fb30 	bl	8008efa <LL_RCC_LSE_IsReady>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1ef      	bne.n	8009880 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d02c      	beq.n	8009906 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d014      	beq.n	80098de <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098b4:	f7ff faa9 	bl	8008e0a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098b8:	f7fc fc00 	bl	80060bc <HAL_GetTick>
 80098bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80098be:	e008      	b.n	80098d2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098c0:	f7fc fbfc 	bl	80060bc <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d901      	bls.n	80098d2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e103      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80098d2:	f7ff fabc 	bl	8008e4e <LL_RCC_HSI48_IsReady>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0f1      	beq.n	80098c0 <HAL_RCC_OscConfig+0x4c0>
 80098dc:	e013      	b.n	8009906 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098de:	f7ff faa5 	bl	8008e2c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098e2:	f7fc fbeb 	bl	80060bc <HAL_GetTick>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80098e8:	e008      	b.n	80098fc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098ea:	f7fc fbe7 	bl	80060bc <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e0ee      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80098fc:	f7ff faa7 	bl	8008e4e <LL_RCC_HSI48_IsReady>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1f1      	bne.n	80098ea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80e4 	beq.w	8009ad8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009910:	f7ff fc05 	bl	800911e <LL_RCC_GetSysClkSource>
 8009914:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	2b02      	cmp	r3, #2
 8009924:	f040 80b4 	bne.w	8009a90 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f003 0203 	and.w	r2, r3, #3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	429a      	cmp	r2, r3
 8009934:	d123      	bne.n	800997e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009940:	429a      	cmp	r2, r3
 8009942:	d11c      	bne.n	800997e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009950:	429a      	cmp	r2, r3
 8009952:	d114      	bne.n	800997e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800995e:	429a      	cmp	r2, r3
 8009960:	d10d      	bne.n	800997e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800996c:	429a      	cmp	r2, r3
 800996e:	d106      	bne.n	800997e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800997a:	429a      	cmp	r2, r3
 800997c:	d05d      	beq.n	8009a3a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d058      	beq.n	8009a36 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e0a1      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009996:	f7ff fc85 	bl	80092a4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800999a:	f7fc fb8f 	bl	80060bc <HAL_GetTick>
 800999e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a2:	f7fc fb8b 	bl	80060bc <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e092      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1ef      	bne.n	80099a2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099c6:	68da      	ldr	r2, [r3, #12]
 80099c8:	4b30      	ldr	r3, [pc, #192]	; (8009a8c <HAL_RCC_OscConfig+0x68c>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099d4:	4311      	orrs	r1, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099da:	0212      	lsls	r2, r2, #8
 80099dc:	4311      	orrs	r1, r2
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80099e2:	4311      	orrs	r1, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80099e8:	4311      	orrs	r1, r2
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80099ee:	430a      	orrs	r2, r1
 80099f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80099f8:	f7ff fc45 	bl	8009286 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80099fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a0c:	f7fc fb56 	bl	80060bc <HAL_GetTick>
 8009a10:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a12:	e008      	b.n	8009a26 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a14:	f7fc fb52 	bl	80060bc <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d901      	bls.n	8009a26 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e059      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d0ef      	beq.n	8009a14 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a34:	e050      	b.n	8009ad8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e04f      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d147      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009a48:	f7ff fc1d 	bl	8009286 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a5c:	f7fc fb2e 	bl	80060bc <HAL_GetTick>
 8009a60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a64:	f7fc fb2a 	bl	80060bc <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e031      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0ef      	beq.n	8009a64 <HAL_RCC_OscConfig+0x664>
 8009a84:	e028      	b.n	8009ad8 <HAL_RCC_OscConfig+0x6d8>
 8009a86:	bf00      	nop
 8009a88:	58000400 	.word	0x58000400
 8009a8c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b0c      	cmp	r3, #12
 8009a94:	d01e      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a96:	f7ff fc05 	bl	80092a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a9a:	f7fc fb0f 	bl	80060bc <HAL_GetTick>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa0:	e008      	b.n	8009ab4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aa2:	f7fc fb0b 	bl	80060bc <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e012      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1ef      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <HAL_RCC_OscConfig+0x6e4>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	60cb      	str	r3, [r1, #12]
 8009ad2:	e001      	b.n	8009ad8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e000      	b.n	8009ada <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3734      	adds	r7, #52	; 0x34
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	eefefffc 	.word	0xeefefffc

08009ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e12d      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009afc:	4b98      	ldr	r3, [pc, #608]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d91b      	bls.n	8009b42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b0a:	4b95      	ldr	r3, [pc, #596]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f023 0207 	bic.w	r2, r3, #7
 8009b12:	4993      	ldr	r1, [pc, #588]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b1a:	f7fc facf 	bl	80060bc <HAL_GetTick>
 8009b1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009b22:	f7fc facb 	bl	80060bc <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e111      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b34:	4b8a      	ldr	r3, [pc, #552]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d1ef      	bne.n	8009b22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d016      	beq.n	8009b7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff faef 	bl	8009136 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009b58:	f7fc fab0 	bl	80060bc <HAL_GetTick>
 8009b5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009b60:	f7fc faac 	bl	80060bc <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e0f2      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009b72:	f7ff fbe9 	bl	8009348 <LL_RCC_IsActiveFlag_HPRE>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0f1      	beq.n	8009b60 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d016      	beq.n	8009bb6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7ff fae6 	bl	800915e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009b92:	f7fc fa93 	bl	80060bc <HAL_GetTick>
 8009b96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009b98:	e008      	b.n	8009bac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009b9a:	f7fc fa8f 	bl	80060bc <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d901      	bls.n	8009bac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e0d5      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009bac:	f7ff fbde 	bl	800936c <LL_RCC_IsActiveFlag_C2HPRE>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0f1      	beq.n	8009b9a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d016      	beq.n	8009bf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff fadf 	bl	800918a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009bcc:	f7fc fa76 	bl	80060bc <HAL_GetTick>
 8009bd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009bd4:	f7fc fa72 	bl	80060bc <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e0b8      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009be6:	f7ff fbd4 	bl	8009392 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f1      	beq.n	8009bd4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d016      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff fad9 	bl	80091b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009c06:	f7fc fa59 	bl	80060bc <HAL_GetTick>
 8009c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009c0e:	f7fc fa55 	bl	80060bc <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e09b      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009c20:	f7ff fbca 	bl	80093b8 <LL_RCC_IsActiveFlag_PPRE1>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f1      	beq.n	8009c0e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d017      	beq.n	8009c66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff facf 	bl	80091e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009c42:	f7fc fa3b 	bl	80060bc <HAL_GetTick>
 8009c46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009c48:	e008      	b.n	8009c5c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009c4a:	f7fc fa37 	bl	80060bc <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d901      	bls.n	8009c5c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e07d      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009c5c:	f7ff fbbe 	bl	80093dc <LL_RCC_IsActiveFlag_PPRE2>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0f1      	beq.n	8009c4a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d043      	beq.n	8009cfa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d106      	bne.n	8009c88 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009c7a:	f7ff f86f 	bl	8008d5c <LL_RCC_HSE_IsReady>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d11e      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e067      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d106      	bne.n	8009c9e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009c90:	f7ff fb17 	bl	80092c2 <LL_RCC_PLL_IsReady>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d113      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e05c      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009ca6:	f7ff f9d7 	bl	8009058 <LL_RCC_MSI_IsReady>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d108      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e051      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009cb4:	f7ff f882 	bl	8008dbc <LL_RCC_HSI_IsReady>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e04a      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff fa15 	bl	80090f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ccc:	f7fc f9f6 	bl	80060bc <HAL_GetTick>
 8009cd0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cd2:	e00a      	b.n	8009cea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cd4:	f7fc f9f2 	bl	80060bc <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e036      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cea:	f7ff fa18 	bl	800911e <LL_RCC_GetSysClkSource>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d1ec      	bne.n	8009cd4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cfa:	4b19      	ldr	r3, [pc, #100]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d21b      	bcs.n	8009d40 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d08:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f023 0207 	bic.w	r2, r3, #7
 8009d10:	4913      	ldr	r1, [pc, #76]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d18:	f7fc f9d0 	bl	80060bc <HAL_GetTick>
 8009d1c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d1e:	e008      	b.n	8009d32 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009d20:	f7fc f9cc 	bl	80060bc <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d901      	bls.n	8009d32 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e012      	b.n	8009d58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <HAL_RCC_ClockConfig+0x278>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d1ef      	bne.n	8009d20 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009d40:	f000 f87e 	bl	8009e40 <HAL_RCC_GetHCLKFreq>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4a07      	ldr	r2, [pc, #28]	; (8009d64 <HAL_RCC_ClockConfig+0x27c>)
 8009d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009d4a:	f7fc f9c3 	bl	80060d4 <HAL_GetTickPrio>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fb ffc1 	bl	8005cd8 <HAL_InitTick>
 8009d56:	4603      	mov	r3, r0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	58004000 	.word	0x58004000
 8009d64:	200000a4 	.word	0x200000a4

08009d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d6e:	f7ff f9d6 	bl	800911e <LL_RCC_GetSysClkSource>
 8009d72:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009d7a:	f7ff f992 	bl	80090a2 <LL_RCC_MSI_GetRange>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	091b      	lsrs	r3, r3, #4
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	4a2b      	ldr	r2, [pc, #172]	; (8009e34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d8c:	60fb      	str	r3, [r7, #12]
 8009d8e:	e04b      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	d102      	bne.n	8009d9c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009d96:	4b28      	ldr	r3, [pc, #160]	; (8009e38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e045      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b08      	cmp	r3, #8
 8009da0:	d10a      	bne.n	8009db8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009da2:	f7fe ffab 	bl	8008cfc <LL_RCC_HSE_IsEnabledDiv2>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d102      	bne.n	8009db2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009dac:	4b22      	ldr	r3, [pc, #136]	; (8009e38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	e03a      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009db2:	4b22      	ldr	r3, [pc, #136]	; (8009e3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e037      	b.n	8009e28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009db8:	f7ff faba 	bl	8009330 <LL_RCC_PLL_GetMainSource>
 8009dbc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d003      	beq.n	8009dcc <HAL_RCC_GetSysClockFreq+0x64>
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x6a>
 8009dca:	e00d      	b.n	8009de8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009dce:	60bb      	str	r3, [r7, #8]
        break;
 8009dd0:	e015      	b.n	8009dfe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009dd2:	f7fe ff93 	bl	8008cfc <LL_RCC_HSE_IsEnabledDiv2>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d102      	bne.n	8009de2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009ddc:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009dde:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009de0:	e00d      	b.n	8009dfe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8009de2:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8009de4:	60bb      	str	r3, [r7, #8]
        break;
 8009de6:	e00a      	b.n	8009dfe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009de8:	f7ff f95b 	bl	80090a2 <LL_RCC_MSI_GetRange>
 8009dec:	4603      	mov	r3, r0
 8009dee:	091b      	lsrs	r3, r3, #4
 8009df0:	f003 030f 	and.w	r3, r3, #15
 8009df4:	4a0f      	ldr	r2, [pc, #60]	; (8009e34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dfa:	60bb      	str	r3, [r7, #8]
        break;
 8009dfc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8009dfe:	f7ff fa72 	bl	80092e6 <LL_RCC_PLL_GetN>
 8009e02:	4602      	mov	r2, r0
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	fb03 f402 	mul.w	r4, r3, r2
 8009e0a:	f7ff fa85 	bl	8009318 <LL_RCC_PLL_GetDivider>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	091b      	lsrs	r3, r3, #4
 8009e12:	3301      	adds	r3, #1
 8009e14:	fbb4 f4f3 	udiv	r4, r4, r3
 8009e18:	f7ff fa72 	bl	8009300 <LL_RCC_PLL_GetR>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	0f5b      	lsrs	r3, r3, #29
 8009e20:	3301      	adds	r3, #1
 8009e22:	fbb4 f3f3 	udiv	r3, r4, r3
 8009e26:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009e28:	68fb      	ldr	r3, [r7, #12]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd90      	pop	{r4, r7, pc}
 8009e32:	bf00      	nop
 8009e34:	08015ed8 	.word	0x08015ed8
 8009e38:	00f42400 	.word	0x00f42400
 8009e3c:	01e84800 	.word	0x01e84800

08009e40 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e40:	b598      	push	{r3, r4, r7, lr}
 8009e42:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009e44:	f7ff ff90 	bl	8009d68 <HAL_RCC_GetSysClockFreq>
 8009e48:	4604      	mov	r4, r0
 8009e4a:	f7ff f9dd 	bl	8009208 <LL_RCC_GetAHBPrescaler>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	091b      	lsrs	r3, r3, #4
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	4a03      	ldr	r2, [pc, #12]	; (8009e64 <HAL_RCC_GetHCLKFreq+0x24>)
 8009e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	bd98      	pop	{r3, r4, r7, pc}
 8009e64:	08015e78 	.word	0x08015e78

08009e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e68:	b598      	push	{r3, r4, r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009e6c:	f7ff ffe8 	bl	8009e40 <HAL_RCC_GetHCLKFreq>
 8009e70:	4604      	mov	r4, r0
 8009e72:	f7ff f9fc 	bl	800926e <LL_RCC_GetAPB2Prescaler>
 8009e76:	4603      	mov	r3, r0
 8009e78:	0adb      	lsrs	r3, r3, #11
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e84:	f003 031f 	and.w	r3, r3, #31
 8009e88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	bd98      	pop	{r3, r4, r7, pc}
 8009e90:	08015eb8 	.word	0x08015eb8

08009e94 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	226f      	movs	r2, #111	; 0x6f
 8009ea2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8009ea4:	f7ff f93b 	bl	800911e <LL_RCC_GetSysClkSource>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009eae:	f7ff f9ab 	bl	8009208 <LL_RCC_GetAHBPrescaler>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8009eb8:	f7ff f9cd 	bl	8009256 <LL_RCC_GetAPB1Prescaler>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8009ec2:	f7ff f9d4 	bl	800926e <LL_RCC_GetAPB2Prescaler>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8009ecc:	f7ff f9a8 	bl	8009220 <LL_C2_RCC_GetAHBPrescaler>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8009ed6:	f7ff f9b0 	bl	800923a <LL_RCC_GetAHB4Prescaler>
 8009eda:	4602      	mov	r2, r0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009ee0:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <HAL_RCC_GetClockConfig+0x60>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0207 	and.w	r2, r3, #7
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	601a      	str	r2, [r3, #0]
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	58004000 	.word	0x58004000

08009ef8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2bb0      	cmp	r3, #176	; 0xb0
 8009f04:	d903      	bls.n	8009f0e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8009f06:	4b15      	ldr	r3, [pc, #84]	; (8009f5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e007      	b.n	8009f1e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	091b      	lsrs	r3, r3, #4
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	4a11      	ldr	r2, [pc, #68]	; (8009f5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f1c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009f1e:	f7ff f98c 	bl	800923a <LL_RCC_GetAHB4Prescaler>
 8009f22:	4603      	mov	r3, r0
 8009f24:	091b      	lsrs	r3, r3, #4
 8009f26:	f003 030f 	and.w	r3, r3, #15
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	; (8009f60 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f36:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f40:	0c9c      	lsrs	r4, r3, #18
 8009f42:	f7fe fecd 	bl	8008ce0 <HAL_PWREx_GetVoltageRange>
 8009f46:	4603      	mov	r3, r0
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f80c 	bl	8009f68 <RCC_SetFlashLatency>
 8009f50:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd90      	pop	{r4, r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	08015ed8 	.word	0x08015ed8
 8009f60:	08015e78 	.word	0x08015e78
 8009f64:	431bde83 	.word	0x431bde83

08009f68 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009f68:	b590      	push	{r4, r7, lr}
 8009f6a:	b093      	sub	sp, #76	; 0x4c
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009f72:	4b37      	ldr	r3, [pc, #220]	; (800a050 <RCC_SetFlashLatency+0xe8>)
 8009f74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009f7e:	4a35      	ldr	r2, [pc, #212]	; (800a054 <RCC_SetFlashLatency+0xec>)
 8009f80:	f107 031c 	add.w	r3, r7, #28
 8009f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009f8a:	4b33      	ldr	r3, [pc, #204]	; (800a058 <RCC_SetFlashLatency+0xf0>)
 8009f8c:	f107 040c 	add.w	r4, r7, #12
 8009f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009f96:	2300      	movs	r3, #0
 8009f98:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa0:	d11a      	bne.n	8009fd8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8009fa6:	e013      	b.n	8009fd0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	3348      	adds	r3, #72	; 0x48
 8009fae:	443b      	add	r3, r7
 8009fb0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d807      	bhi.n	8009fca <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	3348      	adds	r3, #72	; 0x48
 8009fc0:	443b      	add	r3, r7
 8009fc2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009fc6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009fc8:	e020      	b.n	800a00c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fcc:	3301      	adds	r3, #1
 8009fce:	643b      	str	r3, [r7, #64]	; 0x40
 8009fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d9e8      	bls.n	8009fa8 <RCC_SetFlashLatency+0x40>
 8009fd6:	e019      	b.n	800a00c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fdc:	e013      	b.n	800a006 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	3348      	adds	r3, #72	; 0x48
 8009fe4:	443b      	add	r3, r7
 8009fe6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d807      	bhi.n	800a000 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	3348      	adds	r3, #72	; 0x48
 8009ff6:	443b      	add	r3, r7
 8009ff8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009ffc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009ffe:	e005      	b.n	800a00c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a002:	3301      	adds	r3, #1
 800a004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d9e8      	bls.n	8009fde <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a00c:	4b13      	ldr	r3, [pc, #76]	; (800a05c <RCC_SetFlashLatency+0xf4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f023 0207 	bic.w	r2, r3, #7
 800a014:	4911      	ldr	r1, [pc, #68]	; (800a05c <RCC_SetFlashLatency+0xf4>)
 800a016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a018:	4313      	orrs	r3, r2
 800a01a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a01c:	f7fc f84e 	bl	80060bc <HAL_GetTick>
 800a020:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a022:	e008      	b.n	800a036 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a024:	f7fc f84a 	bl	80060bc <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d901      	bls.n	800a036 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e007      	b.n	800a046 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a036:	4b09      	ldr	r3, [pc, #36]	; (800a05c <RCC_SetFlashLatency+0xf4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a040:	429a      	cmp	r2, r3
 800a042:	d1ef      	bne.n	800a024 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	374c      	adds	r7, #76	; 0x4c
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd90      	pop	{r4, r7, pc}
 800a04e:	bf00      	nop
 800a050:	08013560 	.word	0x08013560
 800a054:	08013570 	.word	0x08013570
 800a058:	0801357c 	.word	0x0801357c
 800a05c:	58004000 	.word	0x58004000

0800a060 <LL_RCC_LSE_IsEnabled>:
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b01      	cmp	r3, #1
 800a072:	d101      	bne.n	800a078 <LL_RCC_LSE_IsEnabled+0x18>
 800a074:	2301      	movs	r3, #1
 800a076:	e000      	b.n	800a07a <LL_RCC_LSE_IsEnabled+0x1a>
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <LL_RCC_LSE_IsReady>:
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b02      	cmp	r3, #2
 800a096:	d101      	bne.n	800a09c <LL_RCC_LSE_IsReady+0x18>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <LL_RCC_LSE_IsReady+0x1a>
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <LL_RCC_SetRFWKPClockSource>:
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a0b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a0bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <LL_RCC_SetSMPSClockSource>:
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a0dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	f023 0203 	bic.w	r2, r3, #3
 800a0e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <LL_RCC_SetSMPSPrescaler>:
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a10e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4313      	orrs	r3, r2
 800a116:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <LL_RCC_SetUSARTClockSource>:
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a12c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a134:	f023 0203 	bic.w	r2, r3, #3
 800a138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4313      	orrs	r3, r2
 800a140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <LL_RCC_SetLPUARTClockSource>:
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <LL_RCC_SetI2CClockSource>:
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a188:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	091b      	lsrs	r3, r3, #4
 800a190:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a194:	43db      	mvns	r3, r3
 800a196:	401a      	ands	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a1a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a1aa:	bf00      	nop
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <LL_RCC_SetLPTIMClockSource>:
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a1be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	0c1b      	lsrs	r3, r3, #16
 800a1ca:	041b      	lsls	r3, r3, #16
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	401a      	ands	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	041b      	lsls	r3, r3, #16
 800a1d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a1de:	bf00      	nop
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <LL_RCC_SetSAIClockSource>:
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a1f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4313      	orrs	r3, r2
 800a206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <LL_RCC_SetRNGClockSource>:
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a21e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a226:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a22a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4313      	orrs	r3, r2
 800a232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <LL_RCC_SetCLK48ClockSource>:
{
 800a242:	b480      	push	{r7}
 800a244:	b083      	sub	sp, #12
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a24a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a252:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <LL_RCC_SetUSBClockSource>:
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff ffe3 	bl	800a242 <LL_RCC_SetCLK48ClockSource>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <LL_RCC_SetADCClockSource>:
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a294:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <LL_RCC_SetRTCClockSource>:
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a2b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <LL_RCC_GetRTCClockSource>:
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a2e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <LL_RCC_ForceBackupDomainReset>:
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a2fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a30a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a30e:	bf00      	nop
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a31c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a32c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a330:	bf00      	nop
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <LL_RCC_PLLSAI1_Enable>:
{
 800a33a:	b480      	push	{r7}
 800a33c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a33e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a34c:	6013      	str	r3, [r2, #0]
}
 800a34e:	bf00      	nop
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <LL_RCC_PLLSAI1_Disable>:
{
 800a358:	b480      	push	{r7}
 800a35a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a35c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a36a:	6013      	str	r3, [r2, #0]
}
 800a36c:	bf00      	nop
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <LL_RCC_PLLSAI1_IsReady>:
{
 800a376:	b480      	push	{r7}
 800a378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a37a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a388:	d101      	bne.n	800a38e <LL_RCC_PLLSAI1_IsReady+0x18>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b088      	sub	sp, #32
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d034      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3be:	d021      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a3c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3c4:	d81b      	bhi.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a3c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3ca:	d01d      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a3cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3d0:	d815      	bhi.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00b      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a3d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3da:	d110      	bne.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a3dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ea:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a3ec:	e00d      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 f947 	bl	800a686 <RCCEx_PLLSAI1_ConfigNP>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a3fc:	e005      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	77fb      	strb	r3, [r7, #31]
        break;
 800a402:	e002      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a404:	bf00      	nop
 800a406:	e000      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a40a:	7ffb      	ldrb	r3, [r7, #31]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff fee8 	bl	800a1ea <LL_RCC_SetSAIClockSource>
 800a41a:	e001      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41c:	7ffb      	ldrb	r3, [r7, #31]
 800a41e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d046      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a42c:	f7ff ff56 	bl	800a2dc <LL_RCC_GetRTCClockSource>
 800a430:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d03c      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a43c:	f7fe fc40 	bl	8008cc0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d105      	bne.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff ff30 	bl	800a2b0 <LL_RCC_SetRTCClockSource>
 800a450:	e02e      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a45a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a45c:	f7ff ff4b 	bl	800a2f6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a460:	f7ff ff5a 	bl	800a318 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46e:	4313      	orrs	r3, r2
 800a470:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a47c:	f7ff fdf0 	bl	800a060 <LL_RCC_LSE_IsEnabled>
 800a480:	4603      	mov	r3, r0
 800a482:	2b01      	cmp	r3, #1
 800a484:	d114      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a486:	f7fb fe19 	bl	80060bc <HAL_GetTick>
 800a48a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a48c:	e00b      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a48e:	f7fb fe15 	bl	80060bc <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d902      	bls.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	77fb      	strb	r3, [r7, #31]
              break;
 800a4a4:	e004      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a4a6:	f7ff fded 	bl	800a084 <LL_RCC_LSE_IsReady>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d1ee      	bne.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a4b0:	7ffb      	ldrb	r3, [r7, #31]
 800a4b2:	77bb      	strb	r3, [r7, #30]
 800a4b4:	e001      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b6:	7ffb      	ldrb	r3, [r7, #31]
 800a4b8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d004      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff fe2a 	bl	800a124 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fe35 	bl	800a150 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fe5d 	bl	800a1b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b00      	cmp	r3, #0
 800a506:	d004      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fe52 	bl	800a1b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0304 	and.w	r3, r3, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d004      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fe2a 	bl	800a17c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff fe1f 	bl	800a17c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a546:	2b00      	cmp	r3, #0
 800a548:	d022      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fe8d 	bl	800a26e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a55c:	d107      	bne.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a55e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a56c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a576:	d10b      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 f8dd 	bl	800a73c <RCCEx_PLLSAI1_ConfigNQ>
 800a582:	4603      	mov	r3, r0
 800a584:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a586:	7ffb      	ldrb	r3, [r7, #31]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a58c:	7ffb      	ldrb	r3, [r7, #31]
 800a58e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d02b      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a4:	d008      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5ae:	d003      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d105      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fe2a 	bl	800a216 <LL_RCC_SetRNGClockSource>
 800a5c2:	e00a      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	f7ff fe21 	bl	800a216 <LL_RCC_SetRNGClockSource>
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff fe34 	bl	800a242 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a5e2:	d107      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a5e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d022      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fe3d 	bl	800a284 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a612:	d107      	bne.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a61e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a622:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a62c:	d10b      	bne.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3304      	adds	r3, #4
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f8dd 	bl	800a7f2 <RCCEx_PLLSAI1_ConfigNR>
 800a638:	4603      	mov	r3, r0
 800a63a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a63c:	7ffb      	ldrb	r3, [r7, #31]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800a642:	7ffb      	ldrb	r3, [r7, #31]
 800a644:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d004      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fd26 	bl	800a0a8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d009      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff fd45 	bl	800a0fc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fd2c 	bl	800a0d4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800a67c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3720      	adds	r7, #32
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a692:	f7ff fe61 	bl	800a358 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a696:	f7fb fd11 	bl	80060bc <HAL_GetTick>
 800a69a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a69c:	e009      	b.n	800a6b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a69e:	f7fb fd0d 	bl	80060bc <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d902      	bls.n	800a6b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b0:	e004      	b.n	800a6bc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a6b2:	f7ff fe60 	bl	800a376 <LL_RCC_PLLSAI1_IsReady>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1f0      	bne.n	800a69e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d137      	bne.n	800a732 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a6c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a6da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a6f0:	f7ff fe23 	bl	800a33a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f4:	f7fb fce2 	bl	80060bc <HAL_GetTick>
 800a6f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a6fa:	e009      	b.n	800a710 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6fc:	f7fb fcde 	bl	80060bc <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b02      	cmp	r3, #2
 800a708:	d902      	bls.n	800a710 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	73fb      	strb	r3, [r7, #15]
        break;
 800a70e:	e004      	b.n	800a71a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a710:	f7ff fe31 	bl	800a376 <LL_RCC_PLLSAI1_IsReady>
 800a714:	4603      	mov	r3, r0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d1f0      	bne.n	800a6fc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d108      	bne.n	800a732 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a72e:	4313      	orrs	r3, r2
 800a730:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a748:	f7ff fe06 	bl	800a358 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a74c:	f7fb fcb6 	bl	80060bc <HAL_GetTick>
 800a750:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a752:	e009      	b.n	800a768 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a754:	f7fb fcb2 	bl	80060bc <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d902      	bls.n	800a768 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	73fb      	strb	r3, [r7, #15]
      break;
 800a766:	e004      	b.n	800a772 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a768:	f7ff fe05 	bl	800a376 <LL_RCC_PLLSAI1_IsReady>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f0      	bne.n	800a754 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d137      	bne.n	800a7e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a78c:	4313      	orrs	r3, r2
 800a78e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a7a6:	f7ff fdc8 	bl	800a33a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7aa:	f7fb fc87 	bl	80060bc <HAL_GetTick>
 800a7ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a7b0:	e009      	b.n	800a7c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7b2:	f7fb fc83 	bl	80060bc <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d902      	bls.n	800a7c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	73fb      	strb	r3, [r7, #15]
        break;
 800a7c4:	e004      	b.n	800a7d0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a7c6:	f7ff fdd6 	bl	800a376 <LL_RCC_PLLSAI1_IsReady>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d1f0      	bne.n	800a7b2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d108      	bne.n	800a7e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a7d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a7fe:	f7ff fdab 	bl	800a358 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a802:	f7fb fc5b 	bl	80060bc <HAL_GetTick>
 800a806:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a808:	e009      	b.n	800a81e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a80a:	f7fb fc57 	bl	80060bc <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d902      	bls.n	800a81e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	73fb      	strb	r3, [r7, #15]
      break;
 800a81c:	e004      	b.n	800a828 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a81e:	f7ff fdaa 	bl	800a376 <LL_RCC_PLLSAI1_IsReady>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f0      	bne.n	800a80a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d137      	bne.n	800a89e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a82e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a842:	4313      	orrs	r3, r2
 800a844:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800a846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a858:	4313      	orrs	r3, r2
 800a85a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a85c:	f7ff fd6d 	bl	800a33a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a860:	f7fb fc2c 	bl	80060bc <HAL_GetTick>
 800a864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a866:	e009      	b.n	800a87c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a868:	f7fb fc28 	bl	80060bc <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d902      	bls.n	800a87c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	73fb      	strb	r3, [r7, #15]
        break;
 800a87a:	e004      	b.n	800a886 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a87c:	f7ff fd7b 	bl	800a376 <LL_RCC_PLLSAI1_IsReady>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d1f0      	bne.n	800a868 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d108      	bne.n	800a89e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a88c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a89a:	4313      	orrs	r3, r2
 800a89c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e09f      	b.n	800a9fa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d106      	bne.n	800a8d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7fb f9bc 	bl	8005c4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a8dc:	4b49      	ldr	r3, [pc, #292]	; (800aa04 <HAL_RTC_Init+0x15c>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d07e      	beq.n	800a9e6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	22ca      	movs	r2, #202	; 0xca
 800a8ee:	625a      	str	r2, [r3, #36]	; 0x24
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2253      	movs	r2, #83	; 0x53
 800a8f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fc71 	bl	800b1e0 <RTC_EnterInitMode>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00a      	beq.n	800a91a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	22ff      	movs	r2, #255	; 0xff
 800a90a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2204      	movs	r2, #4
 800a910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	73fb      	strb	r3, [r7, #15]
 800a918:	e067      	b.n	800a9ea <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a92c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6899      	ldr	r1, [r3, #8]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	431a      	orrs	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	431a      	orrs	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	430a      	orrs	r2, r1
 800a94a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	68d2      	ldr	r2, [r2, #12]
 800a954:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6919      	ldr	r1, [r3, #16]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	041a      	lsls	r2, r3, #16
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a978:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0203 	bic.w	r2, r2, #3
 800a988:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	69da      	ldr	r2, [r3, #28]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	431a      	orrs	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f003 0320 	and.w	r3, r3, #32
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d113      	bne.n	800a9d8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fbef 	bl	800b194 <HAL_RTC_WaitForSynchro>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00d      	beq.n	800a9d8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	22ff      	movs	r2, #255	; 0xff
 800a9c2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2204      	movs	r2, #4
 800a9c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e010      	b.n	800a9fa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	22ff      	movs	r2, #255	; 0xff
 800a9de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
 800a9e4:	e001      	b.n	800a9ea <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	40002800 	.word	0x40002800

0800aa08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa08:	b590      	push	{r4, r7, lr}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_RTC_SetTime+0x1a>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	e0b2      	b.n	800ab88 <HAL_RTC_SetTime+0x180>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d126      	bne.n	800aa86 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 fbef 	bl	800b234 <RTC_ByteToBcd2>
 800aa56:	4603      	mov	r3, r0
 800aa58:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fbe8 	bl	800b234 <RTC_ByteToBcd2>
 800aa64:	4603      	mov	r3, r0
 800aa66:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa68:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	789b      	ldrb	r3, [r3, #2]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fbe0 	bl	800b234 <RTC_ByteToBcd2>
 800aa74:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aa76:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	78db      	ldrb	r3, [r3, #3]
 800aa7e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa80:	4313      	orrs	r3, r2
 800aa82:	617b      	str	r3, [r7, #20]
 800aa84:	e018      	b.n	800aab8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2200      	movs	r2, #0
 800aa98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aaa6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aaac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	78db      	ldrb	r3, [r3, #3]
 800aab2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aab4:	4313      	orrs	r3, r2
 800aab6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	22ca      	movs	r2, #202	; 0xca
 800aabe:	625a      	str	r2, [r3, #36]	; 0x24
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2253      	movs	r2, #83	; 0x53
 800aac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fb89 	bl	800b1e0 <RTC_EnterInitMode>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00d      	beq.n	800aaf0 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	22ff      	movs	r2, #255	; 0xff
 800aada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2204      	movs	r2, #4
 800aae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e04b      	b.n	800ab88 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aafa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800aafe:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689a      	ldr	r2, [r3, #8]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab0e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6899      	ldr	r1, [r3, #8]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab36:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d113      	bne.n	800ab6e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 fb24 	bl	800b194 <HAL_RTC_WaitForSynchro>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00d      	beq.n	800ab6e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	22ff      	movs	r2, #255	; 0xff
 800ab58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2204      	movs	r2, #4
 800ab5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e00c      	b.n	800ab88 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	22ff      	movs	r2, #255	; 0xff
 800ab74:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800ab86:	2300      	movs	r3, #0
  }
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd90      	pop	{r4, r7, pc}

0800ab90 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800abbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800abc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	0c1b      	lsrs	r3, r3, #16
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abec:	b2da      	uxtb	r2, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	0c1b      	lsrs	r3, r3, #16
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d11a      	bne.n	800ac3e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fb31 	bl	800b274 <RTC_Bcd2ToByte>
 800ac12:	4603      	mov	r3, r0
 800ac14:	461a      	mov	r2, r3
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	785b      	ldrb	r3, [r3, #1]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fb28 	bl	800b274 <RTC_Bcd2ToByte>
 800ac24:	4603      	mov	r3, r0
 800ac26:	461a      	mov	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	789b      	ldrb	r3, [r3, #2]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fb1f 	bl	800b274 <RTC_Bcd2ToByte>
 800ac36:	4603      	mov	r3, r0
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	0c1b      	lsrs	r3, r3, #16
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	0a1b      	lsrs	r3, r3, #8
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f003 031f 	and.w	r3, r3, #31
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	0b5b      	lsrs	r3, r3, #13
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d11a      	bne.n	800acd8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	78db      	ldrb	r3, [r3, #3]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fae4 	bl	800b274 <RTC_Bcd2ToByte>
 800acac:	4603      	mov	r3, r0
 800acae:	461a      	mov	r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fadb 	bl	800b274 <RTC_Bcd2ToByte>
 800acbe:	4603      	mov	r3, r0
 800acc0:	461a      	mov	r2, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	789b      	ldrb	r3, [r3, #2]
 800acca:	4618      	mov	r0, r3
 800accc:	f000 fad2 	bl	800b274 <RTC_Bcd2ToByte>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ace2:	b590      	push	{r4, r7, lr}
 800ace4:	b089      	sub	sp, #36	; 0x24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d101      	bne.n	800acfc <HAL_RTC_SetAlarm+0x1a>
 800acf8:	2302      	movs	r3, #2
 800acfa:	e109      	b.n	800af10 <HAL_RTC_SetAlarm+0x22e>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d137      	bne.n	800ad82 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2200      	movs	r2, #0
 800ad24:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 fa82 	bl	800b234 <RTC_ByteToBcd2>
 800ad30:	4603      	mov	r3, r0
 800ad32:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fa7b 	bl	800b234 <RTC_ByteToBcd2>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad42:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	789b      	ldrb	r3, [r3, #2]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fa73 	bl	800b234 <RTC_ByteToBcd2>
 800ad4e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	78db      	ldrb	r3, [r3, #3]
 800ad58:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ad5a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 fa65 	bl	800b234 <RTC_ByteToBcd2>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ad6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ad76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e023      	b.n	800adca <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2200      	movs	r2, #0
 800ad94:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	785b      	ldrb	r3, [r3, #1]
 800ada0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ada2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ada8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	78db      	ldrb	r3, [r3, #3]
 800adae:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800adb0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800adb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800adba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800adc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800adc6:	4313      	orrs	r3, r2
 800adc8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	4313      	orrs	r3, r2
 800add4:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	22ca      	movs	r2, #202	; 0xca
 800addc:	625a      	str	r2, [r3, #36]	; 0x24
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2253      	movs	r2, #83	; 0x53
 800ade4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adee:	d141      	bne.n	800ae74 <HAL_RTC_SetAlarm+0x192>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689a      	ldr	r2, [r3, #8]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adfe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ae0e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800ae10:	f7fb f954 	bl	80060bc <HAL_GetTick>
 800ae14:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ae16:	e015      	b.n	800ae44 <HAL_RTC_SetAlarm+0x162>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae18:	f7fb f950 	bl	80060bc <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae26:	d90d      	bls.n	800ae44 <HAL_RTC_SetAlarm+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	22ff      	movs	r2, #255	; 0xff
 800ae2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2203      	movs	r2, #3
 800ae34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e065      	b.n	800af10 <HAL_RTC_SetAlarm+0x22e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0e2      	beq.n	800ae18 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae70:	609a      	str	r2, [r3, #8]
 800ae72:	e040      	b.n	800aef6 <HAL_RTC_SetAlarm+0x214>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ae82:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689a      	ldr	r2, [r3, #8]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae92:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800ae94:	f7fb f912 	bl	80060bc <HAL_GetTick>
 800ae98:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ae9a:	e015      	b.n	800aec8 <HAL_RTC_SetAlarm+0x1e6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae9c:	f7fb f90e 	bl	80060bc <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeaa:	d90d      	bls.n	800aec8 <HAL_RTC_SetAlarm+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	22ff      	movs	r2, #255	; 0xff
 800aeb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e023      	b.n	800af10 <HAL_RTC_SetAlarm+0x22e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0e2      	beq.n	800ae9c <HAL_RTC_SetAlarm+0x1ba>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	22ff      	movs	r2, #255	; 0xff
 800aefc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3724      	adds	r7, #36	; 0x24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd90      	pop	{r4, r7, pc}

0800af18 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b089      	sub	sp, #36	; 0x24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d101      	bne.n	800af32 <HAL_RTC_SetAlarm_IT+0x1a>
 800af2e:	2302      	movs	r3, #2
 800af30:	e129      	b.n	800b186 <HAL_RTC_SetAlarm_IT+0x26e>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2202      	movs	r2, #2
 800af3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d137      	bne.n	800afb8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	d102      	bne.n	800af5c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2200      	movs	r2, #0
 800af5a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f967 	bl	800b234 <RTC_ByteToBcd2>
 800af66:	4603      	mov	r3, r0
 800af68:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 f960 	bl	800b234 <RTC_ByteToBcd2>
 800af74:	4603      	mov	r3, r0
 800af76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800af78:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	789b      	ldrb	r3, [r3, #2]
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f958 	bl	800b234 <RTC_ByteToBcd2>
 800af84:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800af86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	78db      	ldrb	r3, [r3, #3]
 800af8e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800af90:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f94a 	bl	800b234 <RTC_ByteToBcd2>
 800afa0:	4603      	mov	r3, r0
 800afa2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800afa4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800afac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800afb2:	4313      	orrs	r3, r2
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	e023      	b.n	800b000 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d102      	bne.n	800afcc <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2200      	movs	r2, #0
 800afca:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800afd8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800afde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	78db      	ldrb	r3, [r3, #3]
 800afe4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800afe6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aff0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aff6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800affc:	4313      	orrs	r3, r2
 800affe:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	4313      	orrs	r3, r2
 800b00a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	22ca      	movs	r2, #202	; 0xca
 800b012:	625a      	str	r2, [r3, #36]	; 0x24
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2253      	movs	r2, #83	; 0x53
 800b01a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b024:	d14a      	bne.n	800b0bc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b034:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	b2da      	uxtb	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b046:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b048:	f7fb f838 	bl	80060bc <HAL_GetTick>
 800b04c:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b04e:	e015      	b.n	800b07c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b050:	f7fb f834 	bl	80060bc <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b05e:	d90d      	bls.n	800b07c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2203      	movs	r2, #3
 800b06c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e084      	b.n	800b186 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0e2      	beq.n	800b050 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69fa      	ldr	r2, [r7, #28]
 800b090:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0a8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b0b8:	609a      	str	r2, [r3, #8]
 800b0ba:	e049      	b.n	800b150 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b0ca:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b0dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b0de:	f7fa ffed 	bl	80060bc <HAL_GetTick>
 800b0e2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b0e4:	e015      	b.n	800b112 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b0e6:	f7fa ffe9 	bl	80060bc <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0f4:	d90d      	bls.n	800b112 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	22ff      	movs	r2, #255	; 0xff
 800b0fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2203      	movs	r2, #3
 800b102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e039      	b.n	800b186 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	f003 0302 	and.w	r3, r3, #2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0e2      	beq.n	800b0e6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b13e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b14e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b150:	4b0f      	ldr	r3, [pc, #60]	; (800b190 <HAL_RTC_SetAlarm_IT+0x278>)
 800b152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b156:	4a0e      	ldr	r2, [pc, #56]	; (800b190 <HAL_RTC_SetAlarm_IT+0x278>)
 800b158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b15c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800b160:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <HAL_RTC_SetAlarm_IT+0x278>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a0a      	ldr	r2, [pc, #40]	; (800b190 <HAL_RTC_SetAlarm_IT+0x278>)
 800b166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b16a:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	22ff      	movs	r2, #255	; 0xff
 800b172:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3724      	adds	r7, #36	; 0x24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd90      	pop	{r4, r7, pc}
 800b18e:	bf00      	nop
 800b190:	58000800 	.word	0x58000800

0800b194 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b1aa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b1ac:	f7fa ff86 	bl	80060bc <HAL_GetTick>
 800b1b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b1b2:	e009      	b.n	800b1c8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b1b4:	f7fa ff82 	bl	80060bc <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e007      	b.n	800b1d8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f003 0320 	and.w	r3, r3, #32
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0ee      	beq.n	800b1b4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d119      	bne.n	800b22a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b200:	f7fa ff5c 	bl	80060bc <HAL_GetTick>
 800b204:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b206:	e009      	b.n	800b21c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b208:	f7fa ff58 	bl	80060bc <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b216:	d901      	bls.n	800b21c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e007      	b.n	800b22c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0ee      	beq.n	800b208 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800b246:	e005      	b.n	800b254 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	3301      	adds	r3, #1
 800b24c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800b24e:	7afb      	ldrb	r3, [r7, #11]
 800b250:	3b0a      	subs	r3, #10
 800b252:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	2b09      	cmp	r3, #9
 800b258:	d8f6      	bhi.n	800b248 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	b2da      	uxtb	r2, r3
 800b262:	7afb      	ldrb	r3, [r7, #11]
 800b264:	4313      	orrs	r3, r2
 800b266:	b2db      	uxtb	r3, r3
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	091b      	lsrs	r3, r3, #4
 800b282:	b2db      	uxtb	r3, r3
 800b284:	461a      	mov	r2, r3
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	005b      	lsls	r3, r3, #1
 800b28e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	b2da      	uxtb	r2, r3
 800b294:	79fb      	ldrb	r3, [r7, #7]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	4413      	add	r3, r2
 800b29e:	b2db      	uxtb	r3, r3
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e049      	b.n	800b352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f841 	bl	800b35a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f000 f9d6 	bl	800b69c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
	...

0800b370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b01      	cmp	r3, #1
 800b382:	d001      	beq.n	800b388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e036      	b.n	800b3f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2202      	movs	r2, #2
 800b38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f042 0201 	orr.w	r2, r2, #1
 800b39e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a17      	ldr	r2, [pc, #92]	; (800b404 <HAL_TIM_Base_Start_IT+0x94>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d004      	beq.n	800b3b4 <HAL_TIM_Base_Start_IT+0x44>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b2:	d115      	bne.n	800b3e0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	4b13      	ldr	r3, [pc, #76]	; (800b408 <HAL_TIM_Base_Start_IT+0x98>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b06      	cmp	r3, #6
 800b3c4:	d015      	beq.n	800b3f2 <HAL_TIM_Base_Start_IT+0x82>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3cc:	d011      	beq.n	800b3f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 0201 	orr.w	r2, r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3de:	e008      	b.n	800b3f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 0201 	orr.w	r2, r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	e000      	b.n	800b3f4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40012c00 	.word	0x40012c00
 800b408:	00010007 	.word	0x00010007

0800b40c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	f003 0302 	and.w	r3, r3, #2
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d122      	bne.n	800b468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f003 0302 	and.w	r3, r3, #2
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d11b      	bne.n	800b468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f06f 0202 	mvn.w	r2, #2
 800b438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f905 	bl	800b65e <HAL_TIM_IC_CaptureCallback>
 800b454:	e005      	b.n	800b462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f8f7 	bl	800b64a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f908 	bl	800b672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f003 0304 	and.w	r3, r3, #4
 800b472:	2b04      	cmp	r3, #4
 800b474:	d122      	bne.n	800b4bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	f003 0304 	and.w	r3, r3, #4
 800b480:	2b04      	cmp	r3, #4
 800b482:	d11b      	bne.n	800b4bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f06f 0204 	mvn.w	r2, #4
 800b48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2202      	movs	r2, #2
 800b492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f8db 	bl	800b65e <HAL_TIM_IC_CaptureCallback>
 800b4a8:	e005      	b.n	800b4b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f8cd 	bl	800b64a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f8de 	bl	800b672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0308 	and.w	r3, r3, #8
 800b4c6:	2b08      	cmp	r3, #8
 800b4c8:	d122      	bne.n	800b510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d11b      	bne.n	800b510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0208 	mvn.w	r2, #8
 800b4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2204      	movs	r2, #4
 800b4e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f8b1 	bl	800b65e <HAL_TIM_IC_CaptureCallback>
 800b4fc:	e005      	b.n	800b50a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f8a3 	bl	800b64a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f8b4 	bl	800b672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0310 	and.w	r3, r3, #16
 800b51a:	2b10      	cmp	r3, #16
 800b51c:	d122      	bne.n	800b564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	2b10      	cmp	r3, #16
 800b52a:	d11b      	bne.n	800b564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0210 	mvn.w	r2, #16
 800b534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2208      	movs	r2, #8
 800b53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f887 	bl	800b65e <HAL_TIM_IC_CaptureCallback>
 800b550:	e005      	b.n	800b55e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f879 	bl	800b64a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f88a 	bl	800b672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d10e      	bne.n	800b590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d107      	bne.n	800b590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f06f 0201 	mvn.w	r2, #1
 800b588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7f9 fa0c 	bl	80049a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59a:	2b80      	cmp	r3, #128	; 0x80
 800b59c:	d10e      	bne.n	800b5bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a8:	2b80      	cmp	r3, #128	; 0x80
 800b5aa:	d107      	bne.n	800b5bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f8de 	bl	800b778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ca:	d10e      	bne.n	800b5ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d6:	2b80      	cmp	r3, #128	; 0x80
 800b5d8:	d107      	bne.n	800b5ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f8d1 	bl	800b78c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	d10e      	bne.n	800b616 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b602:	2b40      	cmp	r3, #64	; 0x40
 800b604:	d107      	bne.n	800b616 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f838 	bl	800b686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	f003 0320 	and.w	r3, r3, #32
 800b620:	2b20      	cmp	r3, #32
 800b622:	d10e      	bne.n	800b642 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b20      	cmp	r3, #32
 800b630:	d107      	bne.n	800b642 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f06f 0220 	mvn.w	r2, #32
 800b63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f891 	bl	800b764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b083      	sub	sp, #12
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b65e:	b480      	push	{r7}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a2a      	ldr	r2, [pc, #168]	; (800b758 <TIM_Base_SetConfig+0xbc>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d003      	beq.n	800b6bc <TIM_Base_SetConfig+0x20>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ba:	d108      	bne.n	800b6ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a21      	ldr	r2, [pc, #132]	; (800b758 <TIM_Base_SetConfig+0xbc>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00b      	beq.n	800b6ee <TIM_Base_SetConfig+0x52>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6dc:	d007      	beq.n	800b6ee <TIM_Base_SetConfig+0x52>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a1e      	ldr	r2, [pc, #120]	; (800b75c <TIM_Base_SetConfig+0xc0>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_Base_SetConfig+0x52>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a1d      	ldr	r2, [pc, #116]	; (800b760 <TIM_Base_SetConfig+0xc4>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d108      	bne.n	800b700 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a0c      	ldr	r2, [pc, #48]	; (800b758 <TIM_Base_SetConfig+0xbc>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d007      	beq.n	800b73c <TIM_Base_SetConfig+0xa0>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a0b      	ldr	r2, [pc, #44]	; (800b75c <TIM_Base_SetConfig+0xc0>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d003      	beq.n	800b73c <TIM_Base_SetConfig+0xa0>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a0a      	ldr	r2, [pc, #40]	; (800b760 <TIM_Base_SetConfig+0xc4>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d103      	bne.n	800b744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	691a      	ldr	r2, [r3, #16]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	615a      	str	r2, [r3, #20]
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40012c00 	.word	0x40012c00
 800b75c:	40014400 	.word	0x40014400
 800b760:	40014800 	.word	0x40014800

0800b764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <__NVIC_SetPriority>:
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	6039      	str	r1, [r7, #0]
 800b7aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	db0a      	blt.n	800b7ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	490c      	ldr	r1, [pc, #48]	; (800b7ec <__NVIC_SetPriority+0x4c>)
 800b7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7be:	0112      	lsls	r2, r2, #4
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	440b      	add	r3, r1
 800b7c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b7c8:	e00a      	b.n	800b7e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	4908      	ldr	r1, [pc, #32]	; (800b7f0 <__NVIC_SetPriority+0x50>)
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	f003 030f 	and.w	r3, r3, #15
 800b7d6:	3b04      	subs	r3, #4
 800b7d8:	0112      	lsls	r2, r2, #4
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	440b      	add	r3, r1
 800b7de:	761a      	strb	r2, [r3, #24]
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	e000e100 	.word	0xe000e100
 800b7f0:	e000ed00 	.word	0xe000ed00

0800b7f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <SysTick_Handler+0x1c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b7fc:	f001 fd28 	bl	800d250 <xTaskGetSchedulerState>
 800b800:	4603      	mov	r3, r0
 800b802:	2b01      	cmp	r3, #1
 800b804:	d001      	beq.n	800b80a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b806:	f002 fb0f 	bl	800de28 <xPortSysTickHandler>
  }
}
 800b80a:	bf00      	nop
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	e000e010 	.word	0xe000e010

0800b814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b818:	2100      	movs	r1, #0
 800b81a:	f06f 0004 	mvn.w	r0, #4
 800b81e:	f7ff ffbf 	bl	800b7a0 <__NVIC_SetPriority>
#endif
}
 800b822:	bf00      	nop
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b82e:	f3ef 8305 	mrs	r3, IPSR
 800b832:	603b      	str	r3, [r7, #0]
  return(result);
 800b834:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b83a:	f06f 0305 	mvn.w	r3, #5
 800b83e:	607b      	str	r3, [r7, #4]
 800b840:	e00c      	b.n	800b85c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b842:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <osKernelInitialize+0x44>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b84a:	4b08      	ldr	r3, [pc, #32]	; (800b86c <osKernelInitialize+0x44>)
 800b84c:	2201      	movs	r2, #1
 800b84e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b850:	2300      	movs	r3, #0
 800b852:	607b      	str	r3, [r7, #4]
 800b854:	e002      	b.n	800b85c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b856:	f04f 33ff 	mov.w	r3, #4294967295
 800b85a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b85c:	687b      	ldr	r3, [r7, #4]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000908 	.word	0x20000908

0800b870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b876:	f3ef 8305 	mrs	r3, IPSR
 800b87a:	603b      	str	r3, [r7, #0]
  return(result);
 800b87c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b882:	f06f 0305 	mvn.w	r3, #5
 800b886:	607b      	str	r3, [r7, #4]
 800b888:	e010      	b.n	800b8ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b88a:	4b0b      	ldr	r3, [pc, #44]	; (800b8b8 <osKernelStart+0x48>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d109      	bne.n	800b8a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b892:	f7ff ffbf 	bl	800b814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b896:	4b08      	ldr	r3, [pc, #32]	; (800b8b8 <osKernelStart+0x48>)
 800b898:	2202      	movs	r2, #2
 800b89a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b89c:	f001 f87c 	bl	800c998 <vTaskStartScheduler>
      stat = osOK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	607b      	str	r3, [r7, #4]
 800b8a4:	e002      	b.n	800b8ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8ac:	687b      	ldr	r3, [r7, #4]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000908 	.word	0x20000908

0800b8bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08e      	sub	sp, #56	; 0x38
 800b8c0:	af04      	add	r7, sp, #16
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8cc:	f3ef 8305 	mrs	r3, IPSR
 800b8d0:	617b      	str	r3, [r7, #20]
  return(result);
 800b8d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d17e      	bne.n	800b9d6 <osThreadNew+0x11a>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d07b      	beq.n	800b9d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b8de:	2380      	movs	r3, #128	; 0x80
 800b8e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b8e2:	2318      	movs	r3, #24
 800b8e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d045      	beq.n	800b982 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <osThreadNew+0x48>
        name = attr->name;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <osThreadNew+0x6e>
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	2b38      	cmp	r3, #56	; 0x38
 800b91c:	d805      	bhi.n	800b92a <osThreadNew+0x6e>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <osThreadNew+0x72>
        return (NULL);
 800b92a:	2300      	movs	r3, #0
 800b92c:	e054      	b.n	800b9d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	089b      	lsrs	r3, r3, #2
 800b93c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00e      	beq.n	800b964 <osThreadNew+0xa8>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	2bbb      	cmp	r3, #187	; 0xbb
 800b94c:	d90a      	bls.n	800b964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b952:	2b00      	cmp	r3, #0
 800b954:	d006      	beq.n	800b964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d002      	beq.n	800b964 <osThreadNew+0xa8>
        mem = 1;
 800b95e:	2301      	movs	r3, #1
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	e010      	b.n	800b986 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10c      	bne.n	800b986 <osThreadNew+0xca>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d108      	bne.n	800b986 <osThreadNew+0xca>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <osThreadNew+0xca>
          mem = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	61bb      	str	r3, [r7, #24]
 800b980:	e001      	b.n	800b986 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d110      	bne.n	800b9ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b994:	9202      	str	r2, [sp, #8]
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	6a3a      	ldr	r2, [r7, #32]
 800b9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 fe0c 	bl	800c5c0 <xTaskCreateStatic>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	e013      	b.n	800b9d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d110      	bne.n	800b9d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	f107 0310 	add.w	r3, r7, #16
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 fe57 	bl	800c67a <xTaskCreate>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d001      	beq.n	800b9d6 <osThreadNew+0x11a>
            hTask = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b9d6:	693b      	ldr	r3, [r7, #16]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3728      	adds	r7, #40	; 0x28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9e8:	f3ef 8305 	mrs	r3, IPSR
 800b9ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <osDelay+0x1c>
    stat = osErrorISR;
 800b9f4:	f06f 0305 	mvn.w	r3, #5
 800b9f8:	60fb      	str	r3, [r7, #12]
 800b9fa:	e007      	b.n	800ba0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 ff92 	bl	800c930 <vTaskDelay>
    }
  }

  return (stat);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4a07      	ldr	r2, [pc, #28]	; (800ba44 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	4a06      	ldr	r2, [pc, #24]	; (800ba48 <vApplicationGetIdleTaskMemory+0x30>)
 800ba2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2280      	movs	r2, #128	; 0x80
 800ba34:	601a      	str	r2, [r3, #0]
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	2000090c 	.word	0x2000090c
 800ba48:	200009c8 	.word	0x200009c8

0800ba4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4a07      	ldr	r2, [pc, #28]	; (800ba78 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	4a06      	ldr	r2, [pc, #24]	; (800ba7c <vApplicationGetTimerTaskMemory+0x30>)
 800ba62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba6a:	601a      	str	r2, [r3, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	20000bc8 	.word	0x20000bc8
 800ba7c:	20000c84 	.word	0x20000c84

0800ba80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f103 0208 	add.w	r2, r3, #8
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f04f 32ff 	mov.w	r2, #4294967295
 800ba98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f103 0208 	add.w	r2, r3, #8
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f103 0208 	add.w	r2, r3, #8
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bace:	bf00      	nop
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]
}
 800bb16:	bf00      	nop
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb38:	d103      	bne.n	800bb42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	e00c      	b.n	800bb5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3308      	adds	r3, #8
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	e002      	b.n	800bb50 <vListInsert+0x2e>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d2f6      	bcs.n	800bb4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	601a      	str	r2, [r3, #0]
}
 800bb88:	bf00      	nop
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	6892      	ldr	r2, [r2, #8]
 800bbaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6852      	ldr	r2, [r2, #4]
 800bbb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d103      	bne.n	800bbc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	1e5a      	subs	r2, r3, #1
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc12:	f002 f877 	bl	800dd04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	68f9      	ldr	r1, [r7, #12]
 800bc20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc22:	fb01 f303 	mul.w	r3, r1, r3
 800bc26:	441a      	add	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc42:	3b01      	subs	r3, #1
 800bc44:	68f9      	ldr	r1, [r7, #12]
 800bc46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	22ff      	movs	r2, #255	; 0xff
 800bc56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	22ff      	movs	r2, #255	; 0xff
 800bc5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d114      	bne.n	800bc92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d01a      	beq.n	800bca6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3310      	adds	r3, #16
 800bc74:	4618      	mov	r0, r3
 800bc76:	f001 f929 	bl	800cecc <xTaskRemoveFromEventList>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d012      	beq.n	800bca6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc80:	4b0c      	ldr	r3, [pc, #48]	; (800bcb4 <xQueueGenericReset+0xcc>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	e009      	b.n	800bca6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3310      	adds	r3, #16
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fef2 	bl	800ba80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3324      	adds	r3, #36	; 0x24
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff feed 	bl	800ba80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bca6:	f002 f85d 	bl	800dd64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcaa:	2301      	movs	r3, #1
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	e000ed04 	.word	0xe000ed04

0800bcb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08e      	sub	sp, #56	; 0x38
 800bcbc:	af02      	add	r7, sp, #8
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10a      	bne.n	800bce2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d002      	beq.n	800bd0a <xQueueGenericCreateStatic+0x52>
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <xQueueGenericCreateStatic+0x56>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e000      	b.n	800bd10 <xQueueGenericCreateStatic+0x58>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10a      	bne.n	800bd2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	623b      	str	r3, [r7, #32]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <xQueueGenericCreateStatic+0x7e>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <xQueueGenericCreateStatic+0x82>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <xQueueGenericCreateStatic+0x84>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10a      	bne.n	800bd56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	61fb      	str	r3, [r7, #28]
}
 800bd52:	bf00      	nop
 800bd54:	e7fe      	b.n	800bd54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd56:	2350      	movs	r3, #80	; 0x50
 800bd58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b50      	cmp	r3, #80	; 0x50
 800bd5e:	d00a      	beq.n	800bd76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	61bb      	str	r3, [r7, #24]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00d      	beq.n	800bd9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	4613      	mov	r3, r2
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f805 	bl	800bda8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3730      	adds	r7, #48	; 0x30
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d103      	bne.n	800bdc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	e002      	b.n	800bdca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	69b8      	ldr	r0, [r7, #24]
 800bdda:	f7ff ff05 	bl	800bbe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	78fa      	ldrb	r2, [r7, #3]
 800bde2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08e      	sub	sp, #56	; 0x38
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bdfe:	2300      	movs	r3, #0
 800be00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <xQueueGenericSend+0x32>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <xQueueGenericSend+0x40>
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <xQueueGenericSend+0x44>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <xQueueGenericSend+0x46>
 800be34:	2300      	movs	r3, #0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <xQueueGenericSend+0x60>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b02      	cmp	r3, #2
 800be54:	d103      	bne.n	800be5e <xQueueGenericSend+0x6e>
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <xQueueGenericSend+0x72>
 800be5e:	2301      	movs	r3, #1
 800be60:	e000      	b.n	800be64 <xQueueGenericSend+0x74>
 800be62:	2300      	movs	r3, #0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <xQueueGenericSend+0x8e>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	623b      	str	r3, [r7, #32]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be7e:	f001 f9e7 	bl	800d250 <xTaskGetSchedulerState>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d102      	bne.n	800be8e <xQueueGenericSend+0x9e>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <xQueueGenericSend+0xa2>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueGenericSend+0xa4>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueGenericSend+0xbe>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61fb      	str	r3, [r7, #28]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800beae:	f001 ff29 	bl	800dd04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beba:	429a      	cmp	r2, r3
 800bebc:	d302      	bcc.n	800bec4 <xQueueGenericSend+0xd4>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d129      	bne.n	800bf18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	68b9      	ldr	r1, [r7, #8]
 800bec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beca:	f000 fa0b 	bl	800c2e4 <prvCopyDataToQueue>
 800bece:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d010      	beq.n	800befa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	3324      	adds	r3, #36	; 0x24
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fff5 	bl	800cecc <xTaskRemoveFromEventList>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d013      	beq.n	800bf10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bee8:	4b3f      	ldr	r3, [pc, #252]	; (800bfe8 <xQueueGenericSend+0x1f8>)
 800beea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	e00a      	b.n	800bf10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d007      	beq.n	800bf10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf00:	4b39      	ldr	r3, [pc, #228]	; (800bfe8 <xQueueGenericSend+0x1f8>)
 800bf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf10:	f001 ff28 	bl	800dd64 <vPortExitCritical>
				return pdPASS;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e063      	b.n	800bfe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d103      	bne.n	800bf26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf1e:	f001 ff21 	bl	800dd64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	e05c      	b.n	800bfe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d106      	bne.n	800bf3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf2c:	f107 0314 	add.w	r3, r7, #20
 800bf30:	4618      	mov	r0, r3
 800bf32:	f001 f82f 	bl	800cf94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf36:	2301      	movs	r3, #1
 800bf38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf3a:	f001 ff13 	bl	800dd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf3e:	f000 fd9b 	bl	800ca78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf42:	f001 fedf 	bl	800dd04 <vPortEnterCritical>
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf4c:	b25b      	sxtb	r3, r3
 800bf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf52:	d103      	bne.n	800bf5c <xQueueGenericSend+0x16c>
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf62:	b25b      	sxtb	r3, r3
 800bf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf68:	d103      	bne.n	800bf72 <xQueueGenericSend+0x182>
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf72:	f001 fef7 	bl	800dd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf76:	1d3a      	adds	r2, r7, #4
 800bf78:	f107 0314 	add.w	r3, r7, #20
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 f81e 	bl	800cfc0 <xTaskCheckForTimeOut>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d124      	bne.n	800bfd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf8c:	f000 faa2 	bl	800c4d4 <prvIsQueueFull>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d018      	beq.n	800bfc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	3310      	adds	r3, #16
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 ff44 	bl	800ce2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa6:	f000 fa2d 	bl	800c404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfaa:	f000 fd73 	bl	800ca94 <xTaskResumeAll>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f47f af7c 	bne.w	800beae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <xQueueGenericSend+0x1f8>)
 800bfb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	e772      	b.n	800beae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfca:	f000 fa1b 	bl	800c404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfce:	f000 fd61 	bl	800ca94 <xTaskResumeAll>
 800bfd2:	e76c      	b.n	800beae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bfd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfd6:	f000 fa15 	bl	800c404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfda:	f000 fd5b 	bl	800ca94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3738      	adds	r7, #56	; 0x38
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b090      	sub	sp, #64	; 0x40
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c016:	bf00      	nop
 800c018:	e7fe      	b.n	800c018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d103      	bne.n	800c028 <xQueueGenericSendFromISR+0x3c>
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <xQueueGenericSendFromISR+0x40>
 800c028:	2301      	movs	r3, #1
 800c02a:	e000      	b.n	800c02e <xQueueGenericSendFromISR+0x42>
 800c02c:	2300      	movs	r3, #0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d103      	bne.n	800c056 <xQueueGenericSendFromISR+0x6a>
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c052:	2b01      	cmp	r3, #1
 800c054:	d101      	bne.n	800c05a <xQueueGenericSendFromISR+0x6e>
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <xQueueGenericSendFromISR+0x70>
 800c05a:	2300      	movs	r3, #0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	623b      	str	r3, [r7, #32]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c076:	f001 ff27 	bl	800dec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c07a:	f3ef 8211 	mrs	r2, BASEPRI
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	61fa      	str	r2, [r7, #28]
 800c090:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c092:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c094:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d302      	bcc.n	800c0a8 <xQueueGenericSendFromISR+0xbc>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d12f      	bne.n	800c108 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0be:	f000 f911 	bl	800c2e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d112      	bne.n	800c0f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d016      	beq.n	800c102 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	3324      	adds	r3, #36	; 0x24
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fef7 	bl	800cecc <xTaskRemoveFromEventList>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00e      	beq.n	800c102 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00b      	beq.n	800c102 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	e007      	b.n	800c102 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	b25a      	sxtb	r2, r3
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c102:	2301      	movs	r3, #1
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c106:	e001      	b.n	800c10c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c108:	2300      	movs	r3, #0
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c116:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3740      	adds	r7, #64	; 0x40
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b08c      	sub	sp, #48	; 0x30
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c130:	2300      	movs	r3, #0
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d10a      	bne.n	800c154 <xQueueReceive+0x30>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	623b      	str	r3, [r7, #32]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d103      	bne.n	800c162 <xQueueReceive+0x3e>
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <xQueueReceive+0x42>
 800c162:	2301      	movs	r3, #1
 800c164:	e000      	b.n	800c168 <xQueueReceive+0x44>
 800c166:	2300      	movs	r3, #0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10a      	bne.n	800c182 <xQueueReceive+0x5e>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	61fb      	str	r3, [r7, #28]
}
 800c17e:	bf00      	nop
 800c180:	e7fe      	b.n	800c180 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c182:	f001 f865 	bl	800d250 <xTaskGetSchedulerState>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <xQueueReceive+0x6e>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <xQueueReceive+0x72>
 800c192:	2301      	movs	r3, #1
 800c194:	e000      	b.n	800c198 <xQueueReceive+0x74>
 800c196:	2300      	movs	r3, #0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <xQueueReceive+0x8e>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	61bb      	str	r3, [r7, #24]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1b2:	f001 fda7 	bl	800dd04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d01f      	beq.n	800c202 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c6:	f000 f8f7 	bl	800c3b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	1e5a      	subs	r2, r3, #1
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00f      	beq.n	800c1fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	3310      	adds	r3, #16
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 fe74 	bl	800cecc <xTaskRemoveFromEventList>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1ea:	4b3d      	ldr	r3, [pc, #244]	; (800c2e0 <xQueueReceive+0x1bc>)
 800c1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f0:	601a      	str	r2, [r3, #0]
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1fa:	f001 fdb3 	bl	800dd64 <vPortExitCritical>
				return pdPASS;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e069      	b.n	800c2d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d103      	bne.n	800c210 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c208:	f001 fdac 	bl	800dd64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c20c:	2300      	movs	r3, #0
 800c20e:	e062      	b.n	800c2d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c216:	f107 0310 	add.w	r3, r7, #16
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 feba 	bl	800cf94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c220:	2301      	movs	r3, #1
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c224:	f001 fd9e 	bl	800dd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c228:	f000 fc26 	bl	800ca78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c22c:	f001 fd6a 	bl	800dd04 <vPortEnterCritical>
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c236:	b25b      	sxtb	r3, r3
 800c238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23c:	d103      	bne.n	800c246 <xQueueReceive+0x122>
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	2200      	movs	r2, #0
 800c242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c24c:	b25b      	sxtb	r3, r3
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c252:	d103      	bne.n	800c25c <xQueueReceive+0x138>
 800c254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c25c:	f001 fd82 	bl	800dd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c260:	1d3a      	adds	r2, r7, #4
 800c262:	f107 0310 	add.w	r3, r7, #16
 800c266:	4611      	mov	r1, r2
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 fea9 	bl	800cfc0 <xTaskCheckForTimeOut>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d123      	bne.n	800c2bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c276:	f000 f917 	bl	800c4a8 <prvIsQueueEmpty>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d017      	beq.n	800c2b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	3324      	adds	r3, #36	; 0x24
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	4611      	mov	r1, r2
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fdcf 	bl	800ce2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c290:	f000 f8b8 	bl	800c404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c294:	f000 fbfe 	bl	800ca94 <xTaskResumeAll>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d189      	bne.n	800c1b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c29e:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <xQueueReceive+0x1bc>)
 800c2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	e780      	b.n	800c1b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2b2:	f000 f8a7 	bl	800c404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2b6:	f000 fbed 	bl	800ca94 <xTaskResumeAll>
 800c2ba:	e77a      	b.n	800c1b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2be:	f000 f8a1 	bl	800c404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2c2:	f000 fbe7 	bl	800ca94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c8:	f000 f8ee 	bl	800c4a8 <prvIsQueueEmpty>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f43f af6f 	beq.w	800c1b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3730      	adds	r7, #48	; 0x30
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	e000ed04 	.word	0xe000ed04

0800c2e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10d      	bne.n	800c31e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d14d      	bne.n	800c3a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 ffbc 	bl	800d28c <xTaskPriorityDisinherit>
 800c314:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	609a      	str	r2, [r3, #8]
 800c31c:	e043      	b.n	800c3a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d119      	bne.n	800c358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6858      	ldr	r0, [r3, #4]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32c:	461a      	mov	r2, r3
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	f002 f917 	bl	800e562 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33c:	441a      	add	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d32b      	bcc.n	800c3a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	605a      	str	r2, [r3, #4]
 800c356:	e026      	b.n	800c3a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68d8      	ldr	r0, [r3, #12]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c360:	461a      	mov	r2, r3
 800c362:	68b9      	ldr	r1, [r7, #8]
 800c364:	f002 f8fd 	bl	800e562 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	68da      	ldr	r2, [r3, #12]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c370:	425b      	negs	r3, r3
 800c372:	441a      	add	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	68da      	ldr	r2, [r3, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	429a      	cmp	r2, r3
 800c382:	d207      	bcs.n	800c394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	689a      	ldr	r2, [r3, #8]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38c:	425b      	negs	r3, r3
 800c38e:	441a      	add	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b02      	cmp	r3, #2
 800c398:	d105      	bne.n	800c3a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3ae:	697b      	ldr	r3, [r7, #20]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d018      	beq.n	800c3fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d2:	441a      	add	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68da      	ldr	r2, [r3, #12]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d303      	bcc.n	800c3ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68d9      	ldr	r1, [r3, #12]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6838      	ldr	r0, [r7, #0]
 800c3f8:	f002 f8b3 	bl	800e562 <memcpy>
	}
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c40c:	f001 fc7a 	bl	800dd04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c418:	e011      	b.n	800c43e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d012      	beq.n	800c448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3324      	adds	r3, #36	; 0x24
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fd50 	bl	800cecc <xTaskRemoveFromEventList>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c432:	f000 fe27 	bl	800d084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	3b01      	subs	r3, #1
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c442:	2b00      	cmp	r3, #0
 800c444:	dce9      	bgt.n	800c41a <prvUnlockQueue+0x16>
 800c446:	e000      	b.n	800c44a <prvUnlockQueue+0x46>
					break;
 800c448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	22ff      	movs	r2, #255	; 0xff
 800c44e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c452:	f001 fc87 	bl	800dd64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c456:	f001 fc55 	bl	800dd04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c462:	e011      	b.n	800c488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d012      	beq.n	800c492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3310      	adds	r3, #16
 800c470:	4618      	mov	r0, r3
 800c472:	f000 fd2b 	bl	800cecc <xTaskRemoveFromEventList>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c47c:	f000 fe02 	bl	800d084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	3b01      	subs	r3, #1
 800c484:	b2db      	uxtb	r3, r3
 800c486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	dce9      	bgt.n	800c464 <prvUnlockQueue+0x60>
 800c490:	e000      	b.n	800c494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	22ff      	movs	r2, #255	; 0xff
 800c498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c49c:	f001 fc62 	bl	800dd64 <vPortExitCritical>
}
 800c4a0:	bf00      	nop
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4b0:	f001 fc28 	bl	800dd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	60fb      	str	r3, [r7, #12]
 800c4c0:	e001      	b.n	800c4c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4c6:	f001 fc4d 	bl	800dd64 <vPortExitCritical>

	return xReturn;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4dc:	f001 fc12 	bl	800dd04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d102      	bne.n	800c4f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	e001      	b.n	800c4f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4f6:	f001 fc35 	bl	800dd64 <vPortExitCritical>

	return xReturn;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e014      	b.n	800c53e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c514:	4a0f      	ldr	r2, [pc, #60]	; (800c554 <vQueueAddToRegistry+0x50>)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10b      	bne.n	800c538 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c520:	490c      	ldr	r1, [pc, #48]	; (800c554 <vQueueAddToRegistry+0x50>)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c52a:	4a0a      	ldr	r2, [pc, #40]	; (800c554 <vQueueAddToRegistry+0x50>)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	4413      	add	r3, r2
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c536:	e006      	b.n	800c546 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3301      	adds	r3, #1
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b07      	cmp	r3, #7
 800c542:	d9e7      	bls.n	800c514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c544:	bf00      	nop
 800c546:	bf00      	nop
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	20001084 	.word	0x20001084

0800c558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c568:	f001 fbcc 	bl	800dd04 <vPortEnterCritical>
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c572:	b25b      	sxtb	r3, r3
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d103      	bne.n	800c582 <vQueueWaitForMessageRestricted+0x2a>
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c588:	b25b      	sxtb	r3, r3
 800c58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58e:	d103      	bne.n	800c598 <vQueueWaitForMessageRestricted+0x40>
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c598:	f001 fbe4 	bl	800dd64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	3324      	adds	r3, #36	; 0x24
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	68b9      	ldr	r1, [r7, #8]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fc61 	bl	800ce74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7ff ff26 	bl	800c404 <prvUnlockQueue>
	}
 800c5b8:	bf00      	nop
 800c5ba:	3718      	adds	r7, #24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08e      	sub	sp, #56	; 0x38
 800c5c4:	af04      	add	r7, sp, #16
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	623b      	str	r3, [r7, #32]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	61fb      	str	r3, [r7, #28]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c606:	23bc      	movs	r3, #188	; 0xbc
 800c608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2bbc      	cmp	r3, #188	; 0xbc
 800c60e:	d00a      	beq.n	800c626 <xTaskCreateStatic+0x66>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	61bb      	str	r3, [r7, #24]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c626:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d01e      	beq.n	800c66c <xTaskCreateStatic+0xac>
 800c62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c630:	2b00      	cmp	r3, #0
 800c632:	d01b      	beq.n	800c66c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c63c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	2202      	movs	r2, #2
 800c642:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c646:	2300      	movs	r3, #0
 800c648:	9303      	str	r3, [sp, #12]
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	9302      	str	r3, [sp, #8]
 800c64e:	f107 0314 	add.w	r3, r7, #20
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 f850 	bl	800c704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c666:	f000 f8f3 	bl	800c850 <prvAddNewTaskToReadyList>
 800c66a:	e001      	b.n	800c670 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c66c:	2300      	movs	r3, #0
 800c66e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c670:	697b      	ldr	r3, [r7, #20]
	}
 800c672:	4618      	mov	r0, r3
 800c674:	3728      	adds	r7, #40	; 0x28
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b08c      	sub	sp, #48	; 0x30
 800c67e:	af04      	add	r7, sp, #16
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	603b      	str	r3, [r7, #0]
 800c686:	4613      	mov	r3, r2
 800c688:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c68a:	88fb      	ldrh	r3, [r7, #6]
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 fc5a 	bl	800df48 <pvPortMalloc>
 800c694:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00e      	beq.n	800c6ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c69c:	20bc      	movs	r0, #188	; 0xbc
 800c69e:	f001 fc53 	bl	800df48 <pvPortMalloc>
 800c6a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	631a      	str	r2, [r3, #48]	; 0x30
 800c6b0:	e005      	b.n	800c6be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6b2:	6978      	ldr	r0, [r7, #20]
 800c6b4:	f001 fd14 	bl	800e0e0 <vPortFree>
 800c6b8:	e001      	b.n	800c6be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d017      	beq.n	800c6f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6cc:	88fa      	ldrh	r2, [r7, #6]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	9303      	str	r3, [sp, #12]
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	9302      	str	r3, [sp, #8]
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68b9      	ldr	r1, [r7, #8]
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f000 f80e 	bl	800c704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6e8:	69f8      	ldr	r0, [r7, #28]
 800c6ea:	f000 f8b1 	bl	800c850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	61bb      	str	r3, [r7, #24]
 800c6f2:	e002      	b.n	800c6fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6fa:	69bb      	ldr	r3, [r7, #24]
	}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	461a      	mov	r2, r3
 800c71c:	21a5      	movs	r1, #165	; 0xa5
 800c71e:	f001 ff2e 	bl	800e57e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c72c:	3b01      	subs	r3, #1
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	f023 0307 	bic.w	r3, r3, #7
 800c73a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	617b      	str	r3, [r7, #20]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d01f      	beq.n	800c7a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c762:	2300      	movs	r3, #0
 800c764:	61fb      	str	r3, [r7, #28]
 800c766:	e012      	b.n	800c78e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	4413      	add	r3, r2
 800c76e:	7819      	ldrb	r1, [r3, #0]
 800c770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	4413      	add	r3, r2
 800c776:	3334      	adds	r3, #52	; 0x34
 800c778:	460a      	mov	r2, r1
 800c77a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	4413      	add	r3, r2
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d006      	beq.n	800c796 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	3301      	adds	r3, #1
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	2b0f      	cmp	r3, #15
 800c792:	d9e9      	bls.n	800c768 <prvInitialiseNewTask+0x64>
 800c794:	e000      	b.n	800c798 <prvInitialiseNewTask+0x94>
			{
				break;
 800c796:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7a0:	e003      	b.n	800c7aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	2b37      	cmp	r3, #55	; 0x37
 800c7ae:	d901      	bls.n	800c7b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7b0:	2337      	movs	r3, #55	; 0x37
 800c7b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff f978 	bl	800bac0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	3318      	adds	r3, #24
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff f973 	bl	800bac0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	3354      	adds	r3, #84	; 0x54
 800c804:	2260      	movs	r2, #96	; 0x60
 800c806:	2100      	movs	r1, #0
 800c808:	4618      	mov	r0, r3
 800c80a:	f001 feb8 	bl	800e57e <memset>
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	4a0c      	ldr	r2, [pc, #48]	; (800c844 <prvInitialiseNewTask+0x140>)
 800c812:	659a      	str	r2, [r3, #88]	; 0x58
 800c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c816:	4a0c      	ldr	r2, [pc, #48]	; (800c848 <prvInitialiseNewTask+0x144>)
 800c818:	65da      	str	r2, [r3, #92]	; 0x5c
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	4a0b      	ldr	r2, [pc, #44]	; (800c84c <prvInitialiseNewTask+0x148>)
 800c81e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	68f9      	ldr	r1, [r7, #12]
 800c824:	69b8      	ldr	r0, [r7, #24]
 800c826:	f001 f941 	bl	800daac <pxPortInitialiseStack>
 800c82a:	4602      	mov	r2, r0
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d002      	beq.n	800c83c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c83a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c83c:	bf00      	nop
 800c83e:	3720      	adds	r7, #32
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	08015f38 	.word	0x08015f38
 800c848:	08015f58 	.word	0x08015f58
 800c84c:	08015f18 	.word	0x08015f18

0800c850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c858:	f001 fa54 	bl	800dd04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c85c:	4b2d      	ldr	r3, [pc, #180]	; (800c914 <prvAddNewTaskToReadyList+0xc4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3301      	adds	r3, #1
 800c862:	4a2c      	ldr	r2, [pc, #176]	; (800c914 <prvAddNewTaskToReadyList+0xc4>)
 800c864:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c866:	4b2c      	ldr	r3, [pc, #176]	; (800c918 <prvAddNewTaskToReadyList+0xc8>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d109      	bne.n	800c882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c86e:	4a2a      	ldr	r2, [pc, #168]	; (800c918 <prvAddNewTaskToReadyList+0xc8>)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c874:	4b27      	ldr	r3, [pc, #156]	; (800c914 <prvAddNewTaskToReadyList+0xc4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d110      	bne.n	800c89e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c87c:	f000 fc26 	bl	800d0cc <prvInitialiseTaskLists>
 800c880:	e00d      	b.n	800c89e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c882:	4b26      	ldr	r3, [pc, #152]	; (800c91c <prvAddNewTaskToReadyList+0xcc>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d109      	bne.n	800c89e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c88a:	4b23      	ldr	r3, [pc, #140]	; (800c918 <prvAddNewTaskToReadyList+0xc8>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	429a      	cmp	r2, r3
 800c896:	d802      	bhi.n	800c89e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c898:	4a1f      	ldr	r2, [pc, #124]	; (800c918 <prvAddNewTaskToReadyList+0xc8>)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c89e:	4b20      	ldr	r3, [pc, #128]	; (800c920 <prvAddNewTaskToReadyList+0xd0>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	4a1e      	ldr	r2, [pc, #120]	; (800c920 <prvAddNewTaskToReadyList+0xd0>)
 800c8a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <prvAddNewTaskToReadyList+0xd0>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b4:	4b1b      	ldr	r3, [pc, #108]	; (800c924 <prvAddNewTaskToReadyList+0xd4>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d903      	bls.n	800c8c4 <prvAddNewTaskToReadyList+0x74>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c0:	4a18      	ldr	r2, [pc, #96]	; (800c924 <prvAddNewTaskToReadyList+0xd4>)
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4a15      	ldr	r2, [pc, #84]	; (800c928 <prvAddNewTaskToReadyList+0xd8>)
 800c8d2:	441a      	add	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7ff f8fd 	bl	800bada <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8e0:	f001 fa40 	bl	800dd64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8e4:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <prvAddNewTaskToReadyList+0xcc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00e      	beq.n	800c90a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	; (800c918 <prvAddNewTaskToReadyList+0xc8>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d207      	bcs.n	800c90a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8fa:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <prvAddNewTaskToReadyList+0xdc>)
 800c8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c90a:	bf00      	nop
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	20001598 	.word	0x20001598
 800c918:	200010c4 	.word	0x200010c4
 800c91c:	200015a4 	.word	0x200015a4
 800c920:	200015b4 	.word	0x200015b4
 800c924:	200015a0 	.word	0x200015a0
 800c928:	200010c8 	.word	0x200010c8
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c938:	2300      	movs	r3, #0
 800c93a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d017      	beq.n	800c972 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c942:	4b13      	ldr	r3, [pc, #76]	; (800c990 <vTaskDelay+0x60>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00a      	beq.n	800c960 <vTaskDelay+0x30>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	60bb      	str	r3, [r7, #8]
}
 800c95c:	bf00      	nop
 800c95e:	e7fe      	b.n	800c95e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c960:	f000 f88a 	bl	800ca78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c964:	2100      	movs	r1, #0
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fcfe 	bl	800d368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c96c:	f000 f892 	bl	800ca94 <xTaskResumeAll>
 800c970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d107      	bne.n	800c988 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c978:	4b06      	ldr	r3, [pc, #24]	; (800c994 <vTaskDelay+0x64>)
 800c97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c988:	bf00      	nop
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	200015c0 	.word	0x200015c0
 800c994:	e000ed04 	.word	0xe000ed04

0800c998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08a      	sub	sp, #40	; 0x28
 800c99c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9a6:	463a      	mov	r2, r7
 800c9a8:	1d39      	adds	r1, r7, #4
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7ff f832 	bl	800ba18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	9202      	str	r2, [sp, #8]
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	460a      	mov	r2, r1
 800c9c6:	4924      	ldr	r1, [pc, #144]	; (800ca58 <vTaskStartScheduler+0xc0>)
 800c9c8:	4824      	ldr	r0, [pc, #144]	; (800ca5c <vTaskStartScheduler+0xc4>)
 800c9ca:	f7ff fdf9 	bl	800c5c0 <xTaskCreateStatic>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4a23      	ldr	r2, [pc, #140]	; (800ca60 <vTaskStartScheduler+0xc8>)
 800c9d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9d4:	4b22      	ldr	r3, [pc, #136]	; (800ca60 <vTaskStartScheduler+0xc8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	617b      	str	r3, [r7, #20]
 800c9e0:	e001      	b.n	800c9e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d102      	bne.n	800c9f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c9ec:	f000 fd10 	bl	800d410 <xTimerCreateTimerTask>
 800c9f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d11b      	bne.n	800ca30 <vTaskStartScheduler+0x98>
	__asm volatile
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	613b      	str	r3, [r7, #16]
}
 800ca0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca0c:	4b15      	ldr	r3, [pc, #84]	; (800ca64 <vTaskStartScheduler+0xcc>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3354      	adds	r3, #84	; 0x54
 800ca12:	4a15      	ldr	r2, [pc, #84]	; (800ca68 <vTaskStartScheduler+0xd0>)
 800ca14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca16:	4b15      	ldr	r3, [pc, #84]	; (800ca6c <vTaskStartScheduler+0xd4>)
 800ca18:	f04f 32ff 	mov.w	r2, #4294967295
 800ca1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca1e:	4b14      	ldr	r3, [pc, #80]	; (800ca70 <vTaskStartScheduler+0xd8>)
 800ca20:	2201      	movs	r2, #1
 800ca22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca24:	4b13      	ldr	r3, [pc, #76]	; (800ca74 <vTaskStartScheduler+0xdc>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca2a:	f001 f8c9 	bl	800dbc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca2e:	e00e      	b.n	800ca4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca36:	d10a      	bne.n	800ca4e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	60fb      	str	r3, [r7, #12]
}
 800ca4a:	bf00      	nop
 800ca4c:	e7fe      	b.n	800ca4c <vTaskStartScheduler+0xb4>
}
 800ca4e:	bf00      	nop
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	0801358c 	.word	0x0801358c
 800ca5c:	0800d09d 	.word	0x0800d09d
 800ca60:	200015bc 	.word	0x200015bc
 800ca64:	200010c4 	.word	0x200010c4
 800ca68:	200000b4 	.word	0x200000b4
 800ca6c:	200015b8 	.word	0x200015b8
 800ca70:	200015a4 	.word	0x200015a4
 800ca74:	2000159c 	.word	0x2000159c

0800ca78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca7c:	4b04      	ldr	r3, [pc, #16]	; (800ca90 <vTaskSuspendAll+0x18>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3301      	adds	r3, #1
 800ca82:	4a03      	ldr	r2, [pc, #12]	; (800ca90 <vTaskSuspendAll+0x18>)
 800ca84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca86:	bf00      	nop
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	200015c0 	.word	0x200015c0

0800ca94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800caa2:	4b42      	ldr	r3, [pc, #264]	; (800cbac <xTaskResumeAll+0x118>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10a      	bne.n	800cac0 <xTaskResumeAll+0x2c>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	603b      	str	r3, [r7, #0]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cac0:	f001 f920 	bl	800dd04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cac4:	4b39      	ldr	r3, [pc, #228]	; (800cbac <xTaskResumeAll+0x118>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3b01      	subs	r3, #1
 800caca:	4a38      	ldr	r2, [pc, #224]	; (800cbac <xTaskResumeAll+0x118>)
 800cacc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cace:	4b37      	ldr	r3, [pc, #220]	; (800cbac <xTaskResumeAll+0x118>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d162      	bne.n	800cb9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cad6:	4b36      	ldr	r3, [pc, #216]	; (800cbb0 <xTaskResumeAll+0x11c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d05e      	beq.n	800cb9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cade:	e02f      	b.n	800cb40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae0:	4b34      	ldr	r3, [pc, #208]	; (800cbb4 <xTaskResumeAll+0x120>)
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	3318      	adds	r3, #24
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff f851 	bl	800bb94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3304      	adds	r3, #4
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff f84c 	bl	800bb94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb00:	4b2d      	ldr	r3, [pc, #180]	; (800cbb8 <xTaskResumeAll+0x124>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d903      	bls.n	800cb10 <xTaskResumeAll+0x7c>
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	4a2a      	ldr	r2, [pc, #168]	; (800cbb8 <xTaskResumeAll+0x124>)
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4a27      	ldr	r2, [pc, #156]	; (800cbbc <xTaskResumeAll+0x128>)
 800cb1e:	441a      	add	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3304      	adds	r3, #4
 800cb24:	4619      	mov	r1, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f7fe ffd7 	bl	800bada <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	4b23      	ldr	r3, [pc, #140]	; (800cbc0 <xTaskResumeAll+0x12c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d302      	bcc.n	800cb40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb3a:	4b22      	ldr	r3, [pc, #136]	; (800cbc4 <xTaskResumeAll+0x130>)
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb40:	4b1c      	ldr	r3, [pc, #112]	; (800cbb4 <xTaskResumeAll+0x120>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1cb      	bne.n	800cae0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb4e:	f000 fb5f 	bl	800d210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb52:	4b1d      	ldr	r3, [pc, #116]	; (800cbc8 <xTaskResumeAll+0x134>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d010      	beq.n	800cb80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb5e:	f000 f847 	bl	800cbf0 <xTaskIncrementTick>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb68:	4b16      	ldr	r3, [pc, #88]	; (800cbc4 <xTaskResumeAll+0x130>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1f1      	bne.n	800cb5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb7a:	4b13      	ldr	r3, [pc, #76]	; (800cbc8 <xTaskResumeAll+0x134>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb80:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <xTaskResumeAll+0x130>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d009      	beq.n	800cb9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb8c:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <xTaskResumeAll+0x138>)
 800cb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb9c:	f001 f8e2 	bl	800dd64 <vPortExitCritical>

	return xAlreadyYielded;
 800cba0:	68bb      	ldr	r3, [r7, #8]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	200015c0 	.word	0x200015c0
 800cbb0:	20001598 	.word	0x20001598
 800cbb4:	20001558 	.word	0x20001558
 800cbb8:	200015a0 	.word	0x200015a0
 800cbbc:	200010c8 	.word	0x200010c8
 800cbc0:	200010c4 	.word	0x200010c4
 800cbc4:	200015ac 	.word	0x200015ac
 800cbc8:	200015a8 	.word	0x200015a8
 800cbcc:	e000ed04 	.word	0xe000ed04

0800cbd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbd6:	4b05      	ldr	r3, [pc, #20]	; (800cbec <xTaskGetTickCount+0x1c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbdc:	687b      	ldr	r3, [r7, #4]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	2000159c 	.word	0x2000159c

0800cbf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbfa:	4b4f      	ldr	r3, [pc, #316]	; (800cd38 <xTaskIncrementTick+0x148>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f040 808f 	bne.w	800cd22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc04:	4b4d      	ldr	r3, [pc, #308]	; (800cd3c <xTaskIncrementTick+0x14c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc0c:	4a4b      	ldr	r2, [pc, #300]	; (800cd3c <xTaskIncrementTick+0x14c>)
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d120      	bne.n	800cc5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc18:	4b49      	ldr	r3, [pc, #292]	; (800cd40 <xTaskIncrementTick+0x150>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00a      	beq.n	800cc38 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	603b      	str	r3, [r7, #0]
}
 800cc34:	bf00      	nop
 800cc36:	e7fe      	b.n	800cc36 <xTaskIncrementTick+0x46>
 800cc38:	4b41      	ldr	r3, [pc, #260]	; (800cd40 <xTaskIncrementTick+0x150>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	4b41      	ldr	r3, [pc, #260]	; (800cd44 <xTaskIncrementTick+0x154>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a3f      	ldr	r2, [pc, #252]	; (800cd40 <xTaskIncrementTick+0x150>)
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	4a3f      	ldr	r2, [pc, #252]	; (800cd44 <xTaskIncrementTick+0x154>)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	4b3e      	ldr	r3, [pc, #248]	; (800cd48 <xTaskIncrementTick+0x158>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3301      	adds	r3, #1
 800cc52:	4a3d      	ldr	r2, [pc, #244]	; (800cd48 <xTaskIncrementTick+0x158>)
 800cc54:	6013      	str	r3, [r2, #0]
 800cc56:	f000 fadb 	bl	800d210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc5a:	4b3c      	ldr	r3, [pc, #240]	; (800cd4c <xTaskIncrementTick+0x15c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d349      	bcc.n	800ccf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc64:	4b36      	ldr	r3, [pc, #216]	; (800cd40 <xTaskIncrementTick+0x150>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d104      	bne.n	800cc78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc6e:	4b37      	ldr	r3, [pc, #220]	; (800cd4c <xTaskIncrementTick+0x15c>)
 800cc70:	f04f 32ff 	mov.w	r2, #4294967295
 800cc74:	601a      	str	r2, [r3, #0]
					break;
 800cc76:	e03f      	b.n	800ccf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc78:	4b31      	ldr	r3, [pc, #196]	; (800cd40 <xTaskIncrementTick+0x150>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d203      	bcs.n	800cc98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc90:	4a2e      	ldr	r2, [pc, #184]	; (800cd4c <xTaskIncrementTick+0x15c>)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc96:	e02f      	b.n	800ccf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe ff79 	bl	800bb94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d004      	beq.n	800ccb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	3318      	adds	r3, #24
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe ff70 	bl	800bb94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb8:	4b25      	ldr	r3, [pc, #148]	; (800cd50 <xTaskIncrementTick+0x160>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d903      	bls.n	800ccc8 <xTaskIncrementTick+0xd8>
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc4:	4a22      	ldr	r2, [pc, #136]	; (800cd50 <xTaskIncrementTick+0x160>)
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cccc:	4613      	mov	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4a1f      	ldr	r2, [pc, #124]	; (800cd54 <xTaskIncrementTick+0x164>)
 800ccd6:	441a      	add	r2, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3304      	adds	r3, #4
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4610      	mov	r0, r2
 800cce0:	f7fe fefb 	bl	800bada <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce8:	4b1b      	ldr	r3, [pc, #108]	; (800cd58 <xTaskIncrementTick+0x168>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d3b8      	bcc.n	800cc64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccf6:	e7b5      	b.n	800cc64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ccf8:	4b17      	ldr	r3, [pc, #92]	; (800cd58 <xTaskIncrementTick+0x168>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfe:	4915      	ldr	r1, [pc, #84]	; (800cd54 <xTaskIncrementTick+0x164>)
 800cd00:	4613      	mov	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4413      	add	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	440b      	add	r3, r1
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d901      	bls.n	800cd14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd10:	2301      	movs	r3, #1
 800cd12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd14:	4b11      	ldr	r3, [pc, #68]	; (800cd5c <xTaskIncrementTick+0x16c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d007      	beq.n	800cd2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	617b      	str	r3, [r7, #20]
 800cd20:	e004      	b.n	800cd2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd22:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <xTaskIncrementTick+0x170>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	3301      	adds	r3, #1
 800cd28:	4a0d      	ldr	r2, [pc, #52]	; (800cd60 <xTaskIncrementTick+0x170>)
 800cd2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd2c:	697b      	ldr	r3, [r7, #20]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3718      	adds	r7, #24
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	200015c0 	.word	0x200015c0
 800cd3c:	2000159c 	.word	0x2000159c
 800cd40:	20001550 	.word	0x20001550
 800cd44:	20001554 	.word	0x20001554
 800cd48:	200015b0 	.word	0x200015b0
 800cd4c:	200015b8 	.word	0x200015b8
 800cd50:	200015a0 	.word	0x200015a0
 800cd54:	200010c8 	.word	0x200010c8
 800cd58:	200010c4 	.word	0x200010c4
 800cd5c:	200015ac 	.word	0x200015ac
 800cd60:	200015a8 	.word	0x200015a8

0800cd64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd6a:	4b2a      	ldr	r3, [pc, #168]	; (800ce14 <vTaskSwitchContext+0xb0>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d003      	beq.n	800cd7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd72:	4b29      	ldr	r3, [pc, #164]	; (800ce18 <vTaskSwitchContext+0xb4>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd78:	e046      	b.n	800ce08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd7a:	4b27      	ldr	r3, [pc, #156]	; (800ce18 <vTaskSwitchContext+0xb4>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd80:	4b26      	ldr	r3, [pc, #152]	; (800ce1c <vTaskSwitchContext+0xb8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	e010      	b.n	800cdaa <vTaskSwitchContext+0x46>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <vTaskSwitchContext+0x40>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	607b      	str	r3, [r7, #4]
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <vTaskSwitchContext+0x3e>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	60fb      	str	r3, [r7, #12]
 800cdaa:	491d      	ldr	r1, [pc, #116]	; (800ce20 <vTaskSwitchContext+0xbc>)
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	440b      	add	r3, r1
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0e4      	beq.n	800cd88 <vTaskSwitchContext+0x24>
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4a15      	ldr	r2, [pc, #84]	; (800ce20 <vTaskSwitchContext+0xbc>)
 800cdca:	4413      	add	r3, r2
 800cdcc:	60bb      	str	r3, [r7, #8]
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	605a      	str	r2, [r3, #4]
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	3308      	adds	r3, #8
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d104      	bne.n	800cdee <vTaskSwitchContext+0x8a>
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	605a      	str	r2, [r3, #4]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	4a0b      	ldr	r2, [pc, #44]	; (800ce24 <vTaskSwitchContext+0xc0>)
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	4a08      	ldr	r2, [pc, #32]	; (800ce1c <vTaskSwitchContext+0xb8>)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdfe:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <vTaskSwitchContext+0xc0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3354      	adds	r3, #84	; 0x54
 800ce04:	4a08      	ldr	r2, [pc, #32]	; (800ce28 <vTaskSwitchContext+0xc4>)
 800ce06:	6013      	str	r3, [r2, #0]
}
 800ce08:	bf00      	nop
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	200015c0 	.word	0x200015c0
 800ce18:	200015ac 	.word	0x200015ac
 800ce1c:	200015a0 	.word	0x200015a0
 800ce20:	200010c8 	.word	0x200010c8
 800ce24:	200010c4 	.word	0x200010c4
 800ce28:	200000b4 	.word	0x200000b4

0800ce2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	60fb      	str	r3, [r7, #12]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce52:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <vTaskPlaceOnEventList+0x44>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	3318      	adds	r3, #24
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7fe fe61 	bl	800bb22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce60:	2101      	movs	r1, #1
 800ce62:	6838      	ldr	r0, [r7, #0]
 800ce64:	f000 fa80 	bl	800d368 <prvAddCurrentTaskToDelayedList>
}
 800ce68:	bf00      	nop
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	200010c4 	.word	0x200010c4

0800ce74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10a      	bne.n	800ce9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	617b      	str	r3, [r7, #20]
}
 800ce98:	bf00      	nop
 800ce9a:	e7fe      	b.n	800ce9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	; (800cec8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3318      	adds	r3, #24
 800cea2:	4619      	mov	r1, r3
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7fe fe18 	bl	800bada <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ceb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ceb6:	6879      	ldr	r1, [r7, #4]
 800ceb8:	68b8      	ldr	r0, [r7, #8]
 800ceba:	f000 fa55 	bl	800d368 <prvAddCurrentTaskToDelayedList>
	}
 800cebe:	bf00      	nop
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	200010c4 	.word	0x200010c4

0800cecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10a      	bne.n	800cef8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	60fb      	str	r3, [r7, #12]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	3318      	adds	r3, #24
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe fe49 	bl	800bb94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf02:	4b1e      	ldr	r3, [pc, #120]	; (800cf7c <xTaskRemoveFromEventList+0xb0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d11d      	bne.n	800cf46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fe fe40 	bl	800bb94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf18:	4b19      	ldr	r3, [pc, #100]	; (800cf80 <xTaskRemoveFromEventList+0xb4>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d903      	bls.n	800cf28 <xTaskRemoveFromEventList+0x5c>
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf24:	4a16      	ldr	r2, [pc, #88]	; (800cf80 <xTaskRemoveFromEventList+0xb4>)
 800cf26:	6013      	str	r3, [r2, #0]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	4a13      	ldr	r2, [pc, #76]	; (800cf84 <xTaskRemoveFromEventList+0xb8>)
 800cf36:	441a      	add	r2, r3
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	4610      	mov	r0, r2
 800cf40:	f7fe fdcb 	bl	800bada <vListInsertEnd>
 800cf44:	e005      	b.n	800cf52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	3318      	adds	r3, #24
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	480e      	ldr	r0, [pc, #56]	; (800cf88 <xTaskRemoveFromEventList+0xbc>)
 800cf4e:	f7fe fdc4 	bl	800bada <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf56:	4b0d      	ldr	r3, [pc, #52]	; (800cf8c <xTaskRemoveFromEventList+0xc0>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d905      	bls.n	800cf6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf64:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <xTaskRemoveFromEventList+0xc4>)
 800cf66:	2201      	movs	r2, #1
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	e001      	b.n	800cf70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf70:	697b      	ldr	r3, [r7, #20]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	200015c0 	.word	0x200015c0
 800cf80:	200015a0 	.word	0x200015a0
 800cf84:	200010c8 	.word	0x200010c8
 800cf88:	20001558 	.word	0x20001558
 800cf8c:	200010c4 	.word	0x200010c4
 800cf90:	200015ac 	.word	0x200015ac

0800cf94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf9c:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <vTaskInternalSetTimeOutState+0x24>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfa4:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <vTaskInternalSetTimeOutState+0x28>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	605a      	str	r2, [r3, #4]
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	200015b0 	.word	0x200015b0
 800cfbc:	2000159c 	.word	0x2000159c

0800cfc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b088      	sub	sp, #32
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10a      	bne.n	800cfe6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	613b      	str	r3, [r7, #16]
}
 800cfe2:	bf00      	nop
 800cfe4:	e7fe      	b.n	800cfe4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10a      	bne.n	800d002 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	60fb      	str	r3, [r7, #12]
}
 800cffe:	bf00      	nop
 800d000:	e7fe      	b.n	800d000 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d002:	f000 fe7f 	bl	800dd04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d006:	4b1d      	ldr	r3, [pc, #116]	; (800d07c <xTaskCheckForTimeOut+0xbc>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	69ba      	ldr	r2, [r7, #24]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01e:	d102      	bne.n	800d026 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d020:	2300      	movs	r3, #0
 800d022:	61fb      	str	r3, [r7, #28]
 800d024:	e023      	b.n	800d06e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	4b15      	ldr	r3, [pc, #84]	; (800d080 <xTaskCheckForTimeOut+0xc0>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d007      	beq.n	800d042 <xTaskCheckForTimeOut+0x82>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d302      	bcc.n	800d042 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d03c:	2301      	movs	r3, #1
 800d03e:	61fb      	str	r3, [r7, #28]
 800d040:	e015      	b.n	800d06e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d20b      	bcs.n	800d064 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	1ad2      	subs	r2, r2, r3
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff ff9b 	bl	800cf94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	61fb      	str	r3, [r7, #28]
 800d062:	e004      	b.n	800d06e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d06a:	2301      	movs	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d06e:	f000 fe79 	bl	800dd64 <vPortExitCritical>

	return xReturn;
 800d072:	69fb      	ldr	r3, [r7, #28]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3720      	adds	r7, #32
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	2000159c 	.word	0x2000159c
 800d080:	200015b0 	.word	0x200015b0

0800d084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d088:	4b03      	ldr	r3, [pc, #12]	; (800d098 <vTaskMissedYield+0x14>)
 800d08a:	2201      	movs	r2, #1
 800d08c:	601a      	str	r2, [r3, #0]
}
 800d08e:	bf00      	nop
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	200015ac 	.word	0x200015ac

0800d09c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0a4:	f000 f852 	bl	800d14c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0a8:	4b06      	ldr	r3, [pc, #24]	; (800d0c4 <prvIdleTask+0x28>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d9f9      	bls.n	800d0a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0b0:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <prvIdleTask+0x2c>)
 800d0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0c0:	e7f0      	b.n	800d0a4 <prvIdleTask+0x8>
 800d0c2:	bf00      	nop
 800d0c4:	200010c8 	.word	0x200010c8
 800d0c8:	e000ed04 	.word	0xe000ed04

0800d0cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	607b      	str	r3, [r7, #4]
 800d0d6:	e00c      	b.n	800d0f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4a12      	ldr	r2, [pc, #72]	; (800d12c <prvInitialiseTaskLists+0x60>)
 800d0e4:	4413      	add	r3, r2
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fe fcca 	bl	800ba80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	607b      	str	r3, [r7, #4]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b37      	cmp	r3, #55	; 0x37
 800d0f6:	d9ef      	bls.n	800d0d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0f8:	480d      	ldr	r0, [pc, #52]	; (800d130 <prvInitialiseTaskLists+0x64>)
 800d0fa:	f7fe fcc1 	bl	800ba80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0fe:	480d      	ldr	r0, [pc, #52]	; (800d134 <prvInitialiseTaskLists+0x68>)
 800d100:	f7fe fcbe 	bl	800ba80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d104:	480c      	ldr	r0, [pc, #48]	; (800d138 <prvInitialiseTaskLists+0x6c>)
 800d106:	f7fe fcbb 	bl	800ba80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d10a:	480c      	ldr	r0, [pc, #48]	; (800d13c <prvInitialiseTaskLists+0x70>)
 800d10c:	f7fe fcb8 	bl	800ba80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d110:	480b      	ldr	r0, [pc, #44]	; (800d140 <prvInitialiseTaskLists+0x74>)
 800d112:	f7fe fcb5 	bl	800ba80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d116:	4b0b      	ldr	r3, [pc, #44]	; (800d144 <prvInitialiseTaskLists+0x78>)
 800d118:	4a05      	ldr	r2, [pc, #20]	; (800d130 <prvInitialiseTaskLists+0x64>)
 800d11a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <prvInitialiseTaskLists+0x7c>)
 800d11e:	4a05      	ldr	r2, [pc, #20]	; (800d134 <prvInitialiseTaskLists+0x68>)
 800d120:	601a      	str	r2, [r3, #0]
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	200010c8 	.word	0x200010c8
 800d130:	20001528 	.word	0x20001528
 800d134:	2000153c 	.word	0x2000153c
 800d138:	20001558 	.word	0x20001558
 800d13c:	2000156c 	.word	0x2000156c
 800d140:	20001584 	.word	0x20001584
 800d144:	20001550 	.word	0x20001550
 800d148:	20001554 	.word	0x20001554

0800d14c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d152:	e019      	b.n	800d188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d154:	f000 fdd6 	bl	800dd04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d158:	4b10      	ldr	r3, [pc, #64]	; (800d19c <prvCheckTasksWaitingTermination+0x50>)
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	3304      	adds	r3, #4
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe fd15 	bl	800bb94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d16a:	4b0d      	ldr	r3, [pc, #52]	; (800d1a0 <prvCheckTasksWaitingTermination+0x54>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3b01      	subs	r3, #1
 800d170:	4a0b      	ldr	r2, [pc, #44]	; (800d1a0 <prvCheckTasksWaitingTermination+0x54>)
 800d172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d174:	4b0b      	ldr	r3, [pc, #44]	; (800d1a4 <prvCheckTasksWaitingTermination+0x58>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3b01      	subs	r3, #1
 800d17a:	4a0a      	ldr	r2, [pc, #40]	; (800d1a4 <prvCheckTasksWaitingTermination+0x58>)
 800d17c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d17e:	f000 fdf1 	bl	800dd64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f810 	bl	800d1a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d188:	4b06      	ldr	r3, [pc, #24]	; (800d1a4 <prvCheckTasksWaitingTermination+0x58>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d1e1      	bne.n	800d154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	2000156c 	.word	0x2000156c
 800d1a0:	20001598 	.word	0x20001598
 800d1a4:	20001580 	.word	0x20001580

0800d1a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	3354      	adds	r3, #84	; 0x54
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f002 f907 	bl	800f3c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d108      	bne.n	800d1d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 ff89 	bl	800e0e0 <vPortFree>
				vPortFree( pxTCB );
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 ff86 	bl	800e0e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1d4:	e018      	b.n	800d208 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d103      	bne.n	800d1e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 ff7d 	bl	800e0e0 <vPortFree>
	}
 800d1e6:	e00f      	b.n	800d208 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d00a      	beq.n	800d208 <prvDeleteTCB+0x60>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	60fb      	str	r3, [r7, #12]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <prvDeleteTCB+0x5e>
	}
 800d208:	bf00      	nop
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d216:	4b0c      	ldr	r3, [pc, #48]	; (800d248 <prvResetNextTaskUnblockTime+0x38>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d104      	bne.n	800d22a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d220:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <prvResetNextTaskUnblockTime+0x3c>)
 800d222:	f04f 32ff 	mov.w	r2, #4294967295
 800d226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d228:	e008      	b.n	800d23c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d22a:	4b07      	ldr	r3, [pc, #28]	; (800d248 <prvResetNextTaskUnblockTime+0x38>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4a04      	ldr	r2, [pc, #16]	; (800d24c <prvResetNextTaskUnblockTime+0x3c>)
 800d23a:	6013      	str	r3, [r2, #0]
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	20001550 	.word	0x20001550
 800d24c:	200015b8 	.word	0x200015b8

0800d250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d256:	4b0b      	ldr	r3, [pc, #44]	; (800d284 <xTaskGetSchedulerState+0x34>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d102      	bne.n	800d264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d25e:	2301      	movs	r3, #1
 800d260:	607b      	str	r3, [r7, #4]
 800d262:	e008      	b.n	800d276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d264:	4b08      	ldr	r3, [pc, #32]	; (800d288 <xTaskGetSchedulerState+0x38>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d102      	bne.n	800d272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d26c:	2302      	movs	r3, #2
 800d26e:	607b      	str	r3, [r7, #4]
 800d270:	e001      	b.n	800d276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d272:	2300      	movs	r3, #0
 800d274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d276:	687b      	ldr	r3, [r7, #4]
	}
 800d278:	4618      	mov	r0, r3
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	200015a4 	.word	0x200015a4
 800d288:	200015c0 	.word	0x200015c0

0800d28c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d298:	2300      	movs	r3, #0
 800d29a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d056      	beq.n	800d350 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2a2:	4b2e      	ldr	r3, [pc, #184]	; (800d35c <xTaskPriorityDisinherit+0xd0>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d00a      	beq.n	800d2c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	60fb      	str	r3, [r7, #12]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10a      	bne.n	800d2e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	60bb      	str	r3, [r7, #8]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e4:	1e5a      	subs	r2, r3, #1
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d02c      	beq.n	800d350 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d128      	bne.n	800d350 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	3304      	adds	r3, #4
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe fc46 	bl	800bb94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d314:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d320:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <xTaskPriorityDisinherit+0xd4>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	429a      	cmp	r2, r3
 800d326:	d903      	bls.n	800d330 <xTaskPriorityDisinherit+0xa4>
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32c:	4a0c      	ldr	r2, [pc, #48]	; (800d360 <xTaskPriorityDisinherit+0xd4>)
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4a09      	ldr	r2, [pc, #36]	; (800d364 <xTaskPriorityDisinherit+0xd8>)
 800d33e:	441a      	add	r2, r3
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	3304      	adds	r3, #4
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f7fe fbc7 	bl	800bada <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d34c:	2301      	movs	r3, #1
 800d34e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d350:	697b      	ldr	r3, [r7, #20]
	}
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	200010c4 	.word	0x200010c4
 800d360:	200015a0 	.word	0x200015a0
 800d364:	200010c8 	.word	0x200010c8

0800d368 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d372:	4b21      	ldr	r3, [pc, #132]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d378:	4b20      	ldr	r3, [pc, #128]	; (800d3fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fc08 	bl	800bb94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38a:	d10a      	bne.n	800d3a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d007      	beq.n	800d3a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d392:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3304      	adds	r3, #4
 800d398:	4619      	mov	r1, r3
 800d39a:	4819      	ldr	r0, [pc, #100]	; (800d400 <prvAddCurrentTaskToDelayedList+0x98>)
 800d39c:	f7fe fb9d 	bl	800bada <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3a0:	e026      	b.n	800d3f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3aa:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d209      	bcs.n	800d3ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ba:	4b12      	ldr	r3, [pc, #72]	; (800d404 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fe fbab 	bl	800bb22 <vListInsert>
}
 800d3cc:	e010      	b.n	800d3f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ce:	4b0e      	ldr	r3, [pc, #56]	; (800d408 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4610      	mov	r0, r2
 800d3dc:	f7fe fba1 	bl	800bb22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d202      	bcs.n	800d3f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d3ea:	4a08      	ldr	r2, [pc, #32]	; (800d40c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6013      	str	r3, [r2, #0]
}
 800d3f0:	bf00      	nop
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	2000159c 	.word	0x2000159c
 800d3fc:	200010c4 	.word	0x200010c4
 800d400:	20001584 	.word	0x20001584
 800d404:	20001554 	.word	0x20001554
 800d408:	20001550 	.word	0x20001550
 800d40c:	200015b8 	.word	0x200015b8

0800d410 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08a      	sub	sp, #40	; 0x28
 800d414:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d41a:	f000 fb07 	bl	800da2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d41e:	4b1c      	ldr	r3, [pc, #112]	; (800d490 <xTimerCreateTimerTask+0x80>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d021      	beq.n	800d46a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d42e:	1d3a      	adds	r2, r7, #4
 800d430:	f107 0108 	add.w	r1, r7, #8
 800d434:	f107 030c 	add.w	r3, r7, #12
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fe fb07 	bl	800ba4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	9202      	str	r2, [sp, #8]
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	2302      	movs	r3, #2
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	2300      	movs	r3, #0
 800d44e:	460a      	mov	r2, r1
 800d450:	4910      	ldr	r1, [pc, #64]	; (800d494 <xTimerCreateTimerTask+0x84>)
 800d452:	4811      	ldr	r0, [pc, #68]	; (800d498 <xTimerCreateTimerTask+0x88>)
 800d454:	f7ff f8b4 	bl	800c5c0 <xTaskCreateStatic>
 800d458:	4603      	mov	r3, r0
 800d45a:	4a10      	ldr	r2, [pc, #64]	; (800d49c <xTimerCreateTimerTask+0x8c>)
 800d45c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d45e:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <xTimerCreateTimerTask+0x8c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d466:	2301      	movs	r3, #1
 800d468:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10a      	bne.n	800d486 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	613b      	str	r3, [r7, #16]
}
 800d482:	bf00      	nop
 800d484:	e7fe      	b.n	800d484 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d486:	697b      	ldr	r3, [r7, #20]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	200015f4 	.word	0x200015f4
 800d494:	08013594 	.word	0x08013594
 800d498:	0800d5d5 	.word	0x0800d5d5
 800d49c:	200015f8 	.word	0x200015f8

0800d4a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08a      	sub	sp, #40	; 0x28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
 800d4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10a      	bne.n	800d4ce <xTimerGenericCommand+0x2e>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	623b      	str	r3, [r7, #32]
}
 800d4ca:	bf00      	nop
 800d4cc:	e7fe      	b.n	800d4cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d4ce:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <xTimerGenericCommand+0x98>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d02a      	beq.n	800d52c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b05      	cmp	r3, #5
 800d4e6:	dc18      	bgt.n	800d51a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d4e8:	f7ff feb2 	bl	800d250 <xTaskGetSchedulerState>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d109      	bne.n	800d506 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4f2:	4b11      	ldr	r3, [pc, #68]	; (800d538 <xTimerGenericCommand+0x98>)
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	f107 0110 	add.w	r1, r7, #16
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4fe:	f7fe fc77 	bl	800bdf0 <xQueueGenericSend>
 800d502:	6278      	str	r0, [r7, #36]	; 0x24
 800d504:	e012      	b.n	800d52c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d506:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <xTimerGenericCommand+0x98>)
 800d508:	6818      	ldr	r0, [r3, #0]
 800d50a:	f107 0110 	add.w	r1, r7, #16
 800d50e:	2300      	movs	r3, #0
 800d510:	2200      	movs	r2, #0
 800d512:	f7fe fc6d 	bl	800bdf0 <xQueueGenericSend>
 800d516:	6278      	str	r0, [r7, #36]	; 0x24
 800d518:	e008      	b.n	800d52c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d51a:	4b07      	ldr	r3, [pc, #28]	; (800d538 <xTimerGenericCommand+0x98>)
 800d51c:	6818      	ldr	r0, [r3, #0]
 800d51e:	f107 0110 	add.w	r1, r7, #16
 800d522:	2300      	movs	r3, #0
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	f7fe fd61 	bl	800bfec <xQueueGenericSendFromISR>
 800d52a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3728      	adds	r7, #40	; 0x28
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	200015f4 	.word	0x200015f4

0800d53c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	af02      	add	r7, sp, #8
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d546:	4b22      	ldr	r3, [pc, #136]	; (800d5d0 <prvProcessExpiredTimer+0x94>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	3304      	adds	r3, #4
 800d554:	4618      	mov	r0, r3
 800d556:	f7fe fb1d 	bl	800bb94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d560:	f003 0304 	and.w	r3, r3, #4
 800d564:	2b00      	cmp	r3, #0
 800d566:	d022      	beq.n	800d5ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	699a      	ldr	r2, [r3, #24]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	18d1      	adds	r1, r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	6978      	ldr	r0, [r7, #20]
 800d576:	f000 f8d1 	bl	800d71c <prvInsertTimerInActiveList>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d01f      	beq.n	800d5c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d580:	2300      	movs	r3, #0
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	2300      	movs	r3, #0
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	2100      	movs	r1, #0
 800d58a:	6978      	ldr	r0, [r7, #20]
 800d58c:	f7ff ff88 	bl	800d4a0 <xTimerGenericCommand>
 800d590:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d113      	bne.n	800d5c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	60fb      	str	r3, [r7, #12]
}
 800d5aa:	bf00      	nop
 800d5ac:	e7fe      	b.n	800d5ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5b4:	f023 0301 	bic.w	r3, r3, #1
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	6a1b      	ldr	r3, [r3, #32]
 800d5c4:	6978      	ldr	r0, [r7, #20]
 800d5c6:	4798      	blx	r3
}
 800d5c8:	bf00      	nop
 800d5ca:	3718      	adds	r7, #24
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	200015ec 	.word	0x200015ec

0800d5d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 f857 	bl	800d694 <prvGetNextExpireTime>
 800d5e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f803 	bl	800d5f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d5f2:	f000 f8d5 	bl	800d7a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5f6:	e7f1      	b.n	800d5dc <prvTimerTask+0x8>

0800d5f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d602:	f7ff fa39 	bl	800ca78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d606:	f107 0308 	add.w	r3, r7, #8
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f866 	bl	800d6dc <prvSampleTimeNow>
 800d610:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d130      	bne.n	800d67a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10a      	bne.n	800d634 <prvProcessTimerOrBlockTask+0x3c>
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	429a      	cmp	r2, r3
 800d624:	d806      	bhi.n	800d634 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d626:	f7ff fa35 	bl	800ca94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d62a:	68f9      	ldr	r1, [r7, #12]
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7ff ff85 	bl	800d53c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d632:	e024      	b.n	800d67e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d008      	beq.n	800d64c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d63a:	4b13      	ldr	r3, [pc, #76]	; (800d688 <prvProcessTimerOrBlockTask+0x90>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <prvProcessTimerOrBlockTask+0x50>
 800d644:	2301      	movs	r3, #1
 800d646:	e000      	b.n	800d64a <prvProcessTimerOrBlockTask+0x52>
 800d648:	2300      	movs	r3, #0
 800d64a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d64c:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <prvProcessTimerOrBlockTask+0x94>)
 800d64e:	6818      	ldr	r0, [r3, #0]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	4619      	mov	r1, r3
 800d65a:	f7fe ff7d 	bl	800c558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d65e:	f7ff fa19 	bl	800ca94 <xTaskResumeAll>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10a      	bne.n	800d67e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d668:	4b09      	ldr	r3, [pc, #36]	; (800d690 <prvProcessTimerOrBlockTask+0x98>)
 800d66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	f3bf 8f6f 	isb	sy
}
 800d678:	e001      	b.n	800d67e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d67a:	f7ff fa0b 	bl	800ca94 <xTaskResumeAll>
}
 800d67e:	bf00      	nop
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	200015f0 	.word	0x200015f0
 800d68c:	200015f4 	.word	0x200015f4
 800d690:	e000ed04 	.word	0xe000ed04

0800d694 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d69c:	4b0e      	ldr	r3, [pc, #56]	; (800d6d8 <prvGetNextExpireTime+0x44>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <prvGetNextExpireTime+0x16>
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	e000      	b.n	800d6ac <prvGetNextExpireTime+0x18>
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d105      	bne.n	800d6c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6b8:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <prvGetNextExpireTime+0x44>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	e001      	b.n	800d6c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	200015ec 	.word	0x200015ec

0800d6dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d6e4:	f7ff fa74 	bl	800cbd0 <xTaskGetTickCount>
 800d6e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d6ea:	4b0b      	ldr	r3, [pc, #44]	; (800d718 <prvSampleTimeNow+0x3c>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d205      	bcs.n	800d700 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d6f4:	f000 f936 	bl	800d964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	e002      	b.n	800d706 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d706:	4a04      	ldr	r2, [pc, #16]	; (800d718 <prvSampleTimeNow+0x3c>)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d70c:	68fb      	ldr	r3, [r7, #12]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	200015fc 	.word	0x200015fc

0800d71c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	68ba      	ldr	r2, [r7, #8]
 800d732:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d812      	bhi.n	800d768 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	1ad2      	subs	r2, r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d302      	bcc.n	800d756 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d750:	2301      	movs	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	e01b      	b.n	800d78e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d756:	4b10      	ldr	r3, [pc, #64]	; (800d798 <prvInsertTimerInActiveList+0x7c>)
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3304      	adds	r3, #4
 800d75e:	4619      	mov	r1, r3
 800d760:	4610      	mov	r0, r2
 800d762:	f7fe f9de 	bl	800bb22 <vListInsert>
 800d766:	e012      	b.n	800d78e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d206      	bcs.n	800d77e <prvInsertTimerInActiveList+0x62>
 800d770:	68ba      	ldr	r2, [r7, #8]
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	429a      	cmp	r2, r3
 800d776:	d302      	bcc.n	800d77e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d778:	2301      	movs	r3, #1
 800d77a:	617b      	str	r3, [r7, #20]
 800d77c:	e007      	b.n	800d78e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d77e:	4b07      	ldr	r3, [pc, #28]	; (800d79c <prvInsertTimerInActiveList+0x80>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3304      	adds	r3, #4
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fe f9ca 	bl	800bb22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d78e:	697b      	ldr	r3, [r7, #20]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	200015f0 	.word	0x200015f0
 800d79c:	200015ec 	.word	0x200015ec

0800d7a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08e      	sub	sp, #56	; 0x38
 800d7a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7a6:	e0ca      	b.n	800d93e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	da18      	bge.n	800d7e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d7ae:	1d3b      	adds	r3, r7, #4
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d10a      	bne.n	800d7d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	61fb      	str	r3, [r7, #28]
}
 800d7cc:	bf00      	nop
 800d7ce:	e7fe      	b.n	800d7ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7d6:	6850      	ldr	r0, [r2, #4]
 800d7d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7da:	6892      	ldr	r2, [r2, #8]
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f2c0 80aa 	blt.w	800d93c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	695b      	ldr	r3, [r3, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d004      	beq.n	800d7fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe f9cb 	bl	800bb94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7fe:	463b      	mov	r3, r7
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff ff6b 	bl	800d6dc <prvSampleTimeNow>
 800d806:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b09      	cmp	r3, #9
 800d80c:	f200 8097 	bhi.w	800d93e <prvProcessReceivedCommands+0x19e>
 800d810:	a201      	add	r2, pc, #4	; (adr r2, 800d818 <prvProcessReceivedCommands+0x78>)
 800d812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d816:	bf00      	nop
 800d818:	0800d841 	.word	0x0800d841
 800d81c:	0800d841 	.word	0x0800d841
 800d820:	0800d841 	.word	0x0800d841
 800d824:	0800d8b5 	.word	0x0800d8b5
 800d828:	0800d8c9 	.word	0x0800d8c9
 800d82c:	0800d913 	.word	0x0800d913
 800d830:	0800d841 	.word	0x0800d841
 800d834:	0800d841 	.word	0x0800d841
 800d838:	0800d8b5 	.word	0x0800d8b5
 800d83c:	0800d8c9 	.word	0x0800d8c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d846:	f043 0301 	orr.w	r3, r3, #1
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	18d1      	adds	r1, r2, r3
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d85e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d860:	f7ff ff5c 	bl	800d71c <prvInsertTimerInActiveList>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d069      	beq.n	800d93e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d870:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d05e      	beq.n	800d93e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	441a      	add	r2, r3
 800d888:	2300      	movs	r3, #0
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	2300      	movs	r3, #0
 800d88e:	2100      	movs	r1, #0
 800d890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d892:	f7ff fe05 	bl	800d4a0 <xTimerGenericCommand>
 800d896:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d14f      	bne.n	800d93e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	61bb      	str	r3, [r7, #24]
}
 800d8b0:	bf00      	nop
 800d8b2:	e7fe      	b.n	800d8b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8ba:	f023 0301 	bic.w	r3, r3, #1
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d8c6:	e03a      	b.n	800d93e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8ce:	f043 0301 	orr.w	r3, r3, #1
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10a      	bne.n	800d8fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	617b      	str	r3, [r7, #20]
}
 800d8fa:	bf00      	nop
 800d8fc:	e7fe      	b.n	800d8fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d900:	699a      	ldr	r2, [r3, #24]
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	18d1      	adds	r1, r2, r3
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d90a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d90c:	f7ff ff06 	bl	800d71c <prvInsertTimerInActiveList>
					break;
 800d910:	e015      	b.n	800d93e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d918:	f003 0302 	and.w	r3, r3, #2
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d103      	bne.n	800d928 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d922:	f000 fbdd 	bl	800e0e0 <vPortFree>
 800d926:	e00a      	b.n	800d93e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d92e:	f023 0301 	bic.w	r3, r3, #1
 800d932:	b2da      	uxtb	r2, r3
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d93a:	e000      	b.n	800d93e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d93c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d93e:	4b08      	ldr	r3, [pc, #32]	; (800d960 <prvProcessReceivedCommands+0x1c0>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	1d39      	adds	r1, r7, #4
 800d944:	2200      	movs	r2, #0
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe fbec 	bl	800c124 <xQueueReceive>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f47f af2a 	bne.w	800d7a8 <prvProcessReceivedCommands+0x8>
	}
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop
 800d958:	3730      	adds	r7, #48	; 0x30
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	200015f4 	.word	0x200015f4

0800d964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b088      	sub	sp, #32
 800d968:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d96a:	e048      	b.n	800d9fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d96c:	4b2d      	ldr	r3, [pc, #180]	; (800da24 <prvSwitchTimerLists+0xc0>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d976:	4b2b      	ldr	r3, [pc, #172]	; (800da24 <prvSwitchTimerLists+0xc0>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	3304      	adds	r3, #4
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe f905 	bl	800bb94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d02e      	beq.n	800d9fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d90e      	bls.n	800d9d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9be:	4b19      	ldr	r3, [pc, #100]	; (800da24 <prvSwitchTimerLists+0xc0>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7fe f8aa 	bl	800bb22 <vListInsert>
 800d9ce:	e016      	b.n	800d9fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	693a      	ldr	r2, [r7, #16]
 800d9d8:	2100      	movs	r1, #0
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7ff fd60 	bl	800d4a0 <xTimerGenericCommand>
 800d9e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10a      	bne.n	800d9fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	603b      	str	r3, [r7, #0]
}
 800d9fa:	bf00      	nop
 800d9fc:	e7fe      	b.n	800d9fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9fe:	4b09      	ldr	r3, [pc, #36]	; (800da24 <prvSwitchTimerLists+0xc0>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1b1      	bne.n	800d96c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da08:	4b06      	ldr	r3, [pc, #24]	; (800da24 <prvSwitchTimerLists+0xc0>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da0e:	4b06      	ldr	r3, [pc, #24]	; (800da28 <prvSwitchTimerLists+0xc4>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a04      	ldr	r2, [pc, #16]	; (800da24 <prvSwitchTimerLists+0xc0>)
 800da14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da16:	4a04      	ldr	r2, [pc, #16]	; (800da28 <prvSwitchTimerLists+0xc4>)
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	6013      	str	r3, [r2, #0]
}
 800da1c:	bf00      	nop
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	200015ec 	.word	0x200015ec
 800da28:	200015f0 	.word	0x200015f0

0800da2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da32:	f000 f967 	bl	800dd04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da36:	4b15      	ldr	r3, [pc, #84]	; (800da8c <prvCheckForValidListAndQueue+0x60>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d120      	bne.n	800da80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da3e:	4814      	ldr	r0, [pc, #80]	; (800da90 <prvCheckForValidListAndQueue+0x64>)
 800da40:	f7fe f81e 	bl	800ba80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da44:	4813      	ldr	r0, [pc, #76]	; (800da94 <prvCheckForValidListAndQueue+0x68>)
 800da46:	f7fe f81b 	bl	800ba80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da4a:	4b13      	ldr	r3, [pc, #76]	; (800da98 <prvCheckForValidListAndQueue+0x6c>)
 800da4c:	4a10      	ldr	r2, [pc, #64]	; (800da90 <prvCheckForValidListAndQueue+0x64>)
 800da4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da50:	4b12      	ldr	r3, [pc, #72]	; (800da9c <prvCheckForValidListAndQueue+0x70>)
 800da52:	4a10      	ldr	r2, [pc, #64]	; (800da94 <prvCheckForValidListAndQueue+0x68>)
 800da54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da56:	2300      	movs	r3, #0
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	4b11      	ldr	r3, [pc, #68]	; (800daa0 <prvCheckForValidListAndQueue+0x74>)
 800da5c:	4a11      	ldr	r2, [pc, #68]	; (800daa4 <prvCheckForValidListAndQueue+0x78>)
 800da5e:	2110      	movs	r1, #16
 800da60:	200a      	movs	r0, #10
 800da62:	f7fe f929 	bl	800bcb8 <xQueueGenericCreateStatic>
 800da66:	4603      	mov	r3, r0
 800da68:	4a08      	ldr	r2, [pc, #32]	; (800da8c <prvCheckForValidListAndQueue+0x60>)
 800da6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da6c:	4b07      	ldr	r3, [pc, #28]	; (800da8c <prvCheckForValidListAndQueue+0x60>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d005      	beq.n	800da80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da74:	4b05      	ldr	r3, [pc, #20]	; (800da8c <prvCheckForValidListAndQueue+0x60>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	490b      	ldr	r1, [pc, #44]	; (800daa8 <prvCheckForValidListAndQueue+0x7c>)
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe fd42 	bl	800c504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da80:	f000 f970 	bl	800dd64 <vPortExitCritical>
}
 800da84:	bf00      	nop
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	200015f4 	.word	0x200015f4
 800da90:	200015c4 	.word	0x200015c4
 800da94:	200015d8 	.word	0x200015d8
 800da98:	200015ec 	.word	0x200015ec
 800da9c:	200015f0 	.word	0x200015f0
 800daa0:	200016a0 	.word	0x200016a0
 800daa4:	20001600 	.word	0x20001600
 800daa8:	0801359c 	.word	0x0801359c

0800daac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	3b04      	subs	r3, #4
 800dabc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3b04      	subs	r3, #4
 800daca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f023 0201 	bic.w	r2, r3, #1
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	3b04      	subs	r3, #4
 800dada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dadc:	4a0c      	ldr	r2, [pc, #48]	; (800db10 <pxPortInitialiseStack+0x64>)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	3b14      	subs	r3, #20
 800dae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3b04      	subs	r3, #4
 800daf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f06f 0202 	mvn.w	r2, #2
 800dafa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3b20      	subs	r3, #32
 800db00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db02:	68fb      	ldr	r3, [r7, #12]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	0800db15 	.word	0x0800db15

0800db14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db1a:	2300      	movs	r3, #0
 800db1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db1e:	4b12      	ldr	r3, [pc, #72]	; (800db68 <prvTaskExitError+0x54>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db26:	d00a      	beq.n	800db3e <prvTaskExitError+0x2a>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	60fb      	str	r3, [r7, #12]
}
 800db3a:	bf00      	nop
 800db3c:	e7fe      	b.n	800db3c <prvTaskExitError+0x28>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	60bb      	str	r3, [r7, #8]
}
 800db50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db52:	bf00      	nop
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0fc      	beq.n	800db54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db5a:	bf00      	nop
 800db5c:	bf00      	nop
 800db5e:	3714      	adds	r7, #20
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	200000b0 	.word	0x200000b0
 800db6c:	00000000 	.word	0x00000000

0800db70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <pxCurrentTCBConst2>)
 800db72:	6819      	ldr	r1, [r3, #0]
 800db74:	6808      	ldr	r0, [r1, #0]
 800db76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7a:	f380 8809 	msr	PSP, r0
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f04f 0000 	mov.w	r0, #0
 800db86:	f380 8811 	msr	BASEPRI, r0
 800db8a:	4770      	bx	lr
 800db8c:	f3af 8000 	nop.w

0800db90 <pxCurrentTCBConst2>:
 800db90:	200010c4 	.word	0x200010c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db94:	bf00      	nop
 800db96:	bf00      	nop

0800db98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db98:	4808      	ldr	r0, [pc, #32]	; (800dbbc <prvPortStartFirstTask+0x24>)
 800db9a:	6800      	ldr	r0, [r0, #0]
 800db9c:	6800      	ldr	r0, [r0, #0]
 800db9e:	f380 8808 	msr	MSP, r0
 800dba2:	f04f 0000 	mov.w	r0, #0
 800dba6:	f380 8814 	msr	CONTROL, r0
 800dbaa:	b662      	cpsie	i
 800dbac:	b661      	cpsie	f
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	df00      	svc	0
 800dbb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dbba:	bf00      	nop
 800dbbc:	e000ed08 	.word	0xe000ed08

0800dbc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dbc6:	4b46      	ldr	r3, [pc, #280]	; (800dce0 <xPortStartScheduler+0x120>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a46      	ldr	r2, [pc, #280]	; (800dce4 <xPortStartScheduler+0x124>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10a      	bne.n	800dbe6 <xPortStartScheduler+0x26>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	613b      	str	r3, [r7, #16]
}
 800dbe2:	bf00      	nop
 800dbe4:	e7fe      	b.n	800dbe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbe6:	4b3e      	ldr	r3, [pc, #248]	; (800dce0 <xPortStartScheduler+0x120>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a3f      	ldr	r2, [pc, #252]	; (800dce8 <xPortStartScheduler+0x128>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d10a      	bne.n	800dc06 <xPortStartScheduler+0x46>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	60fb      	str	r3, [r7, #12]
}
 800dc02:	bf00      	nop
 800dc04:	e7fe      	b.n	800dc04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc06:	4b39      	ldr	r3, [pc, #228]	; (800dcec <xPortStartScheduler+0x12c>)
 800dc08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	22ff      	movs	r2, #255	; 0xff
 800dc16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	4b31      	ldr	r3, [pc, #196]	; (800dcf0 <xPortStartScheduler+0x130>)
 800dc2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc2e:	4b31      	ldr	r3, [pc, #196]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc30:	2207      	movs	r2, #7
 800dc32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc34:	e009      	b.n	800dc4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dc36:	4b2f      	ldr	r3, [pc, #188]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	4a2d      	ldr	r2, [pc, #180]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc40:	78fb      	ldrb	r3, [r7, #3]
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc4a:	78fb      	ldrb	r3, [r7, #3]
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc52:	2b80      	cmp	r3, #128	; 0x80
 800dc54:	d0ef      	beq.n	800dc36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc56:	4b27      	ldr	r3, [pc, #156]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f1c3 0307 	rsb	r3, r3, #7
 800dc5e:	2b04      	cmp	r3, #4
 800dc60:	d00a      	beq.n	800dc78 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	60bb      	str	r3, [r7, #8]
}
 800dc74:	bf00      	nop
 800dc76:	e7fe      	b.n	800dc76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc78:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	021b      	lsls	r3, r3, #8
 800dc7e:	4a1d      	ldr	r2, [pc, #116]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc82:	4b1c      	ldr	r3, [pc, #112]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc8a:	4a1a      	ldr	r2, [pc, #104]	; (800dcf4 <xPortStartScheduler+0x134>)
 800dc8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc96:	4b18      	ldr	r3, [pc, #96]	; (800dcf8 <xPortStartScheduler+0x138>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a17      	ldr	r2, [pc, #92]	; (800dcf8 <xPortStartScheduler+0x138>)
 800dc9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <xPortStartScheduler+0x138>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a14      	ldr	r2, [pc, #80]	; (800dcf8 <xPortStartScheduler+0x138>)
 800dca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dcac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dcae:	f000 f8dd 	bl	800de6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dcb2:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <xPortStartScheduler+0x13c>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dcb8:	f000 f8fc 	bl	800deb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dcbc:	4b10      	ldr	r3, [pc, #64]	; (800dd00 <xPortStartScheduler+0x140>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a0f      	ldr	r2, [pc, #60]	; (800dd00 <xPortStartScheduler+0x140>)
 800dcc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dcc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dcc8:	f7ff ff66 	bl	800db98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dccc:	f7ff f84a 	bl	800cd64 <vTaskSwitchContext>
	prvTaskExitError();
 800dcd0:	f7ff ff20 	bl	800db14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	e000ed00 	.word	0xe000ed00
 800dce4:	410fc271 	.word	0x410fc271
 800dce8:	410fc270 	.word	0x410fc270
 800dcec:	e000e400 	.word	0xe000e400
 800dcf0:	200016f0 	.word	0x200016f0
 800dcf4:	200016f4 	.word	0x200016f4
 800dcf8:	e000ed20 	.word	0xe000ed20
 800dcfc:	200000b0 	.word	0x200000b0
 800dd00:	e000ef34 	.word	0xe000ef34

0800dd04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	607b      	str	r3, [r7, #4]
}
 800dd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd1e:	4b0f      	ldr	r3, [pc, #60]	; (800dd5c <vPortEnterCritical+0x58>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3301      	adds	r3, #1
 800dd24:	4a0d      	ldr	r2, [pc, #52]	; (800dd5c <vPortEnterCritical+0x58>)
 800dd26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd28:	4b0c      	ldr	r3, [pc, #48]	; (800dd5c <vPortEnterCritical+0x58>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d10f      	bne.n	800dd50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd30:	4b0b      	ldr	r3, [pc, #44]	; (800dd60 <vPortEnterCritical+0x5c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00a      	beq.n	800dd50 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	603b      	str	r3, [r7, #0]
}
 800dd4c:	bf00      	nop
 800dd4e:	e7fe      	b.n	800dd4e <vPortEnterCritical+0x4a>
	}
}
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	200000b0 	.word	0x200000b0
 800dd60:	e000ed04 	.word	0xe000ed04

0800dd64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd6a:	4b12      	ldr	r3, [pc, #72]	; (800ddb4 <vPortExitCritical+0x50>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10a      	bne.n	800dd88 <vPortExitCritical+0x24>
	__asm volatile
 800dd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	607b      	str	r3, [r7, #4]
}
 800dd84:	bf00      	nop
 800dd86:	e7fe      	b.n	800dd86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd88:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <vPortExitCritical+0x50>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	4a09      	ldr	r2, [pc, #36]	; (800ddb4 <vPortExitCritical+0x50>)
 800dd90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd92:	4b08      	ldr	r3, [pc, #32]	; (800ddb4 <vPortExitCritical+0x50>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d105      	bne.n	800dda6 <vPortExitCritical+0x42>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	f383 8811 	msr	BASEPRI, r3
}
 800dda4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dda6:	bf00      	nop
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	200000b0 	.word	0x200000b0
	...

0800ddc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ddc0:	f3ef 8009 	mrs	r0, PSP
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	4b15      	ldr	r3, [pc, #84]	; (800de20 <pxCurrentTCBConst>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	f01e 0f10 	tst.w	lr, #16
 800ddd0:	bf08      	it	eq
 800ddd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ddd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddda:	6010      	str	r0, [r2, #0]
 800dddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dde0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dde4:	f380 8811 	msr	BASEPRI, r0
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f7fe ffb8 	bl	800cd64 <vTaskSwitchContext>
 800ddf4:	f04f 0000 	mov.w	r0, #0
 800ddf8:	f380 8811 	msr	BASEPRI, r0
 800ddfc:	bc09      	pop	{r0, r3}
 800ddfe:	6819      	ldr	r1, [r3, #0]
 800de00:	6808      	ldr	r0, [r1, #0]
 800de02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de06:	f01e 0f10 	tst.w	lr, #16
 800de0a:	bf08      	it	eq
 800de0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de10:	f380 8809 	msr	PSP, r0
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	f3af 8000 	nop.w

0800de20 <pxCurrentTCBConst>:
 800de20:	200010c4 	.word	0x200010c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop

0800de28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	607b      	str	r3, [r7, #4]
}
 800de40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de42:	f7fe fed5 	bl	800cbf0 <xTaskIncrementTick>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d003      	beq.n	800de54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de4c:	4b06      	ldr	r3, [pc, #24]	; (800de68 <xPortSysTickHandler+0x40>)
 800de4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	2300      	movs	r3, #0
 800de56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	f383 8811 	msr	BASEPRI, r3
}
 800de5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de60:	bf00      	nop
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de6c:	b480      	push	{r7}
 800de6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de70:	4b0b      	ldr	r3, [pc, #44]	; (800dea0 <vPortSetupTimerInterrupt+0x34>)
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de76:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <vPortSetupTimerInterrupt+0x38>)
 800de78:	2200      	movs	r2, #0
 800de7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de7c:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <vPortSetupTimerInterrupt+0x3c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a0a      	ldr	r2, [pc, #40]	; (800deac <vPortSetupTimerInterrupt+0x40>)
 800de82:	fba2 2303 	umull	r2, r3, r2, r3
 800de86:	099b      	lsrs	r3, r3, #6
 800de88:	4a09      	ldr	r2, [pc, #36]	; (800deb0 <vPortSetupTimerInterrupt+0x44>)
 800de8a:	3b01      	subs	r3, #1
 800de8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de8e:	4b04      	ldr	r3, [pc, #16]	; (800dea0 <vPortSetupTimerInterrupt+0x34>)
 800de90:	2207      	movs	r2, #7
 800de92:	601a      	str	r2, [r3, #0]
}
 800de94:	bf00      	nop
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	e000e010 	.word	0xe000e010
 800dea4:	e000e018 	.word	0xe000e018
 800dea8:	200000a4 	.word	0x200000a4
 800deac:	10624dd3 	.word	0x10624dd3
 800deb0:	e000e014 	.word	0xe000e014

0800deb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800deb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dec4 <vPortEnableVFP+0x10>
 800deb8:	6801      	ldr	r1, [r0, #0]
 800deba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800debe:	6001      	str	r1, [r0, #0]
 800dec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dec2:	bf00      	nop
 800dec4:	e000ed88 	.word	0xe000ed88

0800dec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dece:	f3ef 8305 	mrs	r3, IPSR
 800ded2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b0f      	cmp	r3, #15
 800ded8:	d914      	bls.n	800df04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800deda:	4a17      	ldr	r2, [pc, #92]	; (800df38 <vPortValidateInterruptPriority+0x70>)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	4413      	add	r3, r2
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dee4:	4b15      	ldr	r3, [pc, #84]	; (800df3c <vPortValidateInterruptPriority+0x74>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	7afa      	ldrb	r2, [r7, #11]
 800deea:	429a      	cmp	r2, r3
 800deec:	d20a      	bcs.n	800df04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	607b      	str	r3, [r7, #4]
}
 800df00:	bf00      	nop
 800df02:	e7fe      	b.n	800df02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df04:	4b0e      	ldr	r3, [pc, #56]	; (800df40 <vPortValidateInterruptPriority+0x78>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df0c:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <vPortValidateInterruptPriority+0x7c>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	429a      	cmp	r2, r3
 800df12:	d90a      	bls.n	800df2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	603b      	str	r3, [r7, #0]
}
 800df26:	bf00      	nop
 800df28:	e7fe      	b.n	800df28 <vPortValidateInterruptPriority+0x60>
	}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	e000e3f0 	.word	0xe000e3f0
 800df3c:	200016f0 	.word	0x200016f0
 800df40:	e000ed0c 	.word	0xe000ed0c
 800df44:	200016f4 	.word	0x200016f4

0800df48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08a      	sub	sp, #40	; 0x28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df50:	2300      	movs	r3, #0
 800df52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df54:	f7fe fd90 	bl	800ca78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df58:	4b5b      	ldr	r3, [pc, #364]	; (800e0c8 <pvPortMalloc+0x180>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df60:	f000 f920 	bl	800e1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df64:	4b59      	ldr	r3, [pc, #356]	; (800e0cc <pvPortMalloc+0x184>)
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4013      	ands	r3, r2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f040 8093 	bne.w	800e098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01d      	beq.n	800dfb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df78:	2208      	movs	r2, #8
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4413      	add	r3, r2
 800df7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f003 0307 	and.w	r3, r3, #7
 800df86:	2b00      	cmp	r3, #0
 800df88:	d014      	beq.n	800dfb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f023 0307 	bic.w	r3, r3, #7
 800df90:	3308      	adds	r3, #8
 800df92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f003 0307 	and.w	r3, r3, #7
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <pvPortMalloc+0x6c>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	617b      	str	r3, [r7, #20]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d06e      	beq.n	800e098 <pvPortMalloc+0x150>
 800dfba:	4b45      	ldr	r3, [pc, #276]	; (800e0d0 <pvPortMalloc+0x188>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d869      	bhi.n	800e098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfc4:	4b43      	ldr	r3, [pc, #268]	; (800e0d4 <pvPortMalloc+0x18c>)
 800dfc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfc8:	4b42      	ldr	r3, [pc, #264]	; (800e0d4 <pvPortMalloc+0x18c>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfce:	e004      	b.n	800dfda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d903      	bls.n	800dfec <pvPortMalloc+0xa4>
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1f1      	bne.n	800dfd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfec:	4b36      	ldr	r3, [pc, #216]	; (800e0c8 <pvPortMalloc+0x180>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d050      	beq.n	800e098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2208      	movs	r2, #8
 800dffc:	4413      	add	r3, r2
 800dffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	6a3b      	ldr	r3, [r7, #32]
 800e006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	1ad2      	subs	r2, r2, r3
 800e010:	2308      	movs	r3, #8
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	429a      	cmp	r2, r3
 800e016:	d91f      	bls.n	800e058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4413      	add	r3, r2
 800e01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <pvPortMalloc+0xf8>
	__asm volatile
 800e02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	613b      	str	r3, [r7, #16]
}
 800e03c:	bf00      	nop
 800e03e:	e7fe      	b.n	800e03e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	685a      	ldr	r2, [r3, #4]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e052:	69b8      	ldr	r0, [r7, #24]
 800e054:	f000 f908 	bl	800e268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e058:	4b1d      	ldr	r3, [pc, #116]	; (800e0d0 <pvPortMalloc+0x188>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	4a1b      	ldr	r2, [pc, #108]	; (800e0d0 <pvPortMalloc+0x188>)
 800e064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e066:	4b1a      	ldr	r3, [pc, #104]	; (800e0d0 <pvPortMalloc+0x188>)
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	4b1b      	ldr	r3, [pc, #108]	; (800e0d8 <pvPortMalloc+0x190>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d203      	bcs.n	800e07a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e072:	4b17      	ldr	r3, [pc, #92]	; (800e0d0 <pvPortMalloc+0x188>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a18      	ldr	r2, [pc, #96]	; (800e0d8 <pvPortMalloc+0x190>)
 800e078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	4b13      	ldr	r3, [pc, #76]	; (800e0cc <pvPortMalloc+0x184>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	431a      	orrs	r2, r3
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	2200      	movs	r2, #0
 800e08c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e08e:	4b13      	ldr	r3, [pc, #76]	; (800e0dc <pvPortMalloc+0x194>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3301      	adds	r3, #1
 800e094:	4a11      	ldr	r2, [pc, #68]	; (800e0dc <pvPortMalloc+0x194>)
 800e096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e098:	f7fe fcfc 	bl	800ca94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	f003 0307 	and.w	r3, r3, #7
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00a      	beq.n	800e0bc <pvPortMalloc+0x174>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	60fb      	str	r3, [r7, #12]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <pvPortMalloc+0x172>
	return pvReturn;
 800e0bc:	69fb      	ldr	r3, [r7, #28]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3728      	adds	r7, #40	; 0x28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	2000369c 	.word	0x2000369c
 800e0cc:	200036b0 	.word	0x200036b0
 800e0d0:	200036a0 	.word	0x200036a0
 800e0d4:	20003694 	.word	0x20003694
 800e0d8:	200036a4 	.word	0x200036a4
 800e0dc:	200036a8 	.word	0x200036a8

0800e0e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d04d      	beq.n	800e18e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0f2:	2308      	movs	r3, #8
 800e0f4:	425b      	negs	r3, r3
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	4b24      	ldr	r3, [pc, #144]	; (800e198 <vPortFree+0xb8>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4013      	ands	r3, r2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <vPortFree+0x44>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60fb      	str	r3, [r7, #12]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d00a      	beq.n	800e142 <vPortFree+0x62>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	60bb      	str	r3, [r7, #8]
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	4b14      	ldr	r3, [pc, #80]	; (800e198 <vPortFree+0xb8>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4013      	ands	r3, r2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d01e      	beq.n	800e18e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d11a      	bne.n	800e18e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	4b0e      	ldr	r3, [pc, #56]	; (800e198 <vPortFree+0xb8>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	43db      	mvns	r3, r3
 800e162:	401a      	ands	r2, r3
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e168:	f7fe fc86 	bl	800ca78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <vPortFree+0xbc>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4413      	add	r3, r2
 800e176:	4a09      	ldr	r2, [pc, #36]	; (800e19c <vPortFree+0xbc>)
 800e178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f000 f874 	bl	800e268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e180:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <vPortFree+0xc0>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3301      	adds	r3, #1
 800e186:	4a06      	ldr	r2, [pc, #24]	; (800e1a0 <vPortFree+0xc0>)
 800e188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e18a:	f7fe fc83 	bl	800ca94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e18e:	bf00      	nop
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	200036b0 	.word	0x200036b0
 800e19c:	200036a0 	.word	0x200036a0
 800e1a0:	200036ac 	.word	0x200036ac

0800e1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1aa:	f641 739c 	movw	r3, #8092	; 0x1f9c
 800e1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e1b0:	4b27      	ldr	r3, [pc, #156]	; (800e250 <prvHeapInit+0xac>)
 800e1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00c      	beq.n	800e1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3307      	adds	r3, #7
 800e1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f023 0307 	bic.w	r3, r3, #7
 800e1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	4a1f      	ldr	r2, [pc, #124]	; (800e250 <prvHeapInit+0xac>)
 800e1d4:	4413      	add	r3, r2
 800e1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1dc:	4a1d      	ldr	r2, [pc, #116]	; (800e254 <prvHeapInit+0xb0>)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1e2:	4b1c      	ldr	r3, [pc, #112]	; (800e254 <prvHeapInit+0xb0>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1f0:	2208      	movs	r2, #8
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	1a9b      	subs	r3, r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f023 0307 	bic.w	r3, r3, #7
 800e1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a15      	ldr	r2, [pc, #84]	; (800e258 <prvHeapInit+0xb4>)
 800e204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e206:	4b14      	ldr	r3, [pc, #80]	; (800e258 <prvHeapInit+0xb4>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2200      	movs	r2, #0
 800e20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e20e:	4b12      	ldr	r3, [pc, #72]	; (800e258 <prvHeapInit+0xb4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e224:	4b0c      	ldr	r3, [pc, #48]	; (800e258 <prvHeapInit+0xb4>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <prvHeapInit+0xb8>)
 800e232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	4a09      	ldr	r2, [pc, #36]	; (800e260 <prvHeapInit+0xbc>)
 800e23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e23c:	4b09      	ldr	r3, [pc, #36]	; (800e264 <prvHeapInit+0xc0>)
 800e23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e242:	601a      	str	r2, [r3, #0]
}
 800e244:	bf00      	nop
 800e246:	3714      	adds	r7, #20
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	200016f8 	.word	0x200016f8
 800e254:	20003694 	.word	0x20003694
 800e258:	2000369c 	.word	0x2000369c
 800e25c:	200036a4 	.word	0x200036a4
 800e260:	200036a0 	.word	0x200036a0
 800e264:	200036b0 	.word	0x200036b0

0800e268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e270:	4b28      	ldr	r3, [pc, #160]	; (800e314 <prvInsertBlockIntoFreeList+0xac>)
 800e272:	60fb      	str	r3, [r7, #12]
 800e274:	e002      	b.n	800e27c <prvInsertBlockIntoFreeList+0x14>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	429a      	cmp	r2, r3
 800e284:	d8f7      	bhi.n	800e276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	4413      	add	r3, r2
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	429a      	cmp	r2, r3
 800e296:	d108      	bne.n	800e2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	441a      	add	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	441a      	add	r2, r3
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d118      	bne.n	800e2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	4b15      	ldr	r3, [pc, #84]	; (800e318 <prvInsertBlockIntoFreeList+0xb0>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d00d      	beq.n	800e2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685a      	ldr	r2, [r3, #4]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	441a      	add	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	e008      	b.n	800e2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2e6:	4b0c      	ldr	r3, [pc, #48]	; (800e318 <prvInsertBlockIntoFreeList+0xb0>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	e003      	b.n	800e2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d002      	beq.n	800e306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e306:	bf00      	nop
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	20003694 	.word	0x20003694
 800e318:	2000369c 	.word	0x2000369c

0800e31c <__errno>:
 800e31c:	4b01      	ldr	r3, [pc, #4]	; (800e324 <__errno+0x8>)
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	200000b4 	.word	0x200000b4

0800e328 <std>:
 800e328:	2300      	movs	r3, #0
 800e32a:	b510      	push	{r4, lr}
 800e32c:	4604      	mov	r4, r0
 800e32e:	e9c0 3300 	strd	r3, r3, [r0]
 800e332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e336:	6083      	str	r3, [r0, #8]
 800e338:	8181      	strh	r1, [r0, #12]
 800e33a:	6643      	str	r3, [r0, #100]	; 0x64
 800e33c:	81c2      	strh	r2, [r0, #14]
 800e33e:	6183      	str	r3, [r0, #24]
 800e340:	4619      	mov	r1, r3
 800e342:	2208      	movs	r2, #8
 800e344:	305c      	adds	r0, #92	; 0x5c
 800e346:	f000 f91a 	bl	800e57e <memset>
 800e34a:	4b05      	ldr	r3, [pc, #20]	; (800e360 <std+0x38>)
 800e34c:	6263      	str	r3, [r4, #36]	; 0x24
 800e34e:	4b05      	ldr	r3, [pc, #20]	; (800e364 <std+0x3c>)
 800e350:	62a3      	str	r3, [r4, #40]	; 0x28
 800e352:	4b05      	ldr	r3, [pc, #20]	; (800e368 <std+0x40>)
 800e354:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e356:	4b05      	ldr	r3, [pc, #20]	; (800e36c <std+0x44>)
 800e358:	6224      	str	r4, [r4, #32]
 800e35a:	6323      	str	r3, [r4, #48]	; 0x30
 800e35c:	bd10      	pop	{r4, pc}
 800e35e:	bf00      	nop
 800e360:	0800f4ed 	.word	0x0800f4ed
 800e364:	0800f50f 	.word	0x0800f50f
 800e368:	0800f547 	.word	0x0800f547
 800e36c:	0800f56b 	.word	0x0800f56b

0800e370 <_cleanup_r>:
 800e370:	4901      	ldr	r1, [pc, #4]	; (800e378 <_cleanup_r+0x8>)
 800e372:	f000 b8af 	b.w	800e4d4 <_fwalk_reent>
 800e376:	bf00      	nop
 800e378:	08011119 	.word	0x08011119

0800e37c <__sfmoreglue>:
 800e37c:	b570      	push	{r4, r5, r6, lr}
 800e37e:	2268      	movs	r2, #104	; 0x68
 800e380:	1e4d      	subs	r5, r1, #1
 800e382:	4355      	muls	r5, r2
 800e384:	460e      	mov	r6, r1
 800e386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e38a:	f000 f921 	bl	800e5d0 <_malloc_r>
 800e38e:	4604      	mov	r4, r0
 800e390:	b140      	cbz	r0, 800e3a4 <__sfmoreglue+0x28>
 800e392:	2100      	movs	r1, #0
 800e394:	e9c0 1600 	strd	r1, r6, [r0]
 800e398:	300c      	adds	r0, #12
 800e39a:	60a0      	str	r0, [r4, #8]
 800e39c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3a0:	f000 f8ed 	bl	800e57e <memset>
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}

0800e3a8 <__sfp_lock_acquire>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__sfp_lock_acquire+0x8>)
 800e3aa:	f000 b8d8 	b.w	800e55e <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	200036b5 	.word	0x200036b5

0800e3b4 <__sfp_lock_release>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__sfp_lock_release+0x8>)
 800e3b6:	f000 b8d3 	b.w	800e560 <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	200036b5 	.word	0x200036b5

0800e3c0 <__sinit_lock_acquire>:
 800e3c0:	4801      	ldr	r0, [pc, #4]	; (800e3c8 <__sinit_lock_acquire+0x8>)
 800e3c2:	f000 b8cc 	b.w	800e55e <__retarget_lock_acquire_recursive>
 800e3c6:	bf00      	nop
 800e3c8:	200036b6 	.word	0x200036b6

0800e3cc <__sinit_lock_release>:
 800e3cc:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <__sinit_lock_release+0x8>)
 800e3ce:	f000 b8c7 	b.w	800e560 <__retarget_lock_release_recursive>
 800e3d2:	bf00      	nop
 800e3d4:	200036b6 	.word	0x200036b6

0800e3d8 <__sinit>:
 800e3d8:	b510      	push	{r4, lr}
 800e3da:	4604      	mov	r4, r0
 800e3dc:	f7ff fff0 	bl	800e3c0 <__sinit_lock_acquire>
 800e3e0:	69a3      	ldr	r3, [r4, #24]
 800e3e2:	b11b      	cbz	r3, 800e3ec <__sinit+0x14>
 800e3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e8:	f7ff bff0 	b.w	800e3cc <__sinit_lock_release>
 800e3ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e3f0:	6523      	str	r3, [r4, #80]	; 0x50
 800e3f2:	4b13      	ldr	r3, [pc, #76]	; (800e440 <__sinit+0x68>)
 800e3f4:	4a13      	ldr	r2, [pc, #76]	; (800e444 <__sinit+0x6c>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	bf04      	itt	eq
 800e3fe:	2301      	moveq	r3, #1
 800e400:	61a3      	streq	r3, [r4, #24]
 800e402:	4620      	mov	r0, r4
 800e404:	f000 f820 	bl	800e448 <__sfp>
 800e408:	6060      	str	r0, [r4, #4]
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 f81c 	bl	800e448 <__sfp>
 800e410:	60a0      	str	r0, [r4, #8]
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f818 	bl	800e448 <__sfp>
 800e418:	2200      	movs	r2, #0
 800e41a:	60e0      	str	r0, [r4, #12]
 800e41c:	2104      	movs	r1, #4
 800e41e:	6860      	ldr	r0, [r4, #4]
 800e420:	f7ff ff82 	bl	800e328 <std>
 800e424:	68a0      	ldr	r0, [r4, #8]
 800e426:	2201      	movs	r2, #1
 800e428:	2109      	movs	r1, #9
 800e42a:	f7ff ff7d 	bl	800e328 <std>
 800e42e:	68e0      	ldr	r0, [r4, #12]
 800e430:	2202      	movs	r2, #2
 800e432:	2112      	movs	r1, #18
 800e434:	f7ff ff78 	bl	800e328 <std>
 800e438:	2301      	movs	r3, #1
 800e43a:	61a3      	str	r3, [r4, #24]
 800e43c:	e7d2      	b.n	800e3e4 <__sinit+0xc>
 800e43e:	bf00      	nop
 800e440:	08015f78 	.word	0x08015f78
 800e444:	0800e371 	.word	0x0800e371

0800e448 <__sfp>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	4607      	mov	r7, r0
 800e44c:	f7ff ffac 	bl	800e3a8 <__sfp_lock_acquire>
 800e450:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <__sfp+0x84>)
 800e452:	681e      	ldr	r6, [r3, #0]
 800e454:	69b3      	ldr	r3, [r6, #24]
 800e456:	b913      	cbnz	r3, 800e45e <__sfp+0x16>
 800e458:	4630      	mov	r0, r6
 800e45a:	f7ff ffbd 	bl	800e3d8 <__sinit>
 800e45e:	3648      	adds	r6, #72	; 0x48
 800e460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e464:	3b01      	subs	r3, #1
 800e466:	d503      	bpl.n	800e470 <__sfp+0x28>
 800e468:	6833      	ldr	r3, [r6, #0]
 800e46a:	b30b      	cbz	r3, 800e4b0 <__sfp+0x68>
 800e46c:	6836      	ldr	r6, [r6, #0]
 800e46e:	e7f7      	b.n	800e460 <__sfp+0x18>
 800e470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e474:	b9d5      	cbnz	r5, 800e4ac <__sfp+0x64>
 800e476:	4b16      	ldr	r3, [pc, #88]	; (800e4d0 <__sfp+0x88>)
 800e478:	60e3      	str	r3, [r4, #12]
 800e47a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e47e:	6665      	str	r5, [r4, #100]	; 0x64
 800e480:	f000 f86c 	bl	800e55c <__retarget_lock_init_recursive>
 800e484:	f7ff ff96 	bl	800e3b4 <__sfp_lock_release>
 800e488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e48c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e490:	6025      	str	r5, [r4, #0]
 800e492:	61a5      	str	r5, [r4, #24]
 800e494:	2208      	movs	r2, #8
 800e496:	4629      	mov	r1, r5
 800e498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e49c:	f000 f86f 	bl	800e57e <memset>
 800e4a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ac:	3468      	adds	r4, #104	; 0x68
 800e4ae:	e7d9      	b.n	800e464 <__sfp+0x1c>
 800e4b0:	2104      	movs	r1, #4
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f7ff ff62 	bl	800e37c <__sfmoreglue>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	6030      	str	r0, [r6, #0]
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d1d5      	bne.n	800e46c <__sfp+0x24>
 800e4c0:	f7ff ff78 	bl	800e3b4 <__sfp_lock_release>
 800e4c4:	230c      	movs	r3, #12
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	e7ee      	b.n	800e4a8 <__sfp+0x60>
 800e4ca:	bf00      	nop
 800e4cc:	08015f78 	.word	0x08015f78
 800e4d0:	ffff0001 	.word	0xffff0001

0800e4d4 <_fwalk_reent>:
 800e4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d8:	4606      	mov	r6, r0
 800e4da:	4688      	mov	r8, r1
 800e4dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4e0:	2700      	movs	r7, #0
 800e4e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4e6:	f1b9 0901 	subs.w	r9, r9, #1
 800e4ea:	d505      	bpl.n	800e4f8 <_fwalk_reent+0x24>
 800e4ec:	6824      	ldr	r4, [r4, #0]
 800e4ee:	2c00      	cmp	r4, #0
 800e4f0:	d1f7      	bne.n	800e4e2 <_fwalk_reent+0xe>
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4f8:	89ab      	ldrh	r3, [r5, #12]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d907      	bls.n	800e50e <_fwalk_reent+0x3a>
 800e4fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e502:	3301      	adds	r3, #1
 800e504:	d003      	beq.n	800e50e <_fwalk_reent+0x3a>
 800e506:	4629      	mov	r1, r5
 800e508:	4630      	mov	r0, r6
 800e50a:	47c0      	blx	r8
 800e50c:	4307      	orrs	r7, r0
 800e50e:	3568      	adds	r5, #104	; 0x68
 800e510:	e7e9      	b.n	800e4e6 <_fwalk_reent+0x12>
	...

0800e514 <__libc_init_array>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	4d0d      	ldr	r5, [pc, #52]	; (800e54c <__libc_init_array+0x38>)
 800e518:	4c0d      	ldr	r4, [pc, #52]	; (800e550 <__libc_init_array+0x3c>)
 800e51a:	1b64      	subs	r4, r4, r5
 800e51c:	10a4      	asrs	r4, r4, #2
 800e51e:	2600      	movs	r6, #0
 800e520:	42a6      	cmp	r6, r4
 800e522:	d109      	bne.n	800e538 <__libc_init_array+0x24>
 800e524:	4d0b      	ldr	r5, [pc, #44]	; (800e554 <__libc_init_array+0x40>)
 800e526:	4c0c      	ldr	r4, [pc, #48]	; (800e558 <__libc_init_array+0x44>)
 800e528:	f004 fe80 	bl	801322c <_init>
 800e52c:	1b64      	subs	r4, r4, r5
 800e52e:	10a4      	asrs	r4, r4, #2
 800e530:	2600      	movs	r6, #0
 800e532:	42a6      	cmp	r6, r4
 800e534:	d105      	bne.n	800e542 <__libc_init_array+0x2e>
 800e536:	bd70      	pop	{r4, r5, r6, pc}
 800e538:	f855 3b04 	ldr.w	r3, [r5], #4
 800e53c:	4798      	blx	r3
 800e53e:	3601      	adds	r6, #1
 800e540:	e7ee      	b.n	800e520 <__libc_init_array+0xc>
 800e542:	f855 3b04 	ldr.w	r3, [r5], #4
 800e546:	4798      	blx	r3
 800e548:	3601      	adds	r6, #1
 800e54a:	e7f2      	b.n	800e532 <__libc_init_array+0x1e>
 800e54c:	08016430 	.word	0x08016430
 800e550:	08016430 	.word	0x08016430
 800e554:	08016430 	.word	0x08016430
 800e558:	08016434 	.word	0x08016434

0800e55c <__retarget_lock_init_recursive>:
 800e55c:	4770      	bx	lr

0800e55e <__retarget_lock_acquire_recursive>:
 800e55e:	4770      	bx	lr

0800e560 <__retarget_lock_release_recursive>:
 800e560:	4770      	bx	lr

0800e562 <memcpy>:
 800e562:	440a      	add	r2, r1
 800e564:	4291      	cmp	r1, r2
 800e566:	f100 33ff 	add.w	r3, r0, #4294967295
 800e56a:	d100      	bne.n	800e56e <memcpy+0xc>
 800e56c:	4770      	bx	lr
 800e56e:	b510      	push	{r4, lr}
 800e570:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e574:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e578:	4291      	cmp	r1, r2
 800e57a:	d1f9      	bne.n	800e570 <memcpy+0xe>
 800e57c:	bd10      	pop	{r4, pc}

0800e57e <memset>:
 800e57e:	4402      	add	r2, r0
 800e580:	4603      	mov	r3, r0
 800e582:	4293      	cmp	r3, r2
 800e584:	d100      	bne.n	800e588 <memset+0xa>
 800e586:	4770      	bx	lr
 800e588:	f803 1b01 	strb.w	r1, [r3], #1
 800e58c:	e7f9      	b.n	800e582 <memset+0x4>
	...

0800e590 <sbrk_aligned>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	4e0e      	ldr	r6, [pc, #56]	; (800e5cc <sbrk_aligned+0x3c>)
 800e594:	460c      	mov	r4, r1
 800e596:	6831      	ldr	r1, [r6, #0]
 800e598:	4605      	mov	r5, r0
 800e59a:	b911      	cbnz	r1, 800e5a2 <sbrk_aligned+0x12>
 800e59c:	f000 ff70 	bl	800f480 <_sbrk_r>
 800e5a0:	6030      	str	r0, [r6, #0]
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f000 ff6b 	bl	800f480 <_sbrk_r>
 800e5aa:	1c43      	adds	r3, r0, #1
 800e5ac:	d00a      	beq.n	800e5c4 <sbrk_aligned+0x34>
 800e5ae:	1cc4      	adds	r4, r0, #3
 800e5b0:	f024 0403 	bic.w	r4, r4, #3
 800e5b4:	42a0      	cmp	r0, r4
 800e5b6:	d007      	beq.n	800e5c8 <sbrk_aligned+0x38>
 800e5b8:	1a21      	subs	r1, r4, r0
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	f000 ff60 	bl	800f480 <_sbrk_r>
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	d101      	bne.n	800e5c8 <sbrk_aligned+0x38>
 800e5c4:	f04f 34ff 	mov.w	r4, #4294967295
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	200036bc 	.word	0x200036bc

0800e5d0 <_malloc_r>:
 800e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d4:	1ccd      	adds	r5, r1, #3
 800e5d6:	f025 0503 	bic.w	r5, r5, #3
 800e5da:	3508      	adds	r5, #8
 800e5dc:	2d0c      	cmp	r5, #12
 800e5de:	bf38      	it	cc
 800e5e0:	250c      	movcc	r5, #12
 800e5e2:	2d00      	cmp	r5, #0
 800e5e4:	4607      	mov	r7, r0
 800e5e6:	db01      	blt.n	800e5ec <_malloc_r+0x1c>
 800e5e8:	42a9      	cmp	r1, r5
 800e5ea:	d905      	bls.n	800e5f8 <_malloc_r+0x28>
 800e5ec:	230c      	movs	r3, #12
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	2600      	movs	r6, #0
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f8:	4e2e      	ldr	r6, [pc, #184]	; (800e6b4 <_malloc_r+0xe4>)
 800e5fa:	f003 f969 	bl	80118d0 <__malloc_lock>
 800e5fe:	6833      	ldr	r3, [r6, #0]
 800e600:	461c      	mov	r4, r3
 800e602:	bb34      	cbnz	r4, 800e652 <_malloc_r+0x82>
 800e604:	4629      	mov	r1, r5
 800e606:	4638      	mov	r0, r7
 800e608:	f7ff ffc2 	bl	800e590 <sbrk_aligned>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	4604      	mov	r4, r0
 800e610:	d14d      	bne.n	800e6ae <_malloc_r+0xde>
 800e612:	6834      	ldr	r4, [r6, #0]
 800e614:	4626      	mov	r6, r4
 800e616:	2e00      	cmp	r6, #0
 800e618:	d140      	bne.n	800e69c <_malloc_r+0xcc>
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	4631      	mov	r1, r6
 800e61e:	4638      	mov	r0, r7
 800e620:	eb04 0803 	add.w	r8, r4, r3
 800e624:	f000 ff2c 	bl	800f480 <_sbrk_r>
 800e628:	4580      	cmp	r8, r0
 800e62a:	d13a      	bne.n	800e6a2 <_malloc_r+0xd2>
 800e62c:	6821      	ldr	r1, [r4, #0]
 800e62e:	3503      	adds	r5, #3
 800e630:	1a6d      	subs	r5, r5, r1
 800e632:	f025 0503 	bic.w	r5, r5, #3
 800e636:	3508      	adds	r5, #8
 800e638:	2d0c      	cmp	r5, #12
 800e63a:	bf38      	it	cc
 800e63c:	250c      	movcc	r5, #12
 800e63e:	4629      	mov	r1, r5
 800e640:	4638      	mov	r0, r7
 800e642:	f7ff ffa5 	bl	800e590 <sbrk_aligned>
 800e646:	3001      	adds	r0, #1
 800e648:	d02b      	beq.n	800e6a2 <_malloc_r+0xd2>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	442b      	add	r3, r5
 800e64e:	6023      	str	r3, [r4, #0]
 800e650:	e00e      	b.n	800e670 <_malloc_r+0xa0>
 800e652:	6822      	ldr	r2, [r4, #0]
 800e654:	1b52      	subs	r2, r2, r5
 800e656:	d41e      	bmi.n	800e696 <_malloc_r+0xc6>
 800e658:	2a0b      	cmp	r2, #11
 800e65a:	d916      	bls.n	800e68a <_malloc_r+0xba>
 800e65c:	1961      	adds	r1, r4, r5
 800e65e:	42a3      	cmp	r3, r4
 800e660:	6025      	str	r5, [r4, #0]
 800e662:	bf18      	it	ne
 800e664:	6059      	strne	r1, [r3, #4]
 800e666:	6863      	ldr	r3, [r4, #4]
 800e668:	bf08      	it	eq
 800e66a:	6031      	streq	r1, [r6, #0]
 800e66c:	5162      	str	r2, [r4, r5]
 800e66e:	604b      	str	r3, [r1, #4]
 800e670:	4638      	mov	r0, r7
 800e672:	f104 060b 	add.w	r6, r4, #11
 800e676:	f003 f931 	bl	80118dc <__malloc_unlock>
 800e67a:	f026 0607 	bic.w	r6, r6, #7
 800e67e:	1d23      	adds	r3, r4, #4
 800e680:	1af2      	subs	r2, r6, r3
 800e682:	d0b6      	beq.n	800e5f2 <_malloc_r+0x22>
 800e684:	1b9b      	subs	r3, r3, r6
 800e686:	50a3      	str	r3, [r4, r2]
 800e688:	e7b3      	b.n	800e5f2 <_malloc_r+0x22>
 800e68a:	6862      	ldr	r2, [r4, #4]
 800e68c:	42a3      	cmp	r3, r4
 800e68e:	bf0c      	ite	eq
 800e690:	6032      	streq	r2, [r6, #0]
 800e692:	605a      	strne	r2, [r3, #4]
 800e694:	e7ec      	b.n	800e670 <_malloc_r+0xa0>
 800e696:	4623      	mov	r3, r4
 800e698:	6864      	ldr	r4, [r4, #4]
 800e69a:	e7b2      	b.n	800e602 <_malloc_r+0x32>
 800e69c:	4634      	mov	r4, r6
 800e69e:	6876      	ldr	r6, [r6, #4]
 800e6a0:	e7b9      	b.n	800e616 <_malloc_r+0x46>
 800e6a2:	230c      	movs	r3, #12
 800e6a4:	603b      	str	r3, [r7, #0]
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	f003 f918 	bl	80118dc <__malloc_unlock>
 800e6ac:	e7a1      	b.n	800e5f2 <_malloc_r+0x22>
 800e6ae:	6025      	str	r5, [r4, #0]
 800e6b0:	e7de      	b.n	800e670 <_malloc_r+0xa0>
 800e6b2:	bf00      	nop
 800e6b4:	200036b8 	.word	0x200036b8

0800e6b8 <__cvt>:
 800e6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	ec55 4b10 	vmov	r4, r5, d0
 800e6c0:	2d00      	cmp	r5, #0
 800e6c2:	460e      	mov	r6, r1
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	462b      	mov	r3, r5
 800e6c8:	bfbb      	ittet	lt
 800e6ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e6ce:	461d      	movlt	r5, r3
 800e6d0:	2300      	movge	r3, #0
 800e6d2:	232d      	movlt	r3, #45	; 0x2d
 800e6d4:	700b      	strb	r3, [r1, #0]
 800e6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e6dc:	4691      	mov	r9, r2
 800e6de:	f023 0820 	bic.w	r8, r3, #32
 800e6e2:	bfbc      	itt	lt
 800e6e4:	4622      	movlt	r2, r4
 800e6e6:	4614      	movlt	r4, r2
 800e6e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e6ec:	d005      	beq.n	800e6fa <__cvt+0x42>
 800e6ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e6f2:	d100      	bne.n	800e6f6 <__cvt+0x3e>
 800e6f4:	3601      	adds	r6, #1
 800e6f6:	2102      	movs	r1, #2
 800e6f8:	e000      	b.n	800e6fc <__cvt+0x44>
 800e6fa:	2103      	movs	r1, #3
 800e6fc:	ab03      	add	r3, sp, #12
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	ab02      	add	r3, sp, #8
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	ec45 4b10 	vmov	d0, r4, r5
 800e708:	4653      	mov	r3, sl
 800e70a:	4632      	mov	r2, r6
 800e70c:	f001 fe90 	bl	8010430 <_dtoa_r>
 800e710:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e714:	4607      	mov	r7, r0
 800e716:	d102      	bne.n	800e71e <__cvt+0x66>
 800e718:	f019 0f01 	tst.w	r9, #1
 800e71c:	d022      	beq.n	800e764 <__cvt+0xac>
 800e71e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e722:	eb07 0906 	add.w	r9, r7, r6
 800e726:	d110      	bne.n	800e74a <__cvt+0x92>
 800e728:	783b      	ldrb	r3, [r7, #0]
 800e72a:	2b30      	cmp	r3, #48	; 0x30
 800e72c:	d10a      	bne.n	800e744 <__cvt+0x8c>
 800e72e:	2200      	movs	r2, #0
 800e730:	2300      	movs	r3, #0
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	f7f2 f99f 	bl	8000a78 <__aeabi_dcmpeq>
 800e73a:	b918      	cbnz	r0, 800e744 <__cvt+0x8c>
 800e73c:	f1c6 0601 	rsb	r6, r6, #1
 800e740:	f8ca 6000 	str.w	r6, [sl]
 800e744:	f8da 3000 	ldr.w	r3, [sl]
 800e748:	4499      	add	r9, r3
 800e74a:	2200      	movs	r2, #0
 800e74c:	2300      	movs	r3, #0
 800e74e:	4620      	mov	r0, r4
 800e750:	4629      	mov	r1, r5
 800e752:	f7f2 f991 	bl	8000a78 <__aeabi_dcmpeq>
 800e756:	b108      	cbz	r0, 800e75c <__cvt+0xa4>
 800e758:	f8cd 900c 	str.w	r9, [sp, #12]
 800e75c:	2230      	movs	r2, #48	; 0x30
 800e75e:	9b03      	ldr	r3, [sp, #12]
 800e760:	454b      	cmp	r3, r9
 800e762:	d307      	bcc.n	800e774 <__cvt+0xbc>
 800e764:	9b03      	ldr	r3, [sp, #12]
 800e766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e768:	1bdb      	subs	r3, r3, r7
 800e76a:	4638      	mov	r0, r7
 800e76c:	6013      	str	r3, [r2, #0]
 800e76e:	b004      	add	sp, #16
 800e770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e774:	1c59      	adds	r1, r3, #1
 800e776:	9103      	str	r1, [sp, #12]
 800e778:	701a      	strb	r2, [r3, #0]
 800e77a:	e7f0      	b.n	800e75e <__cvt+0xa6>

0800e77c <__exponent>:
 800e77c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e77e:	4603      	mov	r3, r0
 800e780:	2900      	cmp	r1, #0
 800e782:	bfb8      	it	lt
 800e784:	4249      	neglt	r1, r1
 800e786:	f803 2b02 	strb.w	r2, [r3], #2
 800e78a:	bfb4      	ite	lt
 800e78c:	222d      	movlt	r2, #45	; 0x2d
 800e78e:	222b      	movge	r2, #43	; 0x2b
 800e790:	2909      	cmp	r1, #9
 800e792:	7042      	strb	r2, [r0, #1]
 800e794:	dd2a      	ble.n	800e7ec <__exponent+0x70>
 800e796:	f10d 0407 	add.w	r4, sp, #7
 800e79a:	46a4      	mov	ip, r4
 800e79c:	270a      	movs	r7, #10
 800e79e:	46a6      	mov	lr, r4
 800e7a0:	460a      	mov	r2, r1
 800e7a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7a6:	fb07 1516 	mls	r5, r7, r6, r1
 800e7aa:	3530      	adds	r5, #48	; 0x30
 800e7ac:	2a63      	cmp	r2, #99	; 0x63
 800e7ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	dcf1      	bgt.n	800e79e <__exponent+0x22>
 800e7ba:	3130      	adds	r1, #48	; 0x30
 800e7bc:	f1ae 0502 	sub.w	r5, lr, #2
 800e7c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e7c4:	1c44      	adds	r4, r0, #1
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4561      	cmp	r1, ip
 800e7ca:	d30a      	bcc.n	800e7e2 <__exponent+0x66>
 800e7cc:	f10d 0209 	add.w	r2, sp, #9
 800e7d0:	eba2 020e 	sub.w	r2, r2, lr
 800e7d4:	4565      	cmp	r5, ip
 800e7d6:	bf88      	it	hi
 800e7d8:	2200      	movhi	r2, #0
 800e7da:	4413      	add	r3, r2
 800e7dc:	1a18      	subs	r0, r3, r0
 800e7de:	b003      	add	sp, #12
 800e7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e7ea:	e7ed      	b.n	800e7c8 <__exponent+0x4c>
 800e7ec:	2330      	movs	r3, #48	; 0x30
 800e7ee:	3130      	adds	r1, #48	; 0x30
 800e7f0:	7083      	strb	r3, [r0, #2]
 800e7f2:	70c1      	strb	r1, [r0, #3]
 800e7f4:	1d03      	adds	r3, r0, #4
 800e7f6:	e7f1      	b.n	800e7dc <__exponent+0x60>

0800e7f8 <_printf_float>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	ed2d 8b02 	vpush	{d8}
 800e800:	b08d      	sub	sp, #52	; 0x34
 800e802:	460c      	mov	r4, r1
 800e804:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e808:	4616      	mov	r6, r2
 800e80a:	461f      	mov	r7, r3
 800e80c:	4605      	mov	r5, r0
 800e80e:	f003 f82f 	bl	8011870 <_localeconv_r>
 800e812:	f8d0 a000 	ldr.w	sl, [r0]
 800e816:	4650      	mov	r0, sl
 800e818:	f7f1 fcb2 	bl	8000180 <strlen>
 800e81c:	2300      	movs	r3, #0
 800e81e:	930a      	str	r3, [sp, #40]	; 0x28
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	9305      	str	r3, [sp, #20]
 800e824:	f8d8 3000 	ldr.w	r3, [r8]
 800e828:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e82c:	3307      	adds	r3, #7
 800e82e:	f023 0307 	bic.w	r3, r3, #7
 800e832:	f103 0208 	add.w	r2, r3, #8
 800e836:	f8c8 2000 	str.w	r2, [r8]
 800e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e842:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e846:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e84a:	9307      	str	r3, [sp, #28]
 800e84c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e850:	ee08 0a10 	vmov	s16, r0
 800e854:	4b9f      	ldr	r3, [pc, #636]	; (800ead4 <_printf_float+0x2dc>)
 800e856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e85a:	f04f 32ff 	mov.w	r2, #4294967295
 800e85e:	f7f2 f93d 	bl	8000adc <__aeabi_dcmpun>
 800e862:	bb88      	cbnz	r0, 800e8c8 <_printf_float+0xd0>
 800e864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e868:	4b9a      	ldr	r3, [pc, #616]	; (800ead4 <_printf_float+0x2dc>)
 800e86a:	f04f 32ff 	mov.w	r2, #4294967295
 800e86e:	f7f2 f917 	bl	8000aa0 <__aeabi_dcmple>
 800e872:	bb48      	cbnz	r0, 800e8c8 <_printf_float+0xd0>
 800e874:	2200      	movs	r2, #0
 800e876:	2300      	movs	r3, #0
 800e878:	4640      	mov	r0, r8
 800e87a:	4649      	mov	r1, r9
 800e87c:	f7f2 f906 	bl	8000a8c <__aeabi_dcmplt>
 800e880:	b110      	cbz	r0, 800e888 <_printf_float+0x90>
 800e882:	232d      	movs	r3, #45	; 0x2d
 800e884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e888:	4b93      	ldr	r3, [pc, #588]	; (800ead8 <_printf_float+0x2e0>)
 800e88a:	4894      	ldr	r0, [pc, #592]	; (800eadc <_printf_float+0x2e4>)
 800e88c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e890:	bf94      	ite	ls
 800e892:	4698      	movls	r8, r3
 800e894:	4680      	movhi	r8, r0
 800e896:	2303      	movs	r3, #3
 800e898:	6123      	str	r3, [r4, #16]
 800e89a:	9b05      	ldr	r3, [sp, #20]
 800e89c:	f023 0204 	bic.w	r2, r3, #4
 800e8a0:	6022      	str	r2, [r4, #0]
 800e8a2:	f04f 0900 	mov.w	r9, #0
 800e8a6:	9700      	str	r7, [sp, #0]
 800e8a8:	4633      	mov	r3, r6
 800e8aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	f000 f9d8 	bl	800ec64 <_printf_common>
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	f040 8090 	bne.w	800e9da <_printf_float+0x1e2>
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e8be:	b00d      	add	sp, #52	; 0x34
 800e8c0:	ecbd 8b02 	vpop	{d8}
 800e8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c8:	4642      	mov	r2, r8
 800e8ca:	464b      	mov	r3, r9
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	f7f2 f904 	bl	8000adc <__aeabi_dcmpun>
 800e8d4:	b140      	cbz	r0, 800e8e8 <_printf_float+0xf0>
 800e8d6:	464b      	mov	r3, r9
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	bfbc      	itt	lt
 800e8dc:	232d      	movlt	r3, #45	; 0x2d
 800e8de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e8e2:	487f      	ldr	r0, [pc, #508]	; (800eae0 <_printf_float+0x2e8>)
 800e8e4:	4b7f      	ldr	r3, [pc, #508]	; (800eae4 <_printf_float+0x2ec>)
 800e8e6:	e7d1      	b.n	800e88c <_printf_float+0x94>
 800e8e8:	6863      	ldr	r3, [r4, #4]
 800e8ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e8ee:	9206      	str	r2, [sp, #24]
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	d13f      	bne.n	800e974 <_printf_float+0x17c>
 800e8f4:	2306      	movs	r3, #6
 800e8f6:	6063      	str	r3, [r4, #4]
 800e8f8:	9b05      	ldr	r3, [sp, #20]
 800e8fa:	6861      	ldr	r1, [r4, #4]
 800e8fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e900:	2300      	movs	r3, #0
 800e902:	9303      	str	r3, [sp, #12]
 800e904:	ab0a      	add	r3, sp, #40	; 0x28
 800e906:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e90a:	ab09      	add	r3, sp, #36	; 0x24
 800e90c:	ec49 8b10 	vmov	d0, r8, r9
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	6022      	str	r2, [r4, #0]
 800e914:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e918:	4628      	mov	r0, r5
 800e91a:	f7ff fecd 	bl	800e6b8 <__cvt>
 800e91e:	9b06      	ldr	r3, [sp, #24]
 800e920:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e922:	2b47      	cmp	r3, #71	; 0x47
 800e924:	4680      	mov	r8, r0
 800e926:	d108      	bne.n	800e93a <_printf_float+0x142>
 800e928:	1cc8      	adds	r0, r1, #3
 800e92a:	db02      	blt.n	800e932 <_printf_float+0x13a>
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	4299      	cmp	r1, r3
 800e930:	dd41      	ble.n	800e9b6 <_printf_float+0x1be>
 800e932:	f1ab 0b02 	sub.w	fp, fp, #2
 800e936:	fa5f fb8b 	uxtb.w	fp, fp
 800e93a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e93e:	d820      	bhi.n	800e982 <_printf_float+0x18a>
 800e940:	3901      	subs	r1, #1
 800e942:	465a      	mov	r2, fp
 800e944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e948:	9109      	str	r1, [sp, #36]	; 0x24
 800e94a:	f7ff ff17 	bl	800e77c <__exponent>
 800e94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e950:	1813      	adds	r3, r2, r0
 800e952:	2a01      	cmp	r2, #1
 800e954:	4681      	mov	r9, r0
 800e956:	6123      	str	r3, [r4, #16]
 800e958:	dc02      	bgt.n	800e960 <_printf_float+0x168>
 800e95a:	6822      	ldr	r2, [r4, #0]
 800e95c:	07d2      	lsls	r2, r2, #31
 800e95e:	d501      	bpl.n	800e964 <_printf_float+0x16c>
 800e960:	3301      	adds	r3, #1
 800e962:	6123      	str	r3, [r4, #16]
 800e964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d09c      	beq.n	800e8a6 <_printf_float+0xae>
 800e96c:	232d      	movs	r3, #45	; 0x2d
 800e96e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e972:	e798      	b.n	800e8a6 <_printf_float+0xae>
 800e974:	9a06      	ldr	r2, [sp, #24]
 800e976:	2a47      	cmp	r2, #71	; 0x47
 800e978:	d1be      	bne.n	800e8f8 <_printf_float+0x100>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1bc      	bne.n	800e8f8 <_printf_float+0x100>
 800e97e:	2301      	movs	r3, #1
 800e980:	e7b9      	b.n	800e8f6 <_printf_float+0xfe>
 800e982:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e986:	d118      	bne.n	800e9ba <_printf_float+0x1c2>
 800e988:	2900      	cmp	r1, #0
 800e98a:	6863      	ldr	r3, [r4, #4]
 800e98c:	dd0b      	ble.n	800e9a6 <_printf_float+0x1ae>
 800e98e:	6121      	str	r1, [r4, #16]
 800e990:	b913      	cbnz	r3, 800e998 <_printf_float+0x1a0>
 800e992:	6822      	ldr	r2, [r4, #0]
 800e994:	07d0      	lsls	r0, r2, #31
 800e996:	d502      	bpl.n	800e99e <_printf_float+0x1a6>
 800e998:	3301      	adds	r3, #1
 800e99a:	440b      	add	r3, r1
 800e99c:	6123      	str	r3, [r4, #16]
 800e99e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9a0:	f04f 0900 	mov.w	r9, #0
 800e9a4:	e7de      	b.n	800e964 <_printf_float+0x16c>
 800e9a6:	b913      	cbnz	r3, 800e9ae <_printf_float+0x1b6>
 800e9a8:	6822      	ldr	r2, [r4, #0]
 800e9aa:	07d2      	lsls	r2, r2, #31
 800e9ac:	d501      	bpl.n	800e9b2 <_printf_float+0x1ba>
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	e7f4      	b.n	800e99c <_printf_float+0x1a4>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e7f2      	b.n	800e99c <_printf_float+0x1a4>
 800e9b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	db05      	blt.n	800e9cc <_printf_float+0x1d4>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	6121      	str	r1, [r4, #16]
 800e9c4:	07d8      	lsls	r0, r3, #31
 800e9c6:	d5ea      	bpl.n	800e99e <_printf_float+0x1a6>
 800e9c8:	1c4b      	adds	r3, r1, #1
 800e9ca:	e7e7      	b.n	800e99c <_printf_float+0x1a4>
 800e9cc:	2900      	cmp	r1, #0
 800e9ce:	bfd4      	ite	le
 800e9d0:	f1c1 0202 	rsble	r2, r1, #2
 800e9d4:	2201      	movgt	r2, #1
 800e9d6:	4413      	add	r3, r2
 800e9d8:	e7e0      	b.n	800e99c <_printf_float+0x1a4>
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	055a      	lsls	r2, r3, #21
 800e9de:	d407      	bmi.n	800e9f0 <_printf_float+0x1f8>
 800e9e0:	6923      	ldr	r3, [r4, #16]
 800e9e2:	4642      	mov	r2, r8
 800e9e4:	4631      	mov	r1, r6
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	47b8      	blx	r7
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	d12c      	bne.n	800ea48 <_printf_float+0x250>
 800e9ee:	e764      	b.n	800e8ba <_printf_float+0xc2>
 800e9f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e9f4:	f240 80e0 	bls.w	800ebb8 <_printf_float+0x3c0>
 800e9f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2300      	movs	r3, #0
 800ea00:	f7f2 f83a 	bl	8000a78 <__aeabi_dcmpeq>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d034      	beq.n	800ea72 <_printf_float+0x27a>
 800ea08:	4a37      	ldr	r2, [pc, #220]	; (800eae8 <_printf_float+0x2f0>)
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	4628      	mov	r0, r5
 800ea10:	47b8      	blx	r7
 800ea12:	3001      	adds	r0, #1
 800ea14:	f43f af51 	beq.w	800e8ba <_printf_float+0xc2>
 800ea18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	db02      	blt.n	800ea26 <_printf_float+0x22e>
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	07d8      	lsls	r0, r3, #31
 800ea24:	d510      	bpl.n	800ea48 <_printf_float+0x250>
 800ea26:	ee18 3a10 	vmov	r3, s16
 800ea2a:	4652      	mov	r2, sl
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	47b8      	blx	r7
 800ea32:	3001      	adds	r0, #1
 800ea34:	f43f af41 	beq.w	800e8ba <_printf_float+0xc2>
 800ea38:	f04f 0800 	mov.w	r8, #0
 800ea3c:	f104 091a 	add.w	r9, r4, #26
 800ea40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea42:	3b01      	subs	r3, #1
 800ea44:	4543      	cmp	r3, r8
 800ea46:	dc09      	bgt.n	800ea5c <_printf_float+0x264>
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	079b      	lsls	r3, r3, #30
 800ea4c:	f100 8105 	bmi.w	800ec5a <_printf_float+0x462>
 800ea50:	68e0      	ldr	r0, [r4, #12]
 800ea52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea54:	4298      	cmp	r0, r3
 800ea56:	bfb8      	it	lt
 800ea58:	4618      	movlt	r0, r3
 800ea5a:	e730      	b.n	800e8be <_printf_float+0xc6>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	464a      	mov	r2, r9
 800ea60:	4631      	mov	r1, r6
 800ea62:	4628      	mov	r0, r5
 800ea64:	47b8      	blx	r7
 800ea66:	3001      	adds	r0, #1
 800ea68:	f43f af27 	beq.w	800e8ba <_printf_float+0xc2>
 800ea6c:	f108 0801 	add.w	r8, r8, #1
 800ea70:	e7e6      	b.n	800ea40 <_printf_float+0x248>
 800ea72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	dc39      	bgt.n	800eaec <_printf_float+0x2f4>
 800ea78:	4a1b      	ldr	r2, [pc, #108]	; (800eae8 <_printf_float+0x2f0>)
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4631      	mov	r1, r6
 800ea7e:	4628      	mov	r0, r5
 800ea80:	47b8      	blx	r7
 800ea82:	3001      	adds	r0, #1
 800ea84:	f43f af19 	beq.w	800e8ba <_printf_float+0xc2>
 800ea88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	d102      	bne.n	800ea96 <_printf_float+0x29e>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	07d9      	lsls	r1, r3, #31
 800ea94:	d5d8      	bpl.n	800ea48 <_printf_float+0x250>
 800ea96:	ee18 3a10 	vmov	r3, s16
 800ea9a:	4652      	mov	r2, sl
 800ea9c:	4631      	mov	r1, r6
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	47b8      	blx	r7
 800eaa2:	3001      	adds	r0, #1
 800eaa4:	f43f af09 	beq.w	800e8ba <_printf_float+0xc2>
 800eaa8:	f04f 0900 	mov.w	r9, #0
 800eaac:	f104 0a1a 	add.w	sl, r4, #26
 800eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab2:	425b      	negs	r3, r3
 800eab4:	454b      	cmp	r3, r9
 800eab6:	dc01      	bgt.n	800eabc <_printf_float+0x2c4>
 800eab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaba:	e792      	b.n	800e9e2 <_printf_float+0x1ea>
 800eabc:	2301      	movs	r3, #1
 800eabe:	4652      	mov	r2, sl
 800eac0:	4631      	mov	r1, r6
 800eac2:	4628      	mov	r0, r5
 800eac4:	47b8      	blx	r7
 800eac6:	3001      	adds	r0, #1
 800eac8:	f43f aef7 	beq.w	800e8ba <_printf_float+0xc2>
 800eacc:	f109 0901 	add.w	r9, r9, #1
 800ead0:	e7ee      	b.n	800eab0 <_printf_float+0x2b8>
 800ead2:	bf00      	nop
 800ead4:	7fefffff 	.word	0x7fefffff
 800ead8:	08015f7c 	.word	0x08015f7c
 800eadc:	08015f80 	.word	0x08015f80
 800eae0:	08015f88 	.word	0x08015f88
 800eae4:	08015f84 	.word	0x08015f84
 800eae8:	08015f8c 	.word	0x08015f8c
 800eaec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	bfa8      	it	ge
 800eaf4:	461a      	movge	r2, r3
 800eaf6:	2a00      	cmp	r2, #0
 800eaf8:	4691      	mov	r9, r2
 800eafa:	dc37      	bgt.n	800eb6c <_printf_float+0x374>
 800eafc:	f04f 0b00 	mov.w	fp, #0
 800eb00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb04:	f104 021a 	add.w	r2, r4, #26
 800eb08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb0a:	9305      	str	r3, [sp, #20]
 800eb0c:	eba3 0309 	sub.w	r3, r3, r9
 800eb10:	455b      	cmp	r3, fp
 800eb12:	dc33      	bgt.n	800eb7c <_printf_float+0x384>
 800eb14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	db3b      	blt.n	800eb94 <_printf_float+0x39c>
 800eb1c:	6823      	ldr	r3, [r4, #0]
 800eb1e:	07da      	lsls	r2, r3, #31
 800eb20:	d438      	bmi.n	800eb94 <_printf_float+0x39c>
 800eb22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb24:	9a05      	ldr	r2, [sp, #20]
 800eb26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb28:	1a9a      	subs	r2, r3, r2
 800eb2a:	eba3 0901 	sub.w	r9, r3, r1
 800eb2e:	4591      	cmp	r9, r2
 800eb30:	bfa8      	it	ge
 800eb32:	4691      	movge	r9, r2
 800eb34:	f1b9 0f00 	cmp.w	r9, #0
 800eb38:	dc35      	bgt.n	800eba6 <_printf_float+0x3ae>
 800eb3a:	f04f 0800 	mov.w	r8, #0
 800eb3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb42:	f104 0a1a 	add.w	sl, r4, #26
 800eb46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb4a:	1a9b      	subs	r3, r3, r2
 800eb4c:	eba3 0309 	sub.w	r3, r3, r9
 800eb50:	4543      	cmp	r3, r8
 800eb52:	f77f af79 	ble.w	800ea48 <_printf_float+0x250>
 800eb56:	2301      	movs	r3, #1
 800eb58:	4652      	mov	r2, sl
 800eb5a:	4631      	mov	r1, r6
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	47b8      	blx	r7
 800eb60:	3001      	adds	r0, #1
 800eb62:	f43f aeaa 	beq.w	800e8ba <_printf_float+0xc2>
 800eb66:	f108 0801 	add.w	r8, r8, #1
 800eb6a:	e7ec      	b.n	800eb46 <_printf_float+0x34e>
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	4631      	mov	r1, r6
 800eb70:	4642      	mov	r2, r8
 800eb72:	4628      	mov	r0, r5
 800eb74:	47b8      	blx	r7
 800eb76:	3001      	adds	r0, #1
 800eb78:	d1c0      	bne.n	800eafc <_printf_float+0x304>
 800eb7a:	e69e      	b.n	800e8ba <_printf_float+0xc2>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	4631      	mov	r1, r6
 800eb80:	4628      	mov	r0, r5
 800eb82:	9205      	str	r2, [sp, #20]
 800eb84:	47b8      	blx	r7
 800eb86:	3001      	adds	r0, #1
 800eb88:	f43f ae97 	beq.w	800e8ba <_printf_float+0xc2>
 800eb8c:	9a05      	ldr	r2, [sp, #20]
 800eb8e:	f10b 0b01 	add.w	fp, fp, #1
 800eb92:	e7b9      	b.n	800eb08 <_printf_float+0x310>
 800eb94:	ee18 3a10 	vmov	r3, s16
 800eb98:	4652      	mov	r2, sl
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b8      	blx	r7
 800eba0:	3001      	adds	r0, #1
 800eba2:	d1be      	bne.n	800eb22 <_printf_float+0x32a>
 800eba4:	e689      	b.n	800e8ba <_printf_float+0xc2>
 800eba6:	9a05      	ldr	r2, [sp, #20]
 800eba8:	464b      	mov	r3, r9
 800ebaa:	4442      	add	r2, r8
 800ebac:	4631      	mov	r1, r6
 800ebae:	4628      	mov	r0, r5
 800ebb0:	47b8      	blx	r7
 800ebb2:	3001      	adds	r0, #1
 800ebb4:	d1c1      	bne.n	800eb3a <_printf_float+0x342>
 800ebb6:	e680      	b.n	800e8ba <_printf_float+0xc2>
 800ebb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebba:	2a01      	cmp	r2, #1
 800ebbc:	dc01      	bgt.n	800ebc2 <_printf_float+0x3ca>
 800ebbe:	07db      	lsls	r3, r3, #31
 800ebc0:	d538      	bpl.n	800ec34 <_printf_float+0x43c>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	4642      	mov	r2, r8
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	47b8      	blx	r7
 800ebcc:	3001      	adds	r0, #1
 800ebce:	f43f ae74 	beq.w	800e8ba <_printf_float+0xc2>
 800ebd2:	ee18 3a10 	vmov	r3, s16
 800ebd6:	4652      	mov	r2, sl
 800ebd8:	4631      	mov	r1, r6
 800ebda:	4628      	mov	r0, r5
 800ebdc:	47b8      	blx	r7
 800ebde:	3001      	adds	r0, #1
 800ebe0:	f43f ae6b 	beq.w	800e8ba <_printf_float+0xc2>
 800ebe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2300      	movs	r3, #0
 800ebec:	f7f1 ff44 	bl	8000a78 <__aeabi_dcmpeq>
 800ebf0:	b9d8      	cbnz	r0, 800ec2a <_printf_float+0x432>
 800ebf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf4:	f108 0201 	add.w	r2, r8, #1
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	47b8      	blx	r7
 800ec00:	3001      	adds	r0, #1
 800ec02:	d10e      	bne.n	800ec22 <_printf_float+0x42a>
 800ec04:	e659      	b.n	800e8ba <_printf_float+0xc2>
 800ec06:	2301      	movs	r3, #1
 800ec08:	4652      	mov	r2, sl
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	47b8      	blx	r7
 800ec10:	3001      	adds	r0, #1
 800ec12:	f43f ae52 	beq.w	800e8ba <_printf_float+0xc2>
 800ec16:	f108 0801 	add.w	r8, r8, #1
 800ec1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	4543      	cmp	r3, r8
 800ec20:	dcf1      	bgt.n	800ec06 <_printf_float+0x40e>
 800ec22:	464b      	mov	r3, r9
 800ec24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec28:	e6dc      	b.n	800e9e4 <_printf_float+0x1ec>
 800ec2a:	f04f 0800 	mov.w	r8, #0
 800ec2e:	f104 0a1a 	add.w	sl, r4, #26
 800ec32:	e7f2      	b.n	800ec1a <_printf_float+0x422>
 800ec34:	2301      	movs	r3, #1
 800ec36:	4642      	mov	r2, r8
 800ec38:	e7df      	b.n	800ebfa <_printf_float+0x402>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	464a      	mov	r2, r9
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4628      	mov	r0, r5
 800ec42:	47b8      	blx	r7
 800ec44:	3001      	adds	r0, #1
 800ec46:	f43f ae38 	beq.w	800e8ba <_printf_float+0xc2>
 800ec4a:	f108 0801 	add.w	r8, r8, #1
 800ec4e:	68e3      	ldr	r3, [r4, #12]
 800ec50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec52:	1a5b      	subs	r3, r3, r1
 800ec54:	4543      	cmp	r3, r8
 800ec56:	dcf0      	bgt.n	800ec3a <_printf_float+0x442>
 800ec58:	e6fa      	b.n	800ea50 <_printf_float+0x258>
 800ec5a:	f04f 0800 	mov.w	r8, #0
 800ec5e:	f104 0919 	add.w	r9, r4, #25
 800ec62:	e7f4      	b.n	800ec4e <_printf_float+0x456>

0800ec64 <_printf_common>:
 800ec64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec68:	4616      	mov	r6, r2
 800ec6a:	4699      	mov	r9, r3
 800ec6c:	688a      	ldr	r2, [r1, #8]
 800ec6e:	690b      	ldr	r3, [r1, #16]
 800ec70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec74:	4293      	cmp	r3, r2
 800ec76:	bfb8      	it	lt
 800ec78:	4613      	movlt	r3, r2
 800ec7a:	6033      	str	r3, [r6, #0]
 800ec7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec80:	4607      	mov	r7, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	b10a      	cbz	r2, 800ec8a <_printf_common+0x26>
 800ec86:	3301      	adds	r3, #1
 800ec88:	6033      	str	r3, [r6, #0]
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	0699      	lsls	r1, r3, #26
 800ec8e:	bf42      	ittt	mi
 800ec90:	6833      	ldrmi	r3, [r6, #0]
 800ec92:	3302      	addmi	r3, #2
 800ec94:	6033      	strmi	r3, [r6, #0]
 800ec96:	6825      	ldr	r5, [r4, #0]
 800ec98:	f015 0506 	ands.w	r5, r5, #6
 800ec9c:	d106      	bne.n	800ecac <_printf_common+0x48>
 800ec9e:	f104 0a19 	add.w	sl, r4, #25
 800eca2:	68e3      	ldr	r3, [r4, #12]
 800eca4:	6832      	ldr	r2, [r6, #0]
 800eca6:	1a9b      	subs	r3, r3, r2
 800eca8:	42ab      	cmp	r3, r5
 800ecaa:	dc26      	bgt.n	800ecfa <_printf_common+0x96>
 800ecac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecb0:	1e13      	subs	r3, r2, #0
 800ecb2:	6822      	ldr	r2, [r4, #0]
 800ecb4:	bf18      	it	ne
 800ecb6:	2301      	movne	r3, #1
 800ecb8:	0692      	lsls	r2, r2, #26
 800ecba:	d42b      	bmi.n	800ed14 <_printf_common+0xb0>
 800ecbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	4638      	mov	r0, r7
 800ecc4:	47c0      	blx	r8
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	d01e      	beq.n	800ed08 <_printf_common+0xa4>
 800ecca:	6823      	ldr	r3, [r4, #0]
 800eccc:	68e5      	ldr	r5, [r4, #12]
 800ecce:	6832      	ldr	r2, [r6, #0]
 800ecd0:	f003 0306 	and.w	r3, r3, #6
 800ecd4:	2b04      	cmp	r3, #4
 800ecd6:	bf08      	it	eq
 800ecd8:	1aad      	subeq	r5, r5, r2
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	6922      	ldr	r2, [r4, #16]
 800ecde:	bf0c      	ite	eq
 800ece0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ece4:	2500      	movne	r5, #0
 800ece6:	4293      	cmp	r3, r2
 800ece8:	bfc4      	itt	gt
 800ecea:	1a9b      	subgt	r3, r3, r2
 800ecec:	18ed      	addgt	r5, r5, r3
 800ecee:	2600      	movs	r6, #0
 800ecf0:	341a      	adds	r4, #26
 800ecf2:	42b5      	cmp	r5, r6
 800ecf4:	d11a      	bne.n	800ed2c <_printf_common+0xc8>
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	e008      	b.n	800ed0c <_printf_common+0xa8>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	4652      	mov	r2, sl
 800ecfe:	4649      	mov	r1, r9
 800ed00:	4638      	mov	r0, r7
 800ed02:	47c0      	blx	r8
 800ed04:	3001      	adds	r0, #1
 800ed06:	d103      	bne.n	800ed10 <_printf_common+0xac>
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed10:	3501      	adds	r5, #1
 800ed12:	e7c6      	b.n	800eca2 <_printf_common+0x3e>
 800ed14:	18e1      	adds	r1, r4, r3
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	2030      	movs	r0, #48	; 0x30
 800ed1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed1e:	4422      	add	r2, r4
 800ed20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed28:	3302      	adds	r3, #2
 800ed2a:	e7c7      	b.n	800ecbc <_printf_common+0x58>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	4622      	mov	r2, r4
 800ed30:	4649      	mov	r1, r9
 800ed32:	4638      	mov	r0, r7
 800ed34:	47c0      	blx	r8
 800ed36:	3001      	adds	r0, #1
 800ed38:	d0e6      	beq.n	800ed08 <_printf_common+0xa4>
 800ed3a:	3601      	adds	r6, #1
 800ed3c:	e7d9      	b.n	800ecf2 <_printf_common+0x8e>
	...

0800ed40 <_printf_i>:
 800ed40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed44:	7e0f      	ldrb	r7, [r1, #24]
 800ed46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed48:	2f78      	cmp	r7, #120	; 0x78
 800ed4a:	4691      	mov	r9, r2
 800ed4c:	4680      	mov	r8, r0
 800ed4e:	460c      	mov	r4, r1
 800ed50:	469a      	mov	sl, r3
 800ed52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed56:	d807      	bhi.n	800ed68 <_printf_i+0x28>
 800ed58:	2f62      	cmp	r7, #98	; 0x62
 800ed5a:	d80a      	bhi.n	800ed72 <_printf_i+0x32>
 800ed5c:	2f00      	cmp	r7, #0
 800ed5e:	f000 80d8 	beq.w	800ef12 <_printf_i+0x1d2>
 800ed62:	2f58      	cmp	r7, #88	; 0x58
 800ed64:	f000 80a3 	beq.w	800eeae <_printf_i+0x16e>
 800ed68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed70:	e03a      	b.n	800ede8 <_printf_i+0xa8>
 800ed72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed76:	2b15      	cmp	r3, #21
 800ed78:	d8f6      	bhi.n	800ed68 <_printf_i+0x28>
 800ed7a:	a101      	add	r1, pc, #4	; (adr r1, 800ed80 <_printf_i+0x40>)
 800ed7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed80:	0800edd9 	.word	0x0800edd9
 800ed84:	0800eded 	.word	0x0800eded
 800ed88:	0800ed69 	.word	0x0800ed69
 800ed8c:	0800ed69 	.word	0x0800ed69
 800ed90:	0800ed69 	.word	0x0800ed69
 800ed94:	0800ed69 	.word	0x0800ed69
 800ed98:	0800eded 	.word	0x0800eded
 800ed9c:	0800ed69 	.word	0x0800ed69
 800eda0:	0800ed69 	.word	0x0800ed69
 800eda4:	0800ed69 	.word	0x0800ed69
 800eda8:	0800ed69 	.word	0x0800ed69
 800edac:	0800eef9 	.word	0x0800eef9
 800edb0:	0800ee1d 	.word	0x0800ee1d
 800edb4:	0800eedb 	.word	0x0800eedb
 800edb8:	0800ed69 	.word	0x0800ed69
 800edbc:	0800ed69 	.word	0x0800ed69
 800edc0:	0800ef1b 	.word	0x0800ef1b
 800edc4:	0800ed69 	.word	0x0800ed69
 800edc8:	0800ee1d 	.word	0x0800ee1d
 800edcc:	0800ed69 	.word	0x0800ed69
 800edd0:	0800ed69 	.word	0x0800ed69
 800edd4:	0800eee3 	.word	0x0800eee3
 800edd8:	682b      	ldr	r3, [r5, #0]
 800edda:	1d1a      	adds	r2, r3, #4
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	602a      	str	r2, [r5, #0]
 800ede0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ede4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ede8:	2301      	movs	r3, #1
 800edea:	e0a3      	b.n	800ef34 <_printf_i+0x1f4>
 800edec:	6820      	ldr	r0, [r4, #0]
 800edee:	6829      	ldr	r1, [r5, #0]
 800edf0:	0606      	lsls	r6, r0, #24
 800edf2:	f101 0304 	add.w	r3, r1, #4
 800edf6:	d50a      	bpl.n	800ee0e <_printf_i+0xce>
 800edf8:	680e      	ldr	r6, [r1, #0]
 800edfa:	602b      	str	r3, [r5, #0]
 800edfc:	2e00      	cmp	r6, #0
 800edfe:	da03      	bge.n	800ee08 <_printf_i+0xc8>
 800ee00:	232d      	movs	r3, #45	; 0x2d
 800ee02:	4276      	negs	r6, r6
 800ee04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee08:	485e      	ldr	r0, [pc, #376]	; (800ef84 <_printf_i+0x244>)
 800ee0a:	230a      	movs	r3, #10
 800ee0c:	e019      	b.n	800ee42 <_printf_i+0x102>
 800ee0e:	680e      	ldr	r6, [r1, #0]
 800ee10:	602b      	str	r3, [r5, #0]
 800ee12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee16:	bf18      	it	ne
 800ee18:	b236      	sxthne	r6, r6
 800ee1a:	e7ef      	b.n	800edfc <_printf_i+0xbc>
 800ee1c:	682b      	ldr	r3, [r5, #0]
 800ee1e:	6820      	ldr	r0, [r4, #0]
 800ee20:	1d19      	adds	r1, r3, #4
 800ee22:	6029      	str	r1, [r5, #0]
 800ee24:	0601      	lsls	r1, r0, #24
 800ee26:	d501      	bpl.n	800ee2c <_printf_i+0xec>
 800ee28:	681e      	ldr	r6, [r3, #0]
 800ee2a:	e002      	b.n	800ee32 <_printf_i+0xf2>
 800ee2c:	0646      	lsls	r6, r0, #25
 800ee2e:	d5fb      	bpl.n	800ee28 <_printf_i+0xe8>
 800ee30:	881e      	ldrh	r6, [r3, #0]
 800ee32:	4854      	ldr	r0, [pc, #336]	; (800ef84 <_printf_i+0x244>)
 800ee34:	2f6f      	cmp	r7, #111	; 0x6f
 800ee36:	bf0c      	ite	eq
 800ee38:	2308      	moveq	r3, #8
 800ee3a:	230a      	movne	r3, #10
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee42:	6865      	ldr	r5, [r4, #4]
 800ee44:	60a5      	str	r5, [r4, #8]
 800ee46:	2d00      	cmp	r5, #0
 800ee48:	bfa2      	ittt	ge
 800ee4a:	6821      	ldrge	r1, [r4, #0]
 800ee4c:	f021 0104 	bicge.w	r1, r1, #4
 800ee50:	6021      	strge	r1, [r4, #0]
 800ee52:	b90e      	cbnz	r6, 800ee58 <_printf_i+0x118>
 800ee54:	2d00      	cmp	r5, #0
 800ee56:	d04d      	beq.n	800eef4 <_printf_i+0x1b4>
 800ee58:	4615      	mov	r5, r2
 800ee5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ee62:	5dc7      	ldrb	r7, [r0, r7]
 800ee64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee68:	4637      	mov	r7, r6
 800ee6a:	42bb      	cmp	r3, r7
 800ee6c:	460e      	mov	r6, r1
 800ee6e:	d9f4      	bls.n	800ee5a <_printf_i+0x11a>
 800ee70:	2b08      	cmp	r3, #8
 800ee72:	d10b      	bne.n	800ee8c <_printf_i+0x14c>
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	07de      	lsls	r6, r3, #31
 800ee78:	d508      	bpl.n	800ee8c <_printf_i+0x14c>
 800ee7a:	6923      	ldr	r3, [r4, #16]
 800ee7c:	6861      	ldr	r1, [r4, #4]
 800ee7e:	4299      	cmp	r1, r3
 800ee80:	bfde      	ittt	le
 800ee82:	2330      	movle	r3, #48	; 0x30
 800ee84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee8c:	1b52      	subs	r2, r2, r5
 800ee8e:	6122      	str	r2, [r4, #16]
 800ee90:	f8cd a000 	str.w	sl, [sp]
 800ee94:	464b      	mov	r3, r9
 800ee96:	aa03      	add	r2, sp, #12
 800ee98:	4621      	mov	r1, r4
 800ee9a:	4640      	mov	r0, r8
 800ee9c:	f7ff fee2 	bl	800ec64 <_printf_common>
 800eea0:	3001      	adds	r0, #1
 800eea2:	d14c      	bne.n	800ef3e <_printf_i+0x1fe>
 800eea4:	f04f 30ff 	mov.w	r0, #4294967295
 800eea8:	b004      	add	sp, #16
 800eeaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeae:	4835      	ldr	r0, [pc, #212]	; (800ef84 <_printf_i+0x244>)
 800eeb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eeb4:	6829      	ldr	r1, [r5, #0]
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800eebc:	6029      	str	r1, [r5, #0]
 800eebe:	061d      	lsls	r5, r3, #24
 800eec0:	d514      	bpl.n	800eeec <_printf_i+0x1ac>
 800eec2:	07df      	lsls	r7, r3, #31
 800eec4:	bf44      	itt	mi
 800eec6:	f043 0320 	orrmi.w	r3, r3, #32
 800eeca:	6023      	strmi	r3, [r4, #0]
 800eecc:	b91e      	cbnz	r6, 800eed6 <_printf_i+0x196>
 800eece:	6823      	ldr	r3, [r4, #0]
 800eed0:	f023 0320 	bic.w	r3, r3, #32
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	2310      	movs	r3, #16
 800eed8:	e7b0      	b.n	800ee3c <_printf_i+0xfc>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	f043 0320 	orr.w	r3, r3, #32
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	2378      	movs	r3, #120	; 0x78
 800eee4:	4828      	ldr	r0, [pc, #160]	; (800ef88 <_printf_i+0x248>)
 800eee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eeea:	e7e3      	b.n	800eeb4 <_printf_i+0x174>
 800eeec:	0659      	lsls	r1, r3, #25
 800eeee:	bf48      	it	mi
 800eef0:	b2b6      	uxthmi	r6, r6
 800eef2:	e7e6      	b.n	800eec2 <_printf_i+0x182>
 800eef4:	4615      	mov	r5, r2
 800eef6:	e7bb      	b.n	800ee70 <_printf_i+0x130>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	6826      	ldr	r6, [r4, #0]
 800eefc:	6961      	ldr	r1, [r4, #20]
 800eefe:	1d18      	adds	r0, r3, #4
 800ef00:	6028      	str	r0, [r5, #0]
 800ef02:	0635      	lsls	r5, r6, #24
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	d501      	bpl.n	800ef0c <_printf_i+0x1cc>
 800ef08:	6019      	str	r1, [r3, #0]
 800ef0a:	e002      	b.n	800ef12 <_printf_i+0x1d2>
 800ef0c:	0670      	lsls	r0, r6, #25
 800ef0e:	d5fb      	bpl.n	800ef08 <_printf_i+0x1c8>
 800ef10:	8019      	strh	r1, [r3, #0]
 800ef12:	2300      	movs	r3, #0
 800ef14:	6123      	str	r3, [r4, #16]
 800ef16:	4615      	mov	r5, r2
 800ef18:	e7ba      	b.n	800ee90 <_printf_i+0x150>
 800ef1a:	682b      	ldr	r3, [r5, #0]
 800ef1c:	1d1a      	adds	r2, r3, #4
 800ef1e:	602a      	str	r2, [r5, #0]
 800ef20:	681d      	ldr	r5, [r3, #0]
 800ef22:	6862      	ldr	r2, [r4, #4]
 800ef24:	2100      	movs	r1, #0
 800ef26:	4628      	mov	r0, r5
 800ef28:	f7f1 f932 	bl	8000190 <memchr>
 800ef2c:	b108      	cbz	r0, 800ef32 <_printf_i+0x1f2>
 800ef2e:	1b40      	subs	r0, r0, r5
 800ef30:	6060      	str	r0, [r4, #4]
 800ef32:	6863      	ldr	r3, [r4, #4]
 800ef34:	6123      	str	r3, [r4, #16]
 800ef36:	2300      	movs	r3, #0
 800ef38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef3c:	e7a8      	b.n	800ee90 <_printf_i+0x150>
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	462a      	mov	r2, r5
 800ef42:	4649      	mov	r1, r9
 800ef44:	4640      	mov	r0, r8
 800ef46:	47d0      	blx	sl
 800ef48:	3001      	adds	r0, #1
 800ef4a:	d0ab      	beq.n	800eea4 <_printf_i+0x164>
 800ef4c:	6823      	ldr	r3, [r4, #0]
 800ef4e:	079b      	lsls	r3, r3, #30
 800ef50:	d413      	bmi.n	800ef7a <_printf_i+0x23a>
 800ef52:	68e0      	ldr	r0, [r4, #12]
 800ef54:	9b03      	ldr	r3, [sp, #12]
 800ef56:	4298      	cmp	r0, r3
 800ef58:	bfb8      	it	lt
 800ef5a:	4618      	movlt	r0, r3
 800ef5c:	e7a4      	b.n	800eea8 <_printf_i+0x168>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	4632      	mov	r2, r6
 800ef62:	4649      	mov	r1, r9
 800ef64:	4640      	mov	r0, r8
 800ef66:	47d0      	blx	sl
 800ef68:	3001      	adds	r0, #1
 800ef6a:	d09b      	beq.n	800eea4 <_printf_i+0x164>
 800ef6c:	3501      	adds	r5, #1
 800ef6e:	68e3      	ldr	r3, [r4, #12]
 800ef70:	9903      	ldr	r1, [sp, #12]
 800ef72:	1a5b      	subs	r3, r3, r1
 800ef74:	42ab      	cmp	r3, r5
 800ef76:	dcf2      	bgt.n	800ef5e <_printf_i+0x21e>
 800ef78:	e7eb      	b.n	800ef52 <_printf_i+0x212>
 800ef7a:	2500      	movs	r5, #0
 800ef7c:	f104 0619 	add.w	r6, r4, #25
 800ef80:	e7f5      	b.n	800ef6e <_printf_i+0x22e>
 800ef82:	bf00      	nop
 800ef84:	08015f8e 	.word	0x08015f8e
 800ef88:	08015f9f 	.word	0x08015f9f

0800ef8c <_scanf_float>:
 800ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef90:	b087      	sub	sp, #28
 800ef92:	4617      	mov	r7, r2
 800ef94:	9303      	str	r3, [sp, #12]
 800ef96:	688b      	ldr	r3, [r1, #8]
 800ef98:	1e5a      	subs	r2, r3, #1
 800ef9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ef9e:	bf83      	ittte	hi
 800efa0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800efa4:	195b      	addhi	r3, r3, r5
 800efa6:	9302      	strhi	r3, [sp, #8]
 800efa8:	2300      	movls	r3, #0
 800efaa:	bf86      	itte	hi
 800efac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800efb0:	608b      	strhi	r3, [r1, #8]
 800efb2:	9302      	strls	r3, [sp, #8]
 800efb4:	680b      	ldr	r3, [r1, #0]
 800efb6:	468b      	mov	fp, r1
 800efb8:	2500      	movs	r5, #0
 800efba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800efbe:	f84b 3b1c 	str.w	r3, [fp], #28
 800efc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800efc6:	4680      	mov	r8, r0
 800efc8:	460c      	mov	r4, r1
 800efca:	465e      	mov	r6, fp
 800efcc:	46aa      	mov	sl, r5
 800efce:	46a9      	mov	r9, r5
 800efd0:	9501      	str	r5, [sp, #4]
 800efd2:	68a2      	ldr	r2, [r4, #8]
 800efd4:	b152      	cbz	r2, 800efec <_scanf_float+0x60>
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	2b4e      	cmp	r3, #78	; 0x4e
 800efdc:	d864      	bhi.n	800f0a8 <_scanf_float+0x11c>
 800efde:	2b40      	cmp	r3, #64	; 0x40
 800efe0:	d83c      	bhi.n	800f05c <_scanf_float+0xd0>
 800efe2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800efe6:	b2c8      	uxtb	r0, r1
 800efe8:	280e      	cmp	r0, #14
 800efea:	d93a      	bls.n	800f062 <_scanf_float+0xd6>
 800efec:	f1b9 0f00 	cmp.w	r9, #0
 800eff0:	d003      	beq.n	800effa <_scanf_float+0x6e>
 800eff2:	6823      	ldr	r3, [r4, #0]
 800eff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800effe:	f1ba 0f01 	cmp.w	sl, #1
 800f002:	f200 8113 	bhi.w	800f22c <_scanf_float+0x2a0>
 800f006:	455e      	cmp	r6, fp
 800f008:	f200 8105 	bhi.w	800f216 <_scanf_float+0x28a>
 800f00c:	2501      	movs	r5, #1
 800f00e:	4628      	mov	r0, r5
 800f010:	b007      	add	sp, #28
 800f012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f016:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f01a:	2a0d      	cmp	r2, #13
 800f01c:	d8e6      	bhi.n	800efec <_scanf_float+0x60>
 800f01e:	a101      	add	r1, pc, #4	; (adr r1, 800f024 <_scanf_float+0x98>)
 800f020:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f024:	0800f163 	.word	0x0800f163
 800f028:	0800efed 	.word	0x0800efed
 800f02c:	0800efed 	.word	0x0800efed
 800f030:	0800efed 	.word	0x0800efed
 800f034:	0800f1c3 	.word	0x0800f1c3
 800f038:	0800f19b 	.word	0x0800f19b
 800f03c:	0800efed 	.word	0x0800efed
 800f040:	0800efed 	.word	0x0800efed
 800f044:	0800f171 	.word	0x0800f171
 800f048:	0800efed 	.word	0x0800efed
 800f04c:	0800efed 	.word	0x0800efed
 800f050:	0800efed 	.word	0x0800efed
 800f054:	0800efed 	.word	0x0800efed
 800f058:	0800f129 	.word	0x0800f129
 800f05c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f060:	e7db      	b.n	800f01a <_scanf_float+0x8e>
 800f062:	290e      	cmp	r1, #14
 800f064:	d8c2      	bhi.n	800efec <_scanf_float+0x60>
 800f066:	a001      	add	r0, pc, #4	; (adr r0, 800f06c <_scanf_float+0xe0>)
 800f068:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f06c:	0800f11b 	.word	0x0800f11b
 800f070:	0800efed 	.word	0x0800efed
 800f074:	0800f11b 	.word	0x0800f11b
 800f078:	0800f1af 	.word	0x0800f1af
 800f07c:	0800efed 	.word	0x0800efed
 800f080:	0800f0c9 	.word	0x0800f0c9
 800f084:	0800f105 	.word	0x0800f105
 800f088:	0800f105 	.word	0x0800f105
 800f08c:	0800f105 	.word	0x0800f105
 800f090:	0800f105 	.word	0x0800f105
 800f094:	0800f105 	.word	0x0800f105
 800f098:	0800f105 	.word	0x0800f105
 800f09c:	0800f105 	.word	0x0800f105
 800f0a0:	0800f105 	.word	0x0800f105
 800f0a4:	0800f105 	.word	0x0800f105
 800f0a8:	2b6e      	cmp	r3, #110	; 0x6e
 800f0aa:	d809      	bhi.n	800f0c0 <_scanf_float+0x134>
 800f0ac:	2b60      	cmp	r3, #96	; 0x60
 800f0ae:	d8b2      	bhi.n	800f016 <_scanf_float+0x8a>
 800f0b0:	2b54      	cmp	r3, #84	; 0x54
 800f0b2:	d077      	beq.n	800f1a4 <_scanf_float+0x218>
 800f0b4:	2b59      	cmp	r3, #89	; 0x59
 800f0b6:	d199      	bne.n	800efec <_scanf_float+0x60>
 800f0b8:	2d07      	cmp	r5, #7
 800f0ba:	d197      	bne.n	800efec <_scanf_float+0x60>
 800f0bc:	2508      	movs	r5, #8
 800f0be:	e029      	b.n	800f114 <_scanf_float+0x188>
 800f0c0:	2b74      	cmp	r3, #116	; 0x74
 800f0c2:	d06f      	beq.n	800f1a4 <_scanf_float+0x218>
 800f0c4:	2b79      	cmp	r3, #121	; 0x79
 800f0c6:	e7f6      	b.n	800f0b6 <_scanf_float+0x12a>
 800f0c8:	6821      	ldr	r1, [r4, #0]
 800f0ca:	05c8      	lsls	r0, r1, #23
 800f0cc:	d51a      	bpl.n	800f104 <_scanf_float+0x178>
 800f0ce:	9b02      	ldr	r3, [sp, #8]
 800f0d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f0d4:	6021      	str	r1, [r4, #0]
 800f0d6:	f109 0901 	add.w	r9, r9, #1
 800f0da:	b11b      	cbz	r3, 800f0e4 <_scanf_float+0x158>
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	3201      	adds	r2, #1
 800f0e0:	9302      	str	r3, [sp, #8]
 800f0e2:	60a2      	str	r2, [r4, #8]
 800f0e4:	68a3      	ldr	r3, [r4, #8]
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	60a3      	str	r3, [r4, #8]
 800f0ea:	6923      	ldr	r3, [r4, #16]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	6123      	str	r3, [r4, #16]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3b01      	subs	r3, #1
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	607b      	str	r3, [r7, #4]
 800f0f8:	f340 8084 	ble.w	800f204 <_scanf_float+0x278>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	3301      	adds	r3, #1
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	e766      	b.n	800efd2 <_scanf_float+0x46>
 800f104:	eb1a 0f05 	cmn.w	sl, r5
 800f108:	f47f af70 	bne.w	800efec <_scanf_float+0x60>
 800f10c:	6822      	ldr	r2, [r4, #0]
 800f10e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f112:	6022      	str	r2, [r4, #0]
 800f114:	f806 3b01 	strb.w	r3, [r6], #1
 800f118:	e7e4      	b.n	800f0e4 <_scanf_float+0x158>
 800f11a:	6822      	ldr	r2, [r4, #0]
 800f11c:	0610      	lsls	r0, r2, #24
 800f11e:	f57f af65 	bpl.w	800efec <_scanf_float+0x60>
 800f122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f126:	e7f4      	b.n	800f112 <_scanf_float+0x186>
 800f128:	f1ba 0f00 	cmp.w	sl, #0
 800f12c:	d10e      	bne.n	800f14c <_scanf_float+0x1c0>
 800f12e:	f1b9 0f00 	cmp.w	r9, #0
 800f132:	d10e      	bne.n	800f152 <_scanf_float+0x1c6>
 800f134:	6822      	ldr	r2, [r4, #0]
 800f136:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f13a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f13e:	d108      	bne.n	800f152 <_scanf_float+0x1c6>
 800f140:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f144:	6022      	str	r2, [r4, #0]
 800f146:	f04f 0a01 	mov.w	sl, #1
 800f14a:	e7e3      	b.n	800f114 <_scanf_float+0x188>
 800f14c:	f1ba 0f02 	cmp.w	sl, #2
 800f150:	d055      	beq.n	800f1fe <_scanf_float+0x272>
 800f152:	2d01      	cmp	r5, #1
 800f154:	d002      	beq.n	800f15c <_scanf_float+0x1d0>
 800f156:	2d04      	cmp	r5, #4
 800f158:	f47f af48 	bne.w	800efec <_scanf_float+0x60>
 800f15c:	3501      	adds	r5, #1
 800f15e:	b2ed      	uxtb	r5, r5
 800f160:	e7d8      	b.n	800f114 <_scanf_float+0x188>
 800f162:	f1ba 0f01 	cmp.w	sl, #1
 800f166:	f47f af41 	bne.w	800efec <_scanf_float+0x60>
 800f16a:	f04f 0a02 	mov.w	sl, #2
 800f16e:	e7d1      	b.n	800f114 <_scanf_float+0x188>
 800f170:	b97d      	cbnz	r5, 800f192 <_scanf_float+0x206>
 800f172:	f1b9 0f00 	cmp.w	r9, #0
 800f176:	f47f af3c 	bne.w	800eff2 <_scanf_float+0x66>
 800f17a:	6822      	ldr	r2, [r4, #0]
 800f17c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f180:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f184:	f47f af39 	bne.w	800effa <_scanf_float+0x6e>
 800f188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f18c:	6022      	str	r2, [r4, #0]
 800f18e:	2501      	movs	r5, #1
 800f190:	e7c0      	b.n	800f114 <_scanf_float+0x188>
 800f192:	2d03      	cmp	r5, #3
 800f194:	d0e2      	beq.n	800f15c <_scanf_float+0x1d0>
 800f196:	2d05      	cmp	r5, #5
 800f198:	e7de      	b.n	800f158 <_scanf_float+0x1cc>
 800f19a:	2d02      	cmp	r5, #2
 800f19c:	f47f af26 	bne.w	800efec <_scanf_float+0x60>
 800f1a0:	2503      	movs	r5, #3
 800f1a2:	e7b7      	b.n	800f114 <_scanf_float+0x188>
 800f1a4:	2d06      	cmp	r5, #6
 800f1a6:	f47f af21 	bne.w	800efec <_scanf_float+0x60>
 800f1aa:	2507      	movs	r5, #7
 800f1ac:	e7b2      	b.n	800f114 <_scanf_float+0x188>
 800f1ae:	6822      	ldr	r2, [r4, #0]
 800f1b0:	0591      	lsls	r1, r2, #22
 800f1b2:	f57f af1b 	bpl.w	800efec <_scanf_float+0x60>
 800f1b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f1ba:	6022      	str	r2, [r4, #0]
 800f1bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1c0:	e7a8      	b.n	800f114 <_scanf_float+0x188>
 800f1c2:	6822      	ldr	r2, [r4, #0]
 800f1c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f1c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f1cc:	d006      	beq.n	800f1dc <_scanf_float+0x250>
 800f1ce:	0550      	lsls	r0, r2, #21
 800f1d0:	f57f af0c 	bpl.w	800efec <_scanf_float+0x60>
 800f1d4:	f1b9 0f00 	cmp.w	r9, #0
 800f1d8:	f43f af0f 	beq.w	800effa <_scanf_float+0x6e>
 800f1dc:	0591      	lsls	r1, r2, #22
 800f1de:	bf58      	it	pl
 800f1e0:	9901      	ldrpl	r1, [sp, #4]
 800f1e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f1e6:	bf58      	it	pl
 800f1e8:	eba9 0101 	subpl.w	r1, r9, r1
 800f1ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f1f0:	bf58      	it	pl
 800f1f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f1f6:	6022      	str	r2, [r4, #0]
 800f1f8:	f04f 0900 	mov.w	r9, #0
 800f1fc:	e78a      	b.n	800f114 <_scanf_float+0x188>
 800f1fe:	f04f 0a03 	mov.w	sl, #3
 800f202:	e787      	b.n	800f114 <_scanf_float+0x188>
 800f204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f208:	4639      	mov	r1, r7
 800f20a:	4640      	mov	r0, r8
 800f20c:	4798      	blx	r3
 800f20e:	2800      	cmp	r0, #0
 800f210:	f43f aedf 	beq.w	800efd2 <_scanf_float+0x46>
 800f214:	e6ea      	b.n	800efec <_scanf_float+0x60>
 800f216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f21a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f21e:	463a      	mov	r2, r7
 800f220:	4640      	mov	r0, r8
 800f222:	4798      	blx	r3
 800f224:	6923      	ldr	r3, [r4, #16]
 800f226:	3b01      	subs	r3, #1
 800f228:	6123      	str	r3, [r4, #16]
 800f22a:	e6ec      	b.n	800f006 <_scanf_float+0x7a>
 800f22c:	1e6b      	subs	r3, r5, #1
 800f22e:	2b06      	cmp	r3, #6
 800f230:	d825      	bhi.n	800f27e <_scanf_float+0x2f2>
 800f232:	2d02      	cmp	r5, #2
 800f234:	d836      	bhi.n	800f2a4 <_scanf_float+0x318>
 800f236:	455e      	cmp	r6, fp
 800f238:	f67f aee8 	bls.w	800f00c <_scanf_float+0x80>
 800f23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f240:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f244:	463a      	mov	r2, r7
 800f246:	4640      	mov	r0, r8
 800f248:	4798      	blx	r3
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	3b01      	subs	r3, #1
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	e7f1      	b.n	800f236 <_scanf_float+0x2aa>
 800f252:	9802      	ldr	r0, [sp, #8]
 800f254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f258:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f25c:	9002      	str	r0, [sp, #8]
 800f25e:	463a      	mov	r2, r7
 800f260:	4640      	mov	r0, r8
 800f262:	4798      	blx	r3
 800f264:	6923      	ldr	r3, [r4, #16]
 800f266:	3b01      	subs	r3, #1
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f26e:	fa5f fa8a 	uxtb.w	sl, sl
 800f272:	f1ba 0f02 	cmp.w	sl, #2
 800f276:	d1ec      	bne.n	800f252 <_scanf_float+0x2c6>
 800f278:	3d03      	subs	r5, #3
 800f27a:	b2ed      	uxtb	r5, r5
 800f27c:	1b76      	subs	r6, r6, r5
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	05da      	lsls	r2, r3, #23
 800f282:	d52f      	bpl.n	800f2e4 <_scanf_float+0x358>
 800f284:	055b      	lsls	r3, r3, #21
 800f286:	d510      	bpl.n	800f2aa <_scanf_float+0x31e>
 800f288:	455e      	cmp	r6, fp
 800f28a:	f67f aebf 	bls.w	800f00c <_scanf_float+0x80>
 800f28e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f296:	463a      	mov	r2, r7
 800f298:	4640      	mov	r0, r8
 800f29a:	4798      	blx	r3
 800f29c:	6923      	ldr	r3, [r4, #16]
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	6123      	str	r3, [r4, #16]
 800f2a2:	e7f1      	b.n	800f288 <_scanf_float+0x2fc>
 800f2a4:	46aa      	mov	sl, r5
 800f2a6:	9602      	str	r6, [sp, #8]
 800f2a8:	e7df      	b.n	800f26a <_scanf_float+0x2de>
 800f2aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f2ae:	6923      	ldr	r3, [r4, #16]
 800f2b0:	2965      	cmp	r1, #101	; 0x65
 800f2b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f2ba:	6123      	str	r3, [r4, #16]
 800f2bc:	d00c      	beq.n	800f2d8 <_scanf_float+0x34c>
 800f2be:	2945      	cmp	r1, #69	; 0x45
 800f2c0:	d00a      	beq.n	800f2d8 <_scanf_float+0x34c>
 800f2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2c6:	463a      	mov	r2, r7
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	4798      	blx	r3
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	1eb5      	subs	r5, r6, #2
 800f2d6:	6123      	str	r3, [r4, #16]
 800f2d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2dc:	463a      	mov	r2, r7
 800f2de:	4640      	mov	r0, r8
 800f2e0:	4798      	blx	r3
 800f2e2:	462e      	mov	r6, r5
 800f2e4:	6825      	ldr	r5, [r4, #0]
 800f2e6:	f015 0510 	ands.w	r5, r5, #16
 800f2ea:	d159      	bne.n	800f3a0 <_scanf_float+0x414>
 800f2ec:	7035      	strb	r5, [r6, #0]
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2f8:	d11b      	bne.n	800f332 <_scanf_float+0x3a6>
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	454b      	cmp	r3, r9
 800f2fe:	eba3 0209 	sub.w	r2, r3, r9
 800f302:	d123      	bne.n	800f34c <_scanf_float+0x3c0>
 800f304:	2200      	movs	r2, #0
 800f306:	4659      	mov	r1, fp
 800f308:	4640      	mov	r0, r8
 800f30a:	f000 ff57 	bl	80101bc <_strtod_r>
 800f30e:	6822      	ldr	r2, [r4, #0]
 800f310:	9b03      	ldr	r3, [sp, #12]
 800f312:	f012 0f02 	tst.w	r2, #2
 800f316:	ec57 6b10 	vmov	r6, r7, d0
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	d021      	beq.n	800f362 <_scanf_float+0x3d6>
 800f31e:	9903      	ldr	r1, [sp, #12]
 800f320:	1d1a      	adds	r2, r3, #4
 800f322:	600a      	str	r2, [r1, #0]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	e9c3 6700 	strd	r6, r7, [r3]
 800f32a:	68e3      	ldr	r3, [r4, #12]
 800f32c:	3301      	adds	r3, #1
 800f32e:	60e3      	str	r3, [r4, #12]
 800f330:	e66d      	b.n	800f00e <_scanf_float+0x82>
 800f332:	9b04      	ldr	r3, [sp, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d0e5      	beq.n	800f304 <_scanf_float+0x378>
 800f338:	9905      	ldr	r1, [sp, #20]
 800f33a:	230a      	movs	r3, #10
 800f33c:	462a      	mov	r2, r5
 800f33e:	3101      	adds	r1, #1
 800f340:	4640      	mov	r0, r8
 800f342:	f000 ffc3 	bl	80102cc <_strtol_r>
 800f346:	9b04      	ldr	r3, [sp, #16]
 800f348:	9e05      	ldr	r6, [sp, #20]
 800f34a:	1ac2      	subs	r2, r0, r3
 800f34c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f350:	429e      	cmp	r6, r3
 800f352:	bf28      	it	cs
 800f354:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f358:	4912      	ldr	r1, [pc, #72]	; (800f3a4 <_scanf_float+0x418>)
 800f35a:	4630      	mov	r0, r6
 800f35c:	f000 f8a6 	bl	800f4ac <siprintf>
 800f360:	e7d0      	b.n	800f304 <_scanf_float+0x378>
 800f362:	9903      	ldr	r1, [sp, #12]
 800f364:	f012 0f04 	tst.w	r2, #4
 800f368:	f103 0204 	add.w	r2, r3, #4
 800f36c:	600a      	str	r2, [r1, #0]
 800f36e:	d1d9      	bne.n	800f324 <_scanf_float+0x398>
 800f370:	f8d3 8000 	ldr.w	r8, [r3]
 800f374:	ee10 2a10 	vmov	r2, s0
 800f378:	ee10 0a10 	vmov	r0, s0
 800f37c:	463b      	mov	r3, r7
 800f37e:	4639      	mov	r1, r7
 800f380:	f7f1 fbac 	bl	8000adc <__aeabi_dcmpun>
 800f384:	b128      	cbz	r0, 800f392 <_scanf_float+0x406>
 800f386:	4808      	ldr	r0, [pc, #32]	; (800f3a8 <_scanf_float+0x41c>)
 800f388:	f000 f88a 	bl	800f4a0 <nanf>
 800f38c:	ed88 0a00 	vstr	s0, [r8]
 800f390:	e7cb      	b.n	800f32a <_scanf_float+0x39e>
 800f392:	4630      	mov	r0, r6
 800f394:	4639      	mov	r1, r7
 800f396:	f7f1 fbff 	bl	8000b98 <__aeabi_d2f>
 800f39a:	f8c8 0000 	str.w	r0, [r8]
 800f39e:	e7c4      	b.n	800f32a <_scanf_float+0x39e>
 800f3a0:	2500      	movs	r5, #0
 800f3a2:	e634      	b.n	800f00e <_scanf_float+0x82>
 800f3a4:	08015fb0 	.word	0x08015fb0
 800f3a8:	080163b8 	.word	0x080163b8

0800f3ac <cleanup_glue>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	6809      	ldr	r1, [r1, #0]
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	b109      	cbz	r1, 800f3ba <cleanup_glue+0xe>
 800f3b6:	f7ff fff9 	bl	800f3ac <cleanup_glue>
 800f3ba:	4621      	mov	r1, r4
 800f3bc:	4628      	mov	r0, r5
 800f3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3c2:	f002 bf69 	b.w	8012298 <_free_r>
	...

0800f3c8 <_reclaim_reent>:
 800f3c8:	4b2c      	ldr	r3, [pc, #176]	; (800f47c <_reclaim_reent+0xb4>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4283      	cmp	r3, r0
 800f3ce:	b570      	push	{r4, r5, r6, lr}
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	d051      	beq.n	800f478 <_reclaim_reent+0xb0>
 800f3d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f3d6:	b143      	cbz	r3, 800f3ea <_reclaim_reent+0x22>
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d14a      	bne.n	800f474 <_reclaim_reent+0xac>
 800f3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3e0:	6819      	ldr	r1, [r3, #0]
 800f3e2:	b111      	cbz	r1, 800f3ea <_reclaim_reent+0x22>
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f002 ff57 	bl	8012298 <_free_r>
 800f3ea:	6961      	ldr	r1, [r4, #20]
 800f3ec:	b111      	cbz	r1, 800f3f4 <_reclaim_reent+0x2c>
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f002 ff52 	bl	8012298 <_free_r>
 800f3f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f3f6:	b111      	cbz	r1, 800f3fe <_reclaim_reent+0x36>
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	f002 ff4d 	bl	8012298 <_free_r>
 800f3fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f400:	b111      	cbz	r1, 800f408 <_reclaim_reent+0x40>
 800f402:	4620      	mov	r0, r4
 800f404:	f002 ff48 	bl	8012298 <_free_r>
 800f408:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f40a:	b111      	cbz	r1, 800f412 <_reclaim_reent+0x4a>
 800f40c:	4620      	mov	r0, r4
 800f40e:	f002 ff43 	bl	8012298 <_free_r>
 800f412:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f414:	b111      	cbz	r1, 800f41c <_reclaim_reent+0x54>
 800f416:	4620      	mov	r0, r4
 800f418:	f002 ff3e 	bl	8012298 <_free_r>
 800f41c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f41e:	b111      	cbz	r1, 800f426 <_reclaim_reent+0x5e>
 800f420:	4620      	mov	r0, r4
 800f422:	f002 ff39 	bl	8012298 <_free_r>
 800f426:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f428:	b111      	cbz	r1, 800f430 <_reclaim_reent+0x68>
 800f42a:	4620      	mov	r0, r4
 800f42c:	f002 ff34 	bl	8012298 <_free_r>
 800f430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f432:	b111      	cbz	r1, 800f43a <_reclaim_reent+0x72>
 800f434:	4620      	mov	r0, r4
 800f436:	f002 ff2f 	bl	8012298 <_free_r>
 800f43a:	69a3      	ldr	r3, [r4, #24]
 800f43c:	b1e3      	cbz	r3, 800f478 <_reclaim_reent+0xb0>
 800f43e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f440:	4620      	mov	r0, r4
 800f442:	4798      	blx	r3
 800f444:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f446:	b1b9      	cbz	r1, 800f478 <_reclaim_reent+0xb0>
 800f448:	4620      	mov	r0, r4
 800f44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f44e:	f7ff bfad 	b.w	800f3ac <cleanup_glue>
 800f452:	5949      	ldr	r1, [r1, r5]
 800f454:	b941      	cbnz	r1, 800f468 <_reclaim_reent+0xa0>
 800f456:	3504      	adds	r5, #4
 800f458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f45a:	2d80      	cmp	r5, #128	; 0x80
 800f45c:	68d9      	ldr	r1, [r3, #12]
 800f45e:	d1f8      	bne.n	800f452 <_reclaim_reent+0x8a>
 800f460:	4620      	mov	r0, r4
 800f462:	f002 ff19 	bl	8012298 <_free_r>
 800f466:	e7ba      	b.n	800f3de <_reclaim_reent+0x16>
 800f468:	680e      	ldr	r6, [r1, #0]
 800f46a:	4620      	mov	r0, r4
 800f46c:	f002 ff14 	bl	8012298 <_free_r>
 800f470:	4631      	mov	r1, r6
 800f472:	e7ef      	b.n	800f454 <_reclaim_reent+0x8c>
 800f474:	2500      	movs	r5, #0
 800f476:	e7ef      	b.n	800f458 <_reclaim_reent+0x90>
 800f478:	bd70      	pop	{r4, r5, r6, pc}
 800f47a:	bf00      	nop
 800f47c:	200000b4 	.word	0x200000b4

0800f480 <_sbrk_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4d06      	ldr	r5, [pc, #24]	; (800f49c <_sbrk_r+0x1c>)
 800f484:	2300      	movs	r3, #0
 800f486:	4604      	mov	r4, r0
 800f488:	4608      	mov	r0, r1
 800f48a:	602b      	str	r3, [r5, #0]
 800f48c:	f7f6 fd20 	bl	8005ed0 <_sbrk>
 800f490:	1c43      	adds	r3, r0, #1
 800f492:	d102      	bne.n	800f49a <_sbrk_r+0x1a>
 800f494:	682b      	ldr	r3, [r5, #0]
 800f496:	b103      	cbz	r3, 800f49a <_sbrk_r+0x1a>
 800f498:	6023      	str	r3, [r4, #0]
 800f49a:	bd38      	pop	{r3, r4, r5, pc}
 800f49c:	200036c0 	.word	0x200036c0

0800f4a0 <nanf>:
 800f4a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f4a8 <nanf+0x8>
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	7fc00000 	.word	0x7fc00000

0800f4ac <siprintf>:
 800f4ac:	b40e      	push	{r1, r2, r3}
 800f4ae:	b500      	push	{lr}
 800f4b0:	b09c      	sub	sp, #112	; 0x70
 800f4b2:	ab1d      	add	r3, sp, #116	; 0x74
 800f4b4:	9002      	str	r0, [sp, #8]
 800f4b6:	9006      	str	r0, [sp, #24]
 800f4b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4bc:	4809      	ldr	r0, [pc, #36]	; (800f4e4 <siprintf+0x38>)
 800f4be:	9107      	str	r1, [sp, #28]
 800f4c0:	9104      	str	r1, [sp, #16]
 800f4c2:	4909      	ldr	r1, [pc, #36]	; (800f4e8 <siprintf+0x3c>)
 800f4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c8:	9105      	str	r1, [sp, #20]
 800f4ca:	6800      	ldr	r0, [r0, #0]
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	a902      	add	r1, sp, #8
 800f4d0:	f002 ff8a 	bl	80123e8 <_svfiprintf_r>
 800f4d4:	9b02      	ldr	r3, [sp, #8]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	701a      	strb	r2, [r3, #0]
 800f4da:	b01c      	add	sp, #112	; 0x70
 800f4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e0:	b003      	add	sp, #12
 800f4e2:	4770      	bx	lr
 800f4e4:	200000b4 	.word	0x200000b4
 800f4e8:	ffff0208 	.word	0xffff0208

0800f4ec <__sread>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4f4:	f003 f878 	bl	80125e8 <_read_r>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	bfab      	itete	ge
 800f4fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4fe:	89a3      	ldrhlt	r3, [r4, #12]
 800f500:	181b      	addge	r3, r3, r0
 800f502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f506:	bfac      	ite	ge
 800f508:	6563      	strge	r3, [r4, #84]	; 0x54
 800f50a:	81a3      	strhlt	r3, [r4, #12]
 800f50c:	bd10      	pop	{r4, pc}

0800f50e <__swrite>:
 800f50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f512:	461f      	mov	r7, r3
 800f514:	898b      	ldrh	r3, [r1, #12]
 800f516:	05db      	lsls	r3, r3, #23
 800f518:	4605      	mov	r5, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	4616      	mov	r6, r2
 800f51e:	d505      	bpl.n	800f52c <__swrite+0x1e>
 800f520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f524:	2302      	movs	r3, #2
 800f526:	2200      	movs	r2, #0
 800f528:	f002 f9a6 	bl	8011878 <_lseek_r>
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f536:	81a3      	strh	r3, [r4, #12]
 800f538:	4632      	mov	r2, r6
 800f53a:	463b      	mov	r3, r7
 800f53c:	4628      	mov	r0, r5
 800f53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f542:	f000 bec5 	b.w	80102d0 <_write_r>

0800f546 <__sseek>:
 800f546:	b510      	push	{r4, lr}
 800f548:	460c      	mov	r4, r1
 800f54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54e:	f002 f993 	bl	8011878 <_lseek_r>
 800f552:	1c43      	adds	r3, r0, #1
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	bf15      	itete	ne
 800f558:	6560      	strne	r0, [r4, #84]	; 0x54
 800f55a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f55e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f562:	81a3      	strheq	r3, [r4, #12]
 800f564:	bf18      	it	ne
 800f566:	81a3      	strhne	r3, [r4, #12]
 800f568:	bd10      	pop	{r4, pc}

0800f56a <__sclose>:
 800f56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f56e:	f000 bec1 	b.w	80102f4 <_close_r>

0800f572 <sulp>:
 800f572:	b570      	push	{r4, r5, r6, lr}
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	ec45 4b10 	vmov	d0, r4, r5
 800f57c:	4616      	mov	r6, r2
 800f57e:	f002 fd25 	bl	8011fcc <__ulp>
 800f582:	ec51 0b10 	vmov	r0, r1, d0
 800f586:	b17e      	cbz	r6, 800f5a8 <sulp+0x36>
 800f588:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f58c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f590:	2b00      	cmp	r3, #0
 800f592:	dd09      	ble.n	800f5a8 <sulp+0x36>
 800f594:	051b      	lsls	r3, r3, #20
 800f596:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f59a:	2400      	movs	r4, #0
 800f59c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	f7f1 f800 	bl	80005a8 <__aeabi_dmul>
 800f5a8:	bd70      	pop	{r4, r5, r6, pc}
 800f5aa:	0000      	movs	r0, r0
 800f5ac:	0000      	movs	r0, r0
	...

0800f5b0 <_strtod_l>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	ed2d 8b02 	vpush	{d8}
 800f5b8:	b09d      	sub	sp, #116	; 0x74
 800f5ba:	461f      	mov	r7, r3
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9318      	str	r3, [sp, #96]	; 0x60
 800f5c0:	4ba2      	ldr	r3, [pc, #648]	; (800f84c <_strtod_l+0x29c>)
 800f5c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	9305      	str	r3, [sp, #20]
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	4688      	mov	r8, r1
 800f5ce:	f7f0 fdd7 	bl	8000180 <strlen>
 800f5d2:	f04f 0a00 	mov.w	sl, #0
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	f04f 0b00 	mov.w	fp, #0
 800f5dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5e2:	781a      	ldrb	r2, [r3, #0]
 800f5e4:	2a2b      	cmp	r2, #43	; 0x2b
 800f5e6:	d04e      	beq.n	800f686 <_strtod_l+0xd6>
 800f5e8:	d83b      	bhi.n	800f662 <_strtod_l+0xb2>
 800f5ea:	2a0d      	cmp	r2, #13
 800f5ec:	d834      	bhi.n	800f658 <_strtod_l+0xa8>
 800f5ee:	2a08      	cmp	r2, #8
 800f5f0:	d834      	bhi.n	800f65c <_strtod_l+0xac>
 800f5f2:	2a00      	cmp	r2, #0
 800f5f4:	d03e      	beq.n	800f674 <_strtod_l+0xc4>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800f5fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f5fc:	7833      	ldrb	r3, [r6, #0]
 800f5fe:	2b30      	cmp	r3, #48	; 0x30
 800f600:	f040 80b0 	bne.w	800f764 <_strtod_l+0x1b4>
 800f604:	7873      	ldrb	r3, [r6, #1]
 800f606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f60a:	2b58      	cmp	r3, #88	; 0x58
 800f60c:	d168      	bne.n	800f6e0 <_strtod_l+0x130>
 800f60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f610:	9301      	str	r3, [sp, #4]
 800f612:	ab18      	add	r3, sp, #96	; 0x60
 800f614:	9702      	str	r7, [sp, #8]
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	4a8d      	ldr	r2, [pc, #564]	; (800f850 <_strtod_l+0x2a0>)
 800f61a:	ab19      	add	r3, sp, #100	; 0x64
 800f61c:	a917      	add	r1, sp, #92	; 0x5c
 800f61e:	4620      	mov	r0, r4
 800f620:	f001 fe1e 	bl	8011260 <__gethex>
 800f624:	f010 0707 	ands.w	r7, r0, #7
 800f628:	4605      	mov	r5, r0
 800f62a:	d005      	beq.n	800f638 <_strtod_l+0x88>
 800f62c:	2f06      	cmp	r7, #6
 800f62e:	d12c      	bne.n	800f68a <_strtod_l+0xda>
 800f630:	3601      	adds	r6, #1
 800f632:	2300      	movs	r3, #0
 800f634:	9617      	str	r6, [sp, #92]	; 0x5c
 800f636:	930a      	str	r3, [sp, #40]	; 0x28
 800f638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f040 8590 	bne.w	8010160 <_strtod_l+0xbb0>
 800f640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f642:	b1eb      	cbz	r3, 800f680 <_strtod_l+0xd0>
 800f644:	4652      	mov	r2, sl
 800f646:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f64a:	ec43 2b10 	vmov	d0, r2, r3
 800f64e:	b01d      	add	sp, #116	; 0x74
 800f650:	ecbd 8b02 	vpop	{d8}
 800f654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f658:	2a20      	cmp	r2, #32
 800f65a:	d1cc      	bne.n	800f5f6 <_strtod_l+0x46>
 800f65c:	3301      	adds	r3, #1
 800f65e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f660:	e7be      	b.n	800f5e0 <_strtod_l+0x30>
 800f662:	2a2d      	cmp	r2, #45	; 0x2d
 800f664:	d1c7      	bne.n	800f5f6 <_strtod_l+0x46>
 800f666:	2201      	movs	r2, #1
 800f668:	920a      	str	r2, [sp, #40]	; 0x28
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f66e:	785b      	ldrb	r3, [r3, #1]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1c2      	bne.n	800f5fa <_strtod_l+0x4a>
 800f674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f676:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f040 856e 	bne.w	801015c <_strtod_l+0xbac>
 800f680:	4652      	mov	r2, sl
 800f682:	465b      	mov	r3, fp
 800f684:	e7e1      	b.n	800f64a <_strtod_l+0x9a>
 800f686:	2200      	movs	r2, #0
 800f688:	e7ee      	b.n	800f668 <_strtod_l+0xb8>
 800f68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f68c:	b13a      	cbz	r2, 800f69e <_strtod_l+0xee>
 800f68e:	2135      	movs	r1, #53	; 0x35
 800f690:	a81a      	add	r0, sp, #104	; 0x68
 800f692:	f002 fda6 	bl	80121e2 <__copybits>
 800f696:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f698:	4620      	mov	r0, r4
 800f69a:	f002 f965 	bl	8011968 <_Bfree>
 800f69e:	3f01      	subs	r7, #1
 800f6a0:	2f04      	cmp	r7, #4
 800f6a2:	d806      	bhi.n	800f6b2 <_strtod_l+0x102>
 800f6a4:	e8df f007 	tbb	[pc, r7]
 800f6a8:	1714030a 	.word	0x1714030a
 800f6ac:	0a          	.byte	0x0a
 800f6ad:	00          	.byte	0x00
 800f6ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f6b2:	0728      	lsls	r0, r5, #28
 800f6b4:	d5c0      	bpl.n	800f638 <_strtod_l+0x88>
 800f6b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f6ba:	e7bd      	b.n	800f638 <_strtod_l+0x88>
 800f6bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f6c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f6c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f6c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f6ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f6ce:	e7f0      	b.n	800f6b2 <_strtod_l+0x102>
 800f6d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f854 <_strtod_l+0x2a4>
 800f6d4:	e7ed      	b.n	800f6b2 <_strtod_l+0x102>
 800f6d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f6da:	f04f 3aff 	mov.w	sl, #4294967295
 800f6de:	e7e8      	b.n	800f6b2 <_strtod_l+0x102>
 800f6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6e2:	1c5a      	adds	r2, r3, #1
 800f6e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f6e6:	785b      	ldrb	r3, [r3, #1]
 800f6e8:	2b30      	cmp	r3, #48	; 0x30
 800f6ea:	d0f9      	beq.n	800f6e0 <_strtod_l+0x130>
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0a3      	beq.n	800f638 <_strtod_l+0x88>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	f04f 0900 	mov.w	r9, #0
 800f6f6:	9304      	str	r3, [sp, #16]
 800f6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6fa:	9308      	str	r3, [sp, #32]
 800f6fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800f700:	464f      	mov	r7, r9
 800f702:	220a      	movs	r2, #10
 800f704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f706:	7806      	ldrb	r6, [r0, #0]
 800f708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f70c:	b2d9      	uxtb	r1, r3
 800f70e:	2909      	cmp	r1, #9
 800f710:	d92a      	bls.n	800f768 <_strtod_l+0x1b8>
 800f712:	9905      	ldr	r1, [sp, #20]
 800f714:	462a      	mov	r2, r5
 800f716:	f002 ff83 	bl	8012620 <strncmp>
 800f71a:	b398      	cbz	r0, 800f784 <_strtod_l+0x1d4>
 800f71c:	2000      	movs	r0, #0
 800f71e:	4632      	mov	r2, r6
 800f720:	463d      	mov	r5, r7
 800f722:	9005      	str	r0, [sp, #20]
 800f724:	4603      	mov	r3, r0
 800f726:	2a65      	cmp	r2, #101	; 0x65
 800f728:	d001      	beq.n	800f72e <_strtod_l+0x17e>
 800f72a:	2a45      	cmp	r2, #69	; 0x45
 800f72c:	d118      	bne.n	800f760 <_strtod_l+0x1b0>
 800f72e:	b91d      	cbnz	r5, 800f738 <_strtod_l+0x188>
 800f730:	9a04      	ldr	r2, [sp, #16]
 800f732:	4302      	orrs	r2, r0
 800f734:	d09e      	beq.n	800f674 <_strtod_l+0xc4>
 800f736:	2500      	movs	r5, #0
 800f738:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f73c:	f108 0201 	add.w	r2, r8, #1
 800f740:	9217      	str	r2, [sp, #92]	; 0x5c
 800f742:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f746:	2a2b      	cmp	r2, #43	; 0x2b
 800f748:	d075      	beq.n	800f836 <_strtod_l+0x286>
 800f74a:	2a2d      	cmp	r2, #45	; 0x2d
 800f74c:	d07b      	beq.n	800f846 <_strtod_l+0x296>
 800f74e:	f04f 0c00 	mov.w	ip, #0
 800f752:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f756:	2909      	cmp	r1, #9
 800f758:	f240 8082 	bls.w	800f860 <_strtod_l+0x2b0>
 800f75c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f760:	2600      	movs	r6, #0
 800f762:	e09d      	b.n	800f8a0 <_strtod_l+0x2f0>
 800f764:	2300      	movs	r3, #0
 800f766:	e7c4      	b.n	800f6f2 <_strtod_l+0x142>
 800f768:	2f08      	cmp	r7, #8
 800f76a:	bfd8      	it	le
 800f76c:	9907      	ldrle	r1, [sp, #28]
 800f76e:	f100 0001 	add.w	r0, r0, #1
 800f772:	bfda      	itte	le
 800f774:	fb02 3301 	mlale	r3, r2, r1, r3
 800f778:	9307      	strle	r3, [sp, #28]
 800f77a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f77e:	3701      	adds	r7, #1
 800f780:	9017      	str	r0, [sp, #92]	; 0x5c
 800f782:	e7bf      	b.n	800f704 <_strtod_l+0x154>
 800f784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f786:	195a      	adds	r2, r3, r5
 800f788:	9217      	str	r2, [sp, #92]	; 0x5c
 800f78a:	5d5a      	ldrb	r2, [r3, r5]
 800f78c:	2f00      	cmp	r7, #0
 800f78e:	d037      	beq.n	800f800 <_strtod_l+0x250>
 800f790:	9005      	str	r0, [sp, #20]
 800f792:	463d      	mov	r5, r7
 800f794:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f798:	2b09      	cmp	r3, #9
 800f79a:	d912      	bls.n	800f7c2 <_strtod_l+0x212>
 800f79c:	2301      	movs	r3, #1
 800f79e:	e7c2      	b.n	800f726 <_strtod_l+0x176>
 800f7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7a6:	785a      	ldrb	r2, [r3, #1]
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	2a30      	cmp	r2, #48	; 0x30
 800f7ac:	d0f8      	beq.n	800f7a0 <_strtod_l+0x1f0>
 800f7ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f7b2:	2b08      	cmp	r3, #8
 800f7b4:	f200 84d9 	bhi.w	801016a <_strtod_l+0xbba>
 800f7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7ba:	9005      	str	r0, [sp, #20]
 800f7bc:	2000      	movs	r0, #0
 800f7be:	9308      	str	r3, [sp, #32]
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	3a30      	subs	r2, #48	; 0x30
 800f7c4:	f100 0301 	add.w	r3, r0, #1
 800f7c8:	d014      	beq.n	800f7f4 <_strtod_l+0x244>
 800f7ca:	9905      	ldr	r1, [sp, #20]
 800f7cc:	4419      	add	r1, r3
 800f7ce:	9105      	str	r1, [sp, #20]
 800f7d0:	462b      	mov	r3, r5
 800f7d2:	eb00 0e05 	add.w	lr, r0, r5
 800f7d6:	210a      	movs	r1, #10
 800f7d8:	4573      	cmp	r3, lr
 800f7da:	d113      	bne.n	800f804 <_strtod_l+0x254>
 800f7dc:	182b      	adds	r3, r5, r0
 800f7de:	2b08      	cmp	r3, #8
 800f7e0:	f105 0501 	add.w	r5, r5, #1
 800f7e4:	4405      	add	r5, r0
 800f7e6:	dc1c      	bgt.n	800f822 <_strtod_l+0x272>
 800f7e8:	9907      	ldr	r1, [sp, #28]
 800f7ea:	230a      	movs	r3, #10
 800f7ec:	fb03 2301 	mla	r3, r3, r1, r2
 800f7f0:	9307      	str	r3, [sp, #28]
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7f6:	1c51      	adds	r1, r2, #1
 800f7f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800f7fa:	7852      	ldrb	r2, [r2, #1]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	e7c9      	b.n	800f794 <_strtod_l+0x1e4>
 800f800:	4638      	mov	r0, r7
 800f802:	e7d2      	b.n	800f7aa <_strtod_l+0x1fa>
 800f804:	2b08      	cmp	r3, #8
 800f806:	dc04      	bgt.n	800f812 <_strtod_l+0x262>
 800f808:	9e07      	ldr	r6, [sp, #28]
 800f80a:	434e      	muls	r6, r1
 800f80c:	9607      	str	r6, [sp, #28]
 800f80e:	3301      	adds	r3, #1
 800f810:	e7e2      	b.n	800f7d8 <_strtod_l+0x228>
 800f812:	f103 0c01 	add.w	ip, r3, #1
 800f816:	f1bc 0f10 	cmp.w	ip, #16
 800f81a:	bfd8      	it	le
 800f81c:	fb01 f909 	mulle.w	r9, r1, r9
 800f820:	e7f5      	b.n	800f80e <_strtod_l+0x25e>
 800f822:	2d10      	cmp	r5, #16
 800f824:	bfdc      	itt	le
 800f826:	230a      	movle	r3, #10
 800f828:	fb03 2909 	mlale	r9, r3, r9, r2
 800f82c:	e7e1      	b.n	800f7f2 <_strtod_l+0x242>
 800f82e:	2300      	movs	r3, #0
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	2301      	movs	r3, #1
 800f834:	e77c      	b.n	800f730 <_strtod_l+0x180>
 800f836:	f04f 0c00 	mov.w	ip, #0
 800f83a:	f108 0202 	add.w	r2, r8, #2
 800f83e:	9217      	str	r2, [sp, #92]	; 0x5c
 800f840:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f844:	e785      	b.n	800f752 <_strtod_l+0x1a2>
 800f846:	f04f 0c01 	mov.w	ip, #1
 800f84a:	e7f6      	b.n	800f83a <_strtod_l+0x28a>
 800f84c:	08016200 	.word	0x08016200
 800f850:	08015fb8 	.word	0x08015fb8
 800f854:	7ff00000 	.word	0x7ff00000
 800f858:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f85a:	1c51      	adds	r1, r2, #1
 800f85c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f85e:	7852      	ldrb	r2, [r2, #1]
 800f860:	2a30      	cmp	r2, #48	; 0x30
 800f862:	d0f9      	beq.n	800f858 <_strtod_l+0x2a8>
 800f864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f868:	2908      	cmp	r1, #8
 800f86a:	f63f af79 	bhi.w	800f760 <_strtod_l+0x1b0>
 800f86e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f874:	9206      	str	r2, [sp, #24]
 800f876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f878:	1c51      	adds	r1, r2, #1
 800f87a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f87c:	7852      	ldrb	r2, [r2, #1]
 800f87e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f882:	2e09      	cmp	r6, #9
 800f884:	d937      	bls.n	800f8f6 <_strtod_l+0x346>
 800f886:	9e06      	ldr	r6, [sp, #24]
 800f888:	1b89      	subs	r1, r1, r6
 800f88a:	2908      	cmp	r1, #8
 800f88c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f890:	dc02      	bgt.n	800f898 <_strtod_l+0x2e8>
 800f892:	4576      	cmp	r6, lr
 800f894:	bfa8      	it	ge
 800f896:	4676      	movge	r6, lr
 800f898:	f1bc 0f00 	cmp.w	ip, #0
 800f89c:	d000      	beq.n	800f8a0 <_strtod_l+0x2f0>
 800f89e:	4276      	negs	r6, r6
 800f8a0:	2d00      	cmp	r5, #0
 800f8a2:	d14d      	bne.n	800f940 <_strtod_l+0x390>
 800f8a4:	9904      	ldr	r1, [sp, #16]
 800f8a6:	4301      	orrs	r1, r0
 800f8a8:	f47f aec6 	bne.w	800f638 <_strtod_l+0x88>
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f47f aee1 	bne.w	800f674 <_strtod_l+0xc4>
 800f8b2:	2a69      	cmp	r2, #105	; 0x69
 800f8b4:	d027      	beq.n	800f906 <_strtod_l+0x356>
 800f8b6:	dc24      	bgt.n	800f902 <_strtod_l+0x352>
 800f8b8:	2a49      	cmp	r2, #73	; 0x49
 800f8ba:	d024      	beq.n	800f906 <_strtod_l+0x356>
 800f8bc:	2a4e      	cmp	r2, #78	; 0x4e
 800f8be:	f47f aed9 	bne.w	800f674 <_strtod_l+0xc4>
 800f8c2:	499f      	ldr	r1, [pc, #636]	; (800fb40 <_strtod_l+0x590>)
 800f8c4:	a817      	add	r0, sp, #92	; 0x5c
 800f8c6:	f001 ff23 	bl	8011710 <__match>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	f43f aed2 	beq.w	800f674 <_strtod_l+0xc4>
 800f8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b28      	cmp	r3, #40	; 0x28
 800f8d6:	d12d      	bne.n	800f934 <_strtod_l+0x384>
 800f8d8:	499a      	ldr	r1, [pc, #616]	; (800fb44 <_strtod_l+0x594>)
 800f8da:	aa1a      	add	r2, sp, #104	; 0x68
 800f8dc:	a817      	add	r0, sp, #92	; 0x5c
 800f8de:	f001 ff2b 	bl	8011738 <__hexnan>
 800f8e2:	2805      	cmp	r0, #5
 800f8e4:	d126      	bne.n	800f934 <_strtod_l+0x384>
 800f8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f8ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f8f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f8f4:	e6a0      	b.n	800f638 <_strtod_l+0x88>
 800f8f6:	210a      	movs	r1, #10
 800f8f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f8fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f900:	e7b9      	b.n	800f876 <_strtod_l+0x2c6>
 800f902:	2a6e      	cmp	r2, #110	; 0x6e
 800f904:	e7db      	b.n	800f8be <_strtod_l+0x30e>
 800f906:	4990      	ldr	r1, [pc, #576]	; (800fb48 <_strtod_l+0x598>)
 800f908:	a817      	add	r0, sp, #92	; 0x5c
 800f90a:	f001 ff01 	bl	8011710 <__match>
 800f90e:	2800      	cmp	r0, #0
 800f910:	f43f aeb0 	beq.w	800f674 <_strtod_l+0xc4>
 800f914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f916:	498d      	ldr	r1, [pc, #564]	; (800fb4c <_strtod_l+0x59c>)
 800f918:	3b01      	subs	r3, #1
 800f91a:	a817      	add	r0, sp, #92	; 0x5c
 800f91c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f91e:	f001 fef7 	bl	8011710 <__match>
 800f922:	b910      	cbnz	r0, 800f92a <_strtod_l+0x37a>
 800f924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f926:	3301      	adds	r3, #1
 800f928:	9317      	str	r3, [sp, #92]	; 0x5c
 800f92a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fb5c <_strtod_l+0x5ac>
 800f92e:	f04f 0a00 	mov.w	sl, #0
 800f932:	e681      	b.n	800f638 <_strtod_l+0x88>
 800f934:	4886      	ldr	r0, [pc, #536]	; (800fb50 <_strtod_l+0x5a0>)
 800f936:	f002 fe6b 	bl	8012610 <nan>
 800f93a:	ec5b ab10 	vmov	sl, fp, d0
 800f93e:	e67b      	b.n	800f638 <_strtod_l+0x88>
 800f940:	9b05      	ldr	r3, [sp, #20]
 800f942:	9807      	ldr	r0, [sp, #28]
 800f944:	1af3      	subs	r3, r6, r3
 800f946:	2f00      	cmp	r7, #0
 800f948:	bf08      	it	eq
 800f94a:	462f      	moveq	r7, r5
 800f94c:	2d10      	cmp	r5, #16
 800f94e:	9306      	str	r3, [sp, #24]
 800f950:	46a8      	mov	r8, r5
 800f952:	bfa8      	it	ge
 800f954:	f04f 0810 	movge.w	r8, #16
 800f958:	f7f0 fdac 	bl	80004b4 <__aeabi_ui2d>
 800f95c:	2d09      	cmp	r5, #9
 800f95e:	4682      	mov	sl, r0
 800f960:	468b      	mov	fp, r1
 800f962:	dd13      	ble.n	800f98c <_strtod_l+0x3dc>
 800f964:	4b7b      	ldr	r3, [pc, #492]	; (800fb54 <_strtod_l+0x5a4>)
 800f966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f96a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f96e:	f7f0 fe1b 	bl	80005a8 <__aeabi_dmul>
 800f972:	4682      	mov	sl, r0
 800f974:	4648      	mov	r0, r9
 800f976:	468b      	mov	fp, r1
 800f978:	f7f0 fd9c 	bl	80004b4 <__aeabi_ui2d>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	4650      	mov	r0, sl
 800f982:	4659      	mov	r1, fp
 800f984:	f7f0 fc5a 	bl	800023c <__adddf3>
 800f988:	4682      	mov	sl, r0
 800f98a:	468b      	mov	fp, r1
 800f98c:	2d0f      	cmp	r5, #15
 800f98e:	dc38      	bgt.n	800fa02 <_strtod_l+0x452>
 800f990:	9b06      	ldr	r3, [sp, #24]
 800f992:	2b00      	cmp	r3, #0
 800f994:	f43f ae50 	beq.w	800f638 <_strtod_l+0x88>
 800f998:	dd24      	ble.n	800f9e4 <_strtod_l+0x434>
 800f99a:	2b16      	cmp	r3, #22
 800f99c:	dc0b      	bgt.n	800f9b6 <_strtod_l+0x406>
 800f99e:	496d      	ldr	r1, [pc, #436]	; (800fb54 <_strtod_l+0x5a4>)
 800f9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9a8:	4652      	mov	r2, sl
 800f9aa:	465b      	mov	r3, fp
 800f9ac:	f7f0 fdfc 	bl	80005a8 <__aeabi_dmul>
 800f9b0:	4682      	mov	sl, r0
 800f9b2:	468b      	mov	fp, r1
 800f9b4:	e640      	b.n	800f638 <_strtod_l+0x88>
 800f9b6:	9a06      	ldr	r2, [sp, #24]
 800f9b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	db20      	blt.n	800fa02 <_strtod_l+0x452>
 800f9c0:	4c64      	ldr	r4, [pc, #400]	; (800fb54 <_strtod_l+0x5a4>)
 800f9c2:	f1c5 050f 	rsb	r5, r5, #15
 800f9c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f9ca:	4652      	mov	r2, sl
 800f9cc:	465b      	mov	r3, fp
 800f9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9d2:	f7f0 fde9 	bl	80005a8 <__aeabi_dmul>
 800f9d6:	9b06      	ldr	r3, [sp, #24]
 800f9d8:	1b5d      	subs	r5, r3, r5
 800f9da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f9de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f9e2:	e7e3      	b.n	800f9ac <_strtod_l+0x3fc>
 800f9e4:	9b06      	ldr	r3, [sp, #24]
 800f9e6:	3316      	adds	r3, #22
 800f9e8:	db0b      	blt.n	800fa02 <_strtod_l+0x452>
 800f9ea:	9b05      	ldr	r3, [sp, #20]
 800f9ec:	1b9e      	subs	r6, r3, r6
 800f9ee:	4b59      	ldr	r3, [pc, #356]	; (800fb54 <_strtod_l+0x5a4>)
 800f9f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f9f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f9f8:	4650      	mov	r0, sl
 800f9fa:	4659      	mov	r1, fp
 800f9fc:	f7f0 fefe 	bl	80007fc <__aeabi_ddiv>
 800fa00:	e7d6      	b.n	800f9b0 <_strtod_l+0x400>
 800fa02:	9b06      	ldr	r3, [sp, #24]
 800fa04:	eba5 0808 	sub.w	r8, r5, r8
 800fa08:	4498      	add	r8, r3
 800fa0a:	f1b8 0f00 	cmp.w	r8, #0
 800fa0e:	dd74      	ble.n	800fafa <_strtod_l+0x54a>
 800fa10:	f018 030f 	ands.w	r3, r8, #15
 800fa14:	d00a      	beq.n	800fa2c <_strtod_l+0x47c>
 800fa16:	494f      	ldr	r1, [pc, #316]	; (800fb54 <_strtod_l+0x5a4>)
 800fa18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa1c:	4652      	mov	r2, sl
 800fa1e:	465b      	mov	r3, fp
 800fa20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa24:	f7f0 fdc0 	bl	80005a8 <__aeabi_dmul>
 800fa28:	4682      	mov	sl, r0
 800fa2a:	468b      	mov	fp, r1
 800fa2c:	f038 080f 	bics.w	r8, r8, #15
 800fa30:	d04f      	beq.n	800fad2 <_strtod_l+0x522>
 800fa32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fa36:	dd22      	ble.n	800fa7e <_strtod_l+0x4ce>
 800fa38:	2500      	movs	r5, #0
 800fa3a:	462e      	mov	r6, r5
 800fa3c:	9507      	str	r5, [sp, #28]
 800fa3e:	9505      	str	r5, [sp, #20]
 800fa40:	2322      	movs	r3, #34	; 0x22
 800fa42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fb5c <_strtod_l+0x5ac>
 800fa46:	6023      	str	r3, [r4, #0]
 800fa48:	f04f 0a00 	mov.w	sl, #0
 800fa4c:	9b07      	ldr	r3, [sp, #28]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f43f adf2 	beq.w	800f638 <_strtod_l+0x88>
 800fa54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa56:	4620      	mov	r0, r4
 800fa58:	f001 ff86 	bl	8011968 <_Bfree>
 800fa5c:	9905      	ldr	r1, [sp, #20]
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f001 ff82 	bl	8011968 <_Bfree>
 800fa64:	4631      	mov	r1, r6
 800fa66:	4620      	mov	r0, r4
 800fa68:	f001 ff7e 	bl	8011968 <_Bfree>
 800fa6c:	9907      	ldr	r1, [sp, #28]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f001 ff7a 	bl	8011968 <_Bfree>
 800fa74:	4629      	mov	r1, r5
 800fa76:	4620      	mov	r0, r4
 800fa78:	f001 ff76 	bl	8011968 <_Bfree>
 800fa7c:	e5dc      	b.n	800f638 <_strtod_l+0x88>
 800fa7e:	4b36      	ldr	r3, [pc, #216]	; (800fb58 <_strtod_l+0x5a8>)
 800fa80:	9304      	str	r3, [sp, #16]
 800fa82:	2300      	movs	r3, #0
 800fa84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fa88:	4650      	mov	r0, sl
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	4699      	mov	r9, r3
 800fa8e:	f1b8 0f01 	cmp.w	r8, #1
 800fa92:	dc21      	bgt.n	800fad8 <_strtod_l+0x528>
 800fa94:	b10b      	cbz	r3, 800fa9a <_strtod_l+0x4ea>
 800fa96:	4682      	mov	sl, r0
 800fa98:	468b      	mov	fp, r1
 800fa9a:	4b2f      	ldr	r3, [pc, #188]	; (800fb58 <_strtod_l+0x5a8>)
 800fa9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800faa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800faa4:	4652      	mov	r2, sl
 800faa6:	465b      	mov	r3, fp
 800faa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800faac:	f7f0 fd7c 	bl	80005a8 <__aeabi_dmul>
 800fab0:	4b2a      	ldr	r3, [pc, #168]	; (800fb5c <_strtod_l+0x5ac>)
 800fab2:	460a      	mov	r2, r1
 800fab4:	400b      	ands	r3, r1
 800fab6:	492a      	ldr	r1, [pc, #168]	; (800fb60 <_strtod_l+0x5b0>)
 800fab8:	428b      	cmp	r3, r1
 800faba:	4682      	mov	sl, r0
 800fabc:	d8bc      	bhi.n	800fa38 <_strtod_l+0x488>
 800fabe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fac2:	428b      	cmp	r3, r1
 800fac4:	bf86      	itte	hi
 800fac6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fb64 <_strtod_l+0x5b4>
 800faca:	f04f 3aff 	movhi.w	sl, #4294967295
 800face:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fad2:	2300      	movs	r3, #0
 800fad4:	9304      	str	r3, [sp, #16]
 800fad6:	e084      	b.n	800fbe2 <_strtod_l+0x632>
 800fad8:	f018 0f01 	tst.w	r8, #1
 800fadc:	d005      	beq.n	800faea <_strtod_l+0x53a>
 800fade:	9b04      	ldr	r3, [sp, #16]
 800fae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae4:	f7f0 fd60 	bl	80005a8 <__aeabi_dmul>
 800fae8:	2301      	movs	r3, #1
 800faea:	9a04      	ldr	r2, [sp, #16]
 800faec:	3208      	adds	r2, #8
 800faee:	f109 0901 	add.w	r9, r9, #1
 800faf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800faf6:	9204      	str	r2, [sp, #16]
 800faf8:	e7c9      	b.n	800fa8e <_strtod_l+0x4de>
 800fafa:	d0ea      	beq.n	800fad2 <_strtod_l+0x522>
 800fafc:	f1c8 0800 	rsb	r8, r8, #0
 800fb00:	f018 020f 	ands.w	r2, r8, #15
 800fb04:	d00a      	beq.n	800fb1c <_strtod_l+0x56c>
 800fb06:	4b13      	ldr	r3, [pc, #76]	; (800fb54 <_strtod_l+0x5a4>)
 800fb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb0c:	4650      	mov	r0, sl
 800fb0e:	4659      	mov	r1, fp
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	f7f0 fe72 	bl	80007fc <__aeabi_ddiv>
 800fb18:	4682      	mov	sl, r0
 800fb1a:	468b      	mov	fp, r1
 800fb1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fb20:	d0d7      	beq.n	800fad2 <_strtod_l+0x522>
 800fb22:	f1b8 0f1f 	cmp.w	r8, #31
 800fb26:	dd1f      	ble.n	800fb68 <_strtod_l+0x5b8>
 800fb28:	2500      	movs	r5, #0
 800fb2a:	462e      	mov	r6, r5
 800fb2c:	9507      	str	r5, [sp, #28]
 800fb2e:	9505      	str	r5, [sp, #20]
 800fb30:	2322      	movs	r3, #34	; 0x22
 800fb32:	f04f 0a00 	mov.w	sl, #0
 800fb36:	f04f 0b00 	mov.w	fp, #0
 800fb3a:	6023      	str	r3, [r4, #0]
 800fb3c:	e786      	b.n	800fa4c <_strtod_l+0x49c>
 800fb3e:	bf00      	nop
 800fb40:	08015f89 	.word	0x08015f89
 800fb44:	08015fcc 	.word	0x08015fcc
 800fb48:	08015f81 	.word	0x08015f81
 800fb4c:	0801610c 	.word	0x0801610c
 800fb50:	080163b8 	.word	0x080163b8
 800fb54:	08016298 	.word	0x08016298
 800fb58:	08016270 	.word	0x08016270
 800fb5c:	7ff00000 	.word	0x7ff00000
 800fb60:	7ca00000 	.word	0x7ca00000
 800fb64:	7fefffff 	.word	0x7fefffff
 800fb68:	f018 0310 	ands.w	r3, r8, #16
 800fb6c:	bf18      	it	ne
 800fb6e:	236a      	movne	r3, #106	; 0x6a
 800fb70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ff20 <_strtod_l+0x970>
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	4650      	mov	r0, sl
 800fb78:	4659      	mov	r1, fp
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f018 0f01 	tst.w	r8, #1
 800fb80:	d004      	beq.n	800fb8c <_strtod_l+0x5dc>
 800fb82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fb86:	f7f0 fd0f 	bl	80005a8 <__aeabi_dmul>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fb90:	f109 0908 	add.w	r9, r9, #8
 800fb94:	d1f2      	bne.n	800fb7c <_strtod_l+0x5cc>
 800fb96:	b10b      	cbz	r3, 800fb9c <_strtod_l+0x5ec>
 800fb98:	4682      	mov	sl, r0
 800fb9a:	468b      	mov	fp, r1
 800fb9c:	9b04      	ldr	r3, [sp, #16]
 800fb9e:	b1c3      	cbz	r3, 800fbd2 <_strtod_l+0x622>
 800fba0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fba4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	4659      	mov	r1, fp
 800fbac:	dd11      	ble.n	800fbd2 <_strtod_l+0x622>
 800fbae:	2b1f      	cmp	r3, #31
 800fbb0:	f340 8124 	ble.w	800fdfc <_strtod_l+0x84c>
 800fbb4:	2b34      	cmp	r3, #52	; 0x34
 800fbb6:	bfde      	ittt	le
 800fbb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fbbc:	f04f 33ff 	movle.w	r3, #4294967295
 800fbc0:	fa03 f202 	lslle.w	r2, r3, r2
 800fbc4:	f04f 0a00 	mov.w	sl, #0
 800fbc8:	bfcc      	ite	gt
 800fbca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fbce:	ea02 0b01 	andle.w	fp, r2, r1
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4650      	mov	r0, sl
 800fbd8:	4659      	mov	r1, fp
 800fbda:	f7f0 ff4d 	bl	8000a78 <__aeabi_dcmpeq>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d1a2      	bne.n	800fb28 <_strtod_l+0x578>
 800fbe2:	9b07      	ldr	r3, [sp, #28]
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	9908      	ldr	r1, [sp, #32]
 800fbe8:	462b      	mov	r3, r5
 800fbea:	463a      	mov	r2, r7
 800fbec:	4620      	mov	r0, r4
 800fbee:	f001 ff23 	bl	8011a38 <__s2b>
 800fbf2:	9007      	str	r0, [sp, #28]
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f43f af1f 	beq.w	800fa38 <_strtod_l+0x488>
 800fbfa:	9b05      	ldr	r3, [sp, #20]
 800fbfc:	1b9e      	subs	r6, r3, r6
 800fbfe:	9b06      	ldr	r3, [sp, #24]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	bfb4      	ite	lt
 800fc04:	4633      	movlt	r3, r6
 800fc06:	2300      	movge	r3, #0
 800fc08:	930c      	str	r3, [sp, #48]	; 0x30
 800fc0a:	9b06      	ldr	r3, [sp, #24]
 800fc0c:	2500      	movs	r5, #0
 800fc0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc12:	9312      	str	r3, [sp, #72]	; 0x48
 800fc14:	462e      	mov	r6, r5
 800fc16:	9b07      	ldr	r3, [sp, #28]
 800fc18:	4620      	mov	r0, r4
 800fc1a:	6859      	ldr	r1, [r3, #4]
 800fc1c:	f001 fe64 	bl	80118e8 <_Balloc>
 800fc20:	9005      	str	r0, [sp, #20]
 800fc22:	2800      	cmp	r0, #0
 800fc24:	f43f af0c 	beq.w	800fa40 <_strtod_l+0x490>
 800fc28:	9b07      	ldr	r3, [sp, #28]
 800fc2a:	691a      	ldr	r2, [r3, #16]
 800fc2c:	3202      	adds	r2, #2
 800fc2e:	f103 010c 	add.w	r1, r3, #12
 800fc32:	0092      	lsls	r2, r2, #2
 800fc34:	300c      	adds	r0, #12
 800fc36:	f7fe fc94 	bl	800e562 <memcpy>
 800fc3a:	ec4b ab10 	vmov	d0, sl, fp
 800fc3e:	aa1a      	add	r2, sp, #104	; 0x68
 800fc40:	a919      	add	r1, sp, #100	; 0x64
 800fc42:	4620      	mov	r0, r4
 800fc44:	f002 fa3e 	bl	80120c4 <__d2b>
 800fc48:	ec4b ab18 	vmov	d8, sl, fp
 800fc4c:	9018      	str	r0, [sp, #96]	; 0x60
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f43f aef6 	beq.w	800fa40 <_strtod_l+0x490>
 800fc54:	2101      	movs	r1, #1
 800fc56:	4620      	mov	r0, r4
 800fc58:	f001 ff88 	bl	8011b6c <__i2b>
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	f43f aeee 	beq.w	800fa40 <_strtod_l+0x490>
 800fc64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc66:	9904      	ldr	r1, [sp, #16]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	bfab      	itete	ge
 800fc6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fc6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fc70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fc72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fc76:	bfac      	ite	ge
 800fc78:	eb03 0902 	addge.w	r9, r3, r2
 800fc7c:	1ad7      	sublt	r7, r2, r3
 800fc7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fc80:	eba3 0801 	sub.w	r8, r3, r1
 800fc84:	4490      	add	r8, r2
 800fc86:	4ba1      	ldr	r3, [pc, #644]	; (800ff0c <_strtod_l+0x95c>)
 800fc88:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc8c:	4598      	cmp	r8, r3
 800fc8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fc92:	f280 80c7 	bge.w	800fe24 <_strtod_l+0x874>
 800fc96:	eba3 0308 	sub.w	r3, r3, r8
 800fc9a:	2b1f      	cmp	r3, #31
 800fc9c:	eba2 0203 	sub.w	r2, r2, r3
 800fca0:	f04f 0101 	mov.w	r1, #1
 800fca4:	f300 80b1 	bgt.w	800fe0a <_strtod_l+0x85a>
 800fca8:	fa01 f303 	lsl.w	r3, r1, r3
 800fcac:	930d      	str	r3, [sp, #52]	; 0x34
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9308      	str	r3, [sp, #32]
 800fcb2:	eb09 0802 	add.w	r8, r9, r2
 800fcb6:	9b04      	ldr	r3, [sp, #16]
 800fcb8:	45c1      	cmp	r9, r8
 800fcba:	4417      	add	r7, r2
 800fcbc:	441f      	add	r7, r3
 800fcbe:	464b      	mov	r3, r9
 800fcc0:	bfa8      	it	ge
 800fcc2:	4643      	movge	r3, r8
 800fcc4:	42bb      	cmp	r3, r7
 800fcc6:	bfa8      	it	ge
 800fcc8:	463b      	movge	r3, r7
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	bfc2      	ittt	gt
 800fcce:	eba8 0803 	subgt.w	r8, r8, r3
 800fcd2:	1aff      	subgt	r7, r7, r3
 800fcd4:	eba9 0903 	subgt.w	r9, r9, r3
 800fcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	dd17      	ble.n	800fd0e <_strtod_l+0x75e>
 800fcde:	4631      	mov	r1, r6
 800fce0:	461a      	mov	r2, r3
 800fce2:	4620      	mov	r0, r4
 800fce4:	f002 f802 	bl	8011cec <__pow5mult>
 800fce8:	4606      	mov	r6, r0
 800fcea:	2800      	cmp	r0, #0
 800fcec:	f43f aea8 	beq.w	800fa40 <_strtod_l+0x490>
 800fcf0:	4601      	mov	r1, r0
 800fcf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f001 ff4f 	bl	8011b98 <__multiply>
 800fcfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	f43f ae9f 	beq.w	800fa40 <_strtod_l+0x490>
 800fd02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd04:	4620      	mov	r0, r4
 800fd06:	f001 fe2f 	bl	8011968 <_Bfree>
 800fd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd0c:	9318      	str	r3, [sp, #96]	; 0x60
 800fd0e:	f1b8 0f00 	cmp.w	r8, #0
 800fd12:	f300 808c 	bgt.w	800fe2e <_strtod_l+0x87e>
 800fd16:	9b06      	ldr	r3, [sp, #24]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	dd08      	ble.n	800fd2e <_strtod_l+0x77e>
 800fd1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd1e:	9905      	ldr	r1, [sp, #20]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f001 ffe3 	bl	8011cec <__pow5mult>
 800fd26:	9005      	str	r0, [sp, #20]
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	f43f ae89 	beq.w	800fa40 <_strtod_l+0x490>
 800fd2e:	2f00      	cmp	r7, #0
 800fd30:	dd08      	ble.n	800fd44 <_strtod_l+0x794>
 800fd32:	9905      	ldr	r1, [sp, #20]
 800fd34:	463a      	mov	r2, r7
 800fd36:	4620      	mov	r0, r4
 800fd38:	f002 f832 	bl	8011da0 <__lshift>
 800fd3c:	9005      	str	r0, [sp, #20]
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f43f ae7e 	beq.w	800fa40 <_strtod_l+0x490>
 800fd44:	f1b9 0f00 	cmp.w	r9, #0
 800fd48:	dd08      	ble.n	800fd5c <_strtod_l+0x7ac>
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	464a      	mov	r2, r9
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f002 f826 	bl	8011da0 <__lshift>
 800fd54:	4606      	mov	r6, r0
 800fd56:	2800      	cmp	r0, #0
 800fd58:	f43f ae72 	beq.w	800fa40 <_strtod_l+0x490>
 800fd5c:	9a05      	ldr	r2, [sp, #20]
 800fd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd60:	4620      	mov	r0, r4
 800fd62:	f002 f8a9 	bl	8011eb8 <__mdiff>
 800fd66:	4605      	mov	r5, r0
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	f43f ae69 	beq.w	800fa40 <_strtod_l+0x490>
 800fd6e:	68c3      	ldr	r3, [r0, #12]
 800fd70:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd72:	2300      	movs	r3, #0
 800fd74:	60c3      	str	r3, [r0, #12]
 800fd76:	4631      	mov	r1, r6
 800fd78:	f002 f882 	bl	8011e80 <__mcmp>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	da60      	bge.n	800fe42 <_strtod_l+0x892>
 800fd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd82:	ea53 030a 	orrs.w	r3, r3, sl
 800fd86:	f040 8082 	bne.w	800fe8e <_strtod_l+0x8de>
 800fd8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d17d      	bne.n	800fe8e <_strtod_l+0x8de>
 800fd92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd96:	0d1b      	lsrs	r3, r3, #20
 800fd98:	051b      	lsls	r3, r3, #20
 800fd9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fd9e:	d976      	bls.n	800fe8e <_strtod_l+0x8de>
 800fda0:	696b      	ldr	r3, [r5, #20]
 800fda2:	b913      	cbnz	r3, 800fdaa <_strtod_l+0x7fa>
 800fda4:	692b      	ldr	r3, [r5, #16]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	dd71      	ble.n	800fe8e <_strtod_l+0x8de>
 800fdaa:	4629      	mov	r1, r5
 800fdac:	2201      	movs	r2, #1
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f001 fff6 	bl	8011da0 <__lshift>
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	f002 f862 	bl	8011e80 <__mcmp>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	dd66      	ble.n	800fe8e <_strtod_l+0x8de>
 800fdc0:	9904      	ldr	r1, [sp, #16]
 800fdc2:	4a53      	ldr	r2, [pc, #332]	; (800ff10 <_strtod_l+0x960>)
 800fdc4:	465b      	mov	r3, fp
 800fdc6:	2900      	cmp	r1, #0
 800fdc8:	f000 8081 	beq.w	800fece <_strtod_l+0x91e>
 800fdcc:	ea02 010b 	and.w	r1, r2, fp
 800fdd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fdd4:	dc7b      	bgt.n	800fece <_strtod_l+0x91e>
 800fdd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fdda:	f77f aea9 	ble.w	800fb30 <_strtod_l+0x580>
 800fdde:	4b4d      	ldr	r3, [pc, #308]	; (800ff14 <_strtod_l+0x964>)
 800fde0:	4650      	mov	r0, sl
 800fde2:	4659      	mov	r1, fp
 800fde4:	2200      	movs	r2, #0
 800fde6:	f7f0 fbdf 	bl	80005a8 <__aeabi_dmul>
 800fdea:	460b      	mov	r3, r1
 800fdec:	4303      	orrs	r3, r0
 800fdee:	bf08      	it	eq
 800fdf0:	2322      	moveq	r3, #34	; 0x22
 800fdf2:	4682      	mov	sl, r0
 800fdf4:	468b      	mov	fp, r1
 800fdf6:	bf08      	it	eq
 800fdf8:	6023      	streq	r3, [r4, #0]
 800fdfa:	e62b      	b.n	800fa54 <_strtod_l+0x4a4>
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fe00:	fa02 f303 	lsl.w	r3, r2, r3
 800fe04:	ea03 0a0a 	and.w	sl, r3, sl
 800fe08:	e6e3      	b.n	800fbd2 <_strtod_l+0x622>
 800fe0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fe0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fe12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fe16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fe1a:	fa01 f308 	lsl.w	r3, r1, r8
 800fe1e:	9308      	str	r3, [sp, #32]
 800fe20:	910d      	str	r1, [sp, #52]	; 0x34
 800fe22:	e746      	b.n	800fcb2 <_strtod_l+0x702>
 800fe24:	2300      	movs	r3, #0
 800fe26:	9308      	str	r3, [sp, #32]
 800fe28:	2301      	movs	r3, #1
 800fe2a:	930d      	str	r3, [sp, #52]	; 0x34
 800fe2c:	e741      	b.n	800fcb2 <_strtod_l+0x702>
 800fe2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fe30:	4642      	mov	r2, r8
 800fe32:	4620      	mov	r0, r4
 800fe34:	f001 ffb4 	bl	8011da0 <__lshift>
 800fe38:	9018      	str	r0, [sp, #96]	; 0x60
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	f47f af6b 	bne.w	800fd16 <_strtod_l+0x766>
 800fe40:	e5fe      	b.n	800fa40 <_strtod_l+0x490>
 800fe42:	465f      	mov	r7, fp
 800fe44:	d16e      	bne.n	800ff24 <_strtod_l+0x974>
 800fe46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe4c:	b342      	cbz	r2, 800fea0 <_strtod_l+0x8f0>
 800fe4e:	4a32      	ldr	r2, [pc, #200]	; (800ff18 <_strtod_l+0x968>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d128      	bne.n	800fea6 <_strtod_l+0x8f6>
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	4651      	mov	r1, sl
 800fe58:	b1eb      	cbz	r3, 800fe96 <_strtod_l+0x8e6>
 800fe5a:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <_strtod_l+0x960>)
 800fe5c:	403b      	ands	r3, r7
 800fe5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe62:	f04f 32ff 	mov.w	r2, #4294967295
 800fe66:	d819      	bhi.n	800fe9c <_strtod_l+0x8ec>
 800fe68:	0d1b      	lsrs	r3, r3, #20
 800fe6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	4299      	cmp	r1, r3
 800fe74:	d117      	bne.n	800fea6 <_strtod_l+0x8f6>
 800fe76:	4b29      	ldr	r3, [pc, #164]	; (800ff1c <_strtod_l+0x96c>)
 800fe78:	429f      	cmp	r7, r3
 800fe7a:	d102      	bne.n	800fe82 <_strtod_l+0x8d2>
 800fe7c:	3101      	adds	r1, #1
 800fe7e:	f43f addf 	beq.w	800fa40 <_strtod_l+0x490>
 800fe82:	4b23      	ldr	r3, [pc, #140]	; (800ff10 <_strtod_l+0x960>)
 800fe84:	403b      	ands	r3, r7
 800fe86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fe8a:	f04f 0a00 	mov.w	sl, #0
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1a4      	bne.n	800fdde <_strtod_l+0x82e>
 800fe94:	e5de      	b.n	800fa54 <_strtod_l+0x4a4>
 800fe96:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9a:	e7ea      	b.n	800fe72 <_strtod_l+0x8c2>
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	e7e8      	b.n	800fe72 <_strtod_l+0x8c2>
 800fea0:	ea53 030a 	orrs.w	r3, r3, sl
 800fea4:	d08c      	beq.n	800fdc0 <_strtod_l+0x810>
 800fea6:	9b08      	ldr	r3, [sp, #32]
 800fea8:	b1db      	cbz	r3, 800fee2 <_strtod_l+0x932>
 800feaa:	423b      	tst	r3, r7
 800feac:	d0ef      	beq.n	800fe8e <_strtod_l+0x8de>
 800feae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feb0:	9a04      	ldr	r2, [sp, #16]
 800feb2:	4650      	mov	r0, sl
 800feb4:	4659      	mov	r1, fp
 800feb6:	b1c3      	cbz	r3, 800feea <_strtod_l+0x93a>
 800feb8:	f7ff fb5b 	bl	800f572 <sulp>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	ec51 0b18 	vmov	r0, r1, d8
 800fec4:	f7f0 f9ba 	bl	800023c <__adddf3>
 800fec8:	4682      	mov	sl, r0
 800feca:	468b      	mov	fp, r1
 800fecc:	e7df      	b.n	800fe8e <_strtod_l+0x8de>
 800fece:	4013      	ands	r3, r2
 800fed0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fed4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fedc:	f04f 3aff 	mov.w	sl, #4294967295
 800fee0:	e7d5      	b.n	800fe8e <_strtod_l+0x8de>
 800fee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fee4:	ea13 0f0a 	tst.w	r3, sl
 800fee8:	e7e0      	b.n	800feac <_strtod_l+0x8fc>
 800feea:	f7ff fb42 	bl	800f572 <sulp>
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	ec51 0b18 	vmov	r0, r1, d8
 800fef6:	f7f0 f99f 	bl	8000238 <__aeabi_dsub>
 800fefa:	2200      	movs	r2, #0
 800fefc:	2300      	movs	r3, #0
 800fefe:	4682      	mov	sl, r0
 800ff00:	468b      	mov	fp, r1
 800ff02:	f7f0 fdb9 	bl	8000a78 <__aeabi_dcmpeq>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d0c1      	beq.n	800fe8e <_strtod_l+0x8de>
 800ff0a:	e611      	b.n	800fb30 <_strtod_l+0x580>
 800ff0c:	fffffc02 	.word	0xfffffc02
 800ff10:	7ff00000 	.word	0x7ff00000
 800ff14:	39500000 	.word	0x39500000
 800ff18:	000fffff 	.word	0x000fffff
 800ff1c:	7fefffff 	.word	0x7fefffff
 800ff20:	08015fe0 	.word	0x08015fe0
 800ff24:	4631      	mov	r1, r6
 800ff26:	4628      	mov	r0, r5
 800ff28:	f002 f928 	bl	801217c <__ratio>
 800ff2c:	ec59 8b10 	vmov	r8, r9, d0
 800ff30:	ee10 0a10 	vmov	r0, s0
 800ff34:	2200      	movs	r2, #0
 800ff36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	f7f0 fdb0 	bl	8000aa0 <__aeabi_dcmple>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d07a      	beq.n	801003a <_strtod_l+0xa8a>
 800ff44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d04a      	beq.n	800ffe0 <_strtod_l+0xa30>
 800ff4a:	4b95      	ldr	r3, [pc, #596]	; (80101a0 <_strtod_l+0xbf0>)
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80101a0 <_strtod_l+0xbf0>
 800ff56:	f04f 0800 	mov.w	r8, #0
 800ff5a:	4b92      	ldr	r3, [pc, #584]	; (80101a4 <_strtod_l+0xbf4>)
 800ff5c:	403b      	ands	r3, r7
 800ff5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ff60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff62:	4b91      	ldr	r3, [pc, #580]	; (80101a8 <_strtod_l+0xbf8>)
 800ff64:	429a      	cmp	r2, r3
 800ff66:	f040 80b0 	bne.w	80100ca <_strtod_l+0xb1a>
 800ff6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ff72:	ec4b ab10 	vmov	d0, sl, fp
 800ff76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff7a:	f002 f827 	bl	8011fcc <__ulp>
 800ff7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff82:	ec53 2b10 	vmov	r2, r3, d0
 800ff86:	f7f0 fb0f 	bl	80005a8 <__aeabi_dmul>
 800ff8a:	4652      	mov	r2, sl
 800ff8c:	465b      	mov	r3, fp
 800ff8e:	f7f0 f955 	bl	800023c <__adddf3>
 800ff92:	460b      	mov	r3, r1
 800ff94:	4983      	ldr	r1, [pc, #524]	; (80101a4 <_strtod_l+0xbf4>)
 800ff96:	4a85      	ldr	r2, [pc, #532]	; (80101ac <_strtod_l+0xbfc>)
 800ff98:	4019      	ands	r1, r3
 800ff9a:	4291      	cmp	r1, r2
 800ff9c:	4682      	mov	sl, r0
 800ff9e:	d960      	bls.n	8010062 <_strtod_l+0xab2>
 800ffa0:	ee18 3a90 	vmov	r3, s17
 800ffa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d104      	bne.n	800ffb6 <_strtod_l+0xa06>
 800ffac:	ee18 3a10 	vmov	r3, s16
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	f43f ad45 	beq.w	800fa40 <_strtod_l+0x490>
 800ffb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80101b8 <_strtod_l+0xc08>
 800ffba:	f04f 3aff 	mov.w	sl, #4294967295
 800ffbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f001 fcd1 	bl	8011968 <_Bfree>
 800ffc6:	9905      	ldr	r1, [sp, #20]
 800ffc8:	4620      	mov	r0, r4
 800ffca:	f001 fccd 	bl	8011968 <_Bfree>
 800ffce:	4631      	mov	r1, r6
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f001 fcc9 	bl	8011968 <_Bfree>
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f001 fcc5 	bl	8011968 <_Bfree>
 800ffde:	e61a      	b.n	800fc16 <_strtod_l+0x666>
 800ffe0:	f1ba 0f00 	cmp.w	sl, #0
 800ffe4:	d11b      	bne.n	801001e <_strtod_l+0xa6e>
 800ffe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffea:	b9f3      	cbnz	r3, 801002a <_strtod_l+0xa7a>
 800ffec:	4b6c      	ldr	r3, [pc, #432]	; (80101a0 <_strtod_l+0xbf0>)
 800ffee:	2200      	movs	r2, #0
 800fff0:	4640      	mov	r0, r8
 800fff2:	4649      	mov	r1, r9
 800fff4:	f7f0 fd4a 	bl	8000a8c <__aeabi_dcmplt>
 800fff8:	b9d0      	cbnz	r0, 8010030 <_strtod_l+0xa80>
 800fffa:	4640      	mov	r0, r8
 800fffc:	4649      	mov	r1, r9
 800fffe:	4b6c      	ldr	r3, [pc, #432]	; (80101b0 <_strtod_l+0xc00>)
 8010000:	2200      	movs	r2, #0
 8010002:	f7f0 fad1 	bl	80005a8 <__aeabi_dmul>
 8010006:	4680      	mov	r8, r0
 8010008:	4689      	mov	r9, r1
 801000a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801000e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010012:	9315      	str	r3, [sp, #84]	; 0x54
 8010014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801001c:	e79d      	b.n	800ff5a <_strtod_l+0x9aa>
 801001e:	f1ba 0f01 	cmp.w	sl, #1
 8010022:	d102      	bne.n	801002a <_strtod_l+0xa7a>
 8010024:	2f00      	cmp	r7, #0
 8010026:	f43f ad83 	beq.w	800fb30 <_strtod_l+0x580>
 801002a:	4b62      	ldr	r3, [pc, #392]	; (80101b4 <_strtod_l+0xc04>)
 801002c:	2200      	movs	r2, #0
 801002e:	e78e      	b.n	800ff4e <_strtod_l+0x99e>
 8010030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80101b0 <_strtod_l+0xc00>
 8010034:	f04f 0800 	mov.w	r8, #0
 8010038:	e7e7      	b.n	801000a <_strtod_l+0xa5a>
 801003a:	4b5d      	ldr	r3, [pc, #372]	; (80101b0 <_strtod_l+0xc00>)
 801003c:	4640      	mov	r0, r8
 801003e:	4649      	mov	r1, r9
 8010040:	2200      	movs	r2, #0
 8010042:	f7f0 fab1 	bl	80005a8 <__aeabi_dmul>
 8010046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010048:	4680      	mov	r8, r0
 801004a:	4689      	mov	r9, r1
 801004c:	b933      	cbnz	r3, 801005c <_strtod_l+0xaac>
 801004e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010052:	900e      	str	r0, [sp, #56]	; 0x38
 8010054:	930f      	str	r3, [sp, #60]	; 0x3c
 8010056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801005a:	e7dd      	b.n	8010018 <_strtod_l+0xa68>
 801005c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010060:	e7f9      	b.n	8010056 <_strtod_l+0xaa6>
 8010062:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010066:	9b04      	ldr	r3, [sp, #16]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1a8      	bne.n	800ffbe <_strtod_l+0xa0e>
 801006c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010072:	0d1b      	lsrs	r3, r3, #20
 8010074:	051b      	lsls	r3, r3, #20
 8010076:	429a      	cmp	r2, r3
 8010078:	d1a1      	bne.n	800ffbe <_strtod_l+0xa0e>
 801007a:	4640      	mov	r0, r8
 801007c:	4649      	mov	r1, r9
 801007e:	f7f0 fee9 	bl	8000e54 <__aeabi_d2lz>
 8010082:	f7f0 fa63 	bl	800054c <__aeabi_l2d>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4640      	mov	r0, r8
 801008c:	4649      	mov	r1, r9
 801008e:	f7f0 f8d3 	bl	8000238 <__aeabi_dsub>
 8010092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010098:	ea43 030a 	orr.w	r3, r3, sl
 801009c:	4313      	orrs	r3, r2
 801009e:	4680      	mov	r8, r0
 80100a0:	4689      	mov	r9, r1
 80100a2:	d055      	beq.n	8010150 <_strtod_l+0xba0>
 80100a4:	a336      	add	r3, pc, #216	; (adr r3, 8010180 <_strtod_l+0xbd0>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	f7f0 fcef 	bl	8000a8c <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f47f acd0 	bne.w	800fa54 <_strtod_l+0x4a4>
 80100b4:	a334      	add	r3, pc, #208	; (adr r3, 8010188 <_strtod_l+0xbd8>)
 80100b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ba:	4640      	mov	r0, r8
 80100bc:	4649      	mov	r1, r9
 80100be:	f7f0 fd03 	bl	8000ac8 <__aeabi_dcmpgt>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	f43f af7b 	beq.w	800ffbe <_strtod_l+0xa0e>
 80100c8:	e4c4      	b.n	800fa54 <_strtod_l+0x4a4>
 80100ca:	9b04      	ldr	r3, [sp, #16]
 80100cc:	b333      	cbz	r3, 801011c <_strtod_l+0xb6c>
 80100ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80100d4:	d822      	bhi.n	801011c <_strtod_l+0xb6c>
 80100d6:	a32e      	add	r3, pc, #184	; (adr r3, 8010190 <_strtod_l+0xbe0>)
 80100d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100dc:	4640      	mov	r0, r8
 80100de:	4649      	mov	r1, r9
 80100e0:	f7f0 fcde 	bl	8000aa0 <__aeabi_dcmple>
 80100e4:	b1a0      	cbz	r0, 8010110 <_strtod_l+0xb60>
 80100e6:	4649      	mov	r1, r9
 80100e8:	4640      	mov	r0, r8
 80100ea:	f7f0 fd35 	bl	8000b58 <__aeabi_d2uiz>
 80100ee:	2801      	cmp	r0, #1
 80100f0:	bf38      	it	cc
 80100f2:	2001      	movcc	r0, #1
 80100f4:	f7f0 f9de 	bl	80004b4 <__aeabi_ui2d>
 80100f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100fa:	4680      	mov	r8, r0
 80100fc:	4689      	mov	r9, r1
 80100fe:	bb23      	cbnz	r3, 801014a <_strtod_l+0xb9a>
 8010100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010104:	9010      	str	r0, [sp, #64]	; 0x40
 8010106:	9311      	str	r3, [sp, #68]	; 0x44
 8010108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801010c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010114:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010118:	1a9b      	subs	r3, r3, r2
 801011a:	9309      	str	r3, [sp, #36]	; 0x24
 801011c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010120:	eeb0 0a48 	vmov.f32	s0, s16
 8010124:	eef0 0a68 	vmov.f32	s1, s17
 8010128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801012c:	f001 ff4e 	bl	8011fcc <__ulp>
 8010130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010134:	ec53 2b10 	vmov	r2, r3, d0
 8010138:	f7f0 fa36 	bl	80005a8 <__aeabi_dmul>
 801013c:	ec53 2b18 	vmov	r2, r3, d8
 8010140:	f7f0 f87c 	bl	800023c <__adddf3>
 8010144:	4682      	mov	sl, r0
 8010146:	468b      	mov	fp, r1
 8010148:	e78d      	b.n	8010066 <_strtod_l+0xab6>
 801014a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801014e:	e7db      	b.n	8010108 <_strtod_l+0xb58>
 8010150:	a311      	add	r3, pc, #68	; (adr r3, 8010198 <_strtod_l+0xbe8>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f7f0 fc99 	bl	8000a8c <__aeabi_dcmplt>
 801015a:	e7b2      	b.n	80100c2 <_strtod_l+0xb12>
 801015c:	2300      	movs	r3, #0
 801015e:	930a      	str	r3, [sp, #40]	; 0x28
 8010160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010164:	6013      	str	r3, [r2, #0]
 8010166:	f7ff ba6b 	b.w	800f640 <_strtod_l+0x90>
 801016a:	2a65      	cmp	r2, #101	; 0x65
 801016c:	f43f ab5f 	beq.w	800f82e <_strtod_l+0x27e>
 8010170:	2a45      	cmp	r2, #69	; 0x45
 8010172:	f43f ab5c 	beq.w	800f82e <_strtod_l+0x27e>
 8010176:	2301      	movs	r3, #1
 8010178:	f7ff bb94 	b.w	800f8a4 <_strtod_l+0x2f4>
 801017c:	f3af 8000 	nop.w
 8010180:	94a03595 	.word	0x94a03595
 8010184:	3fdfffff 	.word	0x3fdfffff
 8010188:	35afe535 	.word	0x35afe535
 801018c:	3fe00000 	.word	0x3fe00000
 8010190:	ffc00000 	.word	0xffc00000
 8010194:	41dfffff 	.word	0x41dfffff
 8010198:	94a03595 	.word	0x94a03595
 801019c:	3fcfffff 	.word	0x3fcfffff
 80101a0:	3ff00000 	.word	0x3ff00000
 80101a4:	7ff00000 	.word	0x7ff00000
 80101a8:	7fe00000 	.word	0x7fe00000
 80101ac:	7c9fffff 	.word	0x7c9fffff
 80101b0:	3fe00000 	.word	0x3fe00000
 80101b4:	bff00000 	.word	0xbff00000
 80101b8:	7fefffff 	.word	0x7fefffff

080101bc <_strtod_r>:
 80101bc:	4b01      	ldr	r3, [pc, #4]	; (80101c4 <_strtod_r+0x8>)
 80101be:	f7ff b9f7 	b.w	800f5b0 <_strtod_l>
 80101c2:	bf00      	nop
 80101c4:	2000011c 	.word	0x2000011c

080101c8 <_strtol_l.constprop.0>:
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ce:	d001      	beq.n	80101d4 <_strtol_l.constprop.0+0xc>
 80101d0:	2b24      	cmp	r3, #36	; 0x24
 80101d2:	d906      	bls.n	80101e2 <_strtol_l.constprop.0+0x1a>
 80101d4:	f7fe f8a2 	bl	800e31c <__errno>
 80101d8:	2316      	movs	r3, #22
 80101da:	6003      	str	r3, [r0, #0]
 80101dc:	2000      	movs	r0, #0
 80101de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80102c8 <_strtol_l.constprop.0+0x100>
 80101e6:	460d      	mov	r5, r1
 80101e8:	462e      	mov	r6, r5
 80101ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80101f2:	f017 0708 	ands.w	r7, r7, #8
 80101f6:	d1f7      	bne.n	80101e8 <_strtol_l.constprop.0+0x20>
 80101f8:	2c2d      	cmp	r4, #45	; 0x2d
 80101fa:	d132      	bne.n	8010262 <_strtol_l.constprop.0+0x9a>
 80101fc:	782c      	ldrb	r4, [r5, #0]
 80101fe:	2701      	movs	r7, #1
 8010200:	1cb5      	adds	r5, r6, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d05b      	beq.n	80102be <_strtol_l.constprop.0+0xf6>
 8010206:	2b10      	cmp	r3, #16
 8010208:	d109      	bne.n	801021e <_strtol_l.constprop.0+0x56>
 801020a:	2c30      	cmp	r4, #48	; 0x30
 801020c:	d107      	bne.n	801021e <_strtol_l.constprop.0+0x56>
 801020e:	782c      	ldrb	r4, [r5, #0]
 8010210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010214:	2c58      	cmp	r4, #88	; 0x58
 8010216:	d14d      	bne.n	80102b4 <_strtol_l.constprop.0+0xec>
 8010218:	786c      	ldrb	r4, [r5, #1]
 801021a:	2310      	movs	r3, #16
 801021c:	3502      	adds	r5, #2
 801021e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010222:	f108 38ff 	add.w	r8, r8, #4294967295
 8010226:	f04f 0c00 	mov.w	ip, #0
 801022a:	fbb8 f9f3 	udiv	r9, r8, r3
 801022e:	4666      	mov	r6, ip
 8010230:	fb03 8a19 	mls	sl, r3, r9, r8
 8010234:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010238:	f1be 0f09 	cmp.w	lr, #9
 801023c:	d816      	bhi.n	801026c <_strtol_l.constprop.0+0xa4>
 801023e:	4674      	mov	r4, lr
 8010240:	42a3      	cmp	r3, r4
 8010242:	dd24      	ble.n	801028e <_strtol_l.constprop.0+0xc6>
 8010244:	f1bc 0f00 	cmp.w	ip, #0
 8010248:	db1e      	blt.n	8010288 <_strtol_l.constprop.0+0xc0>
 801024a:	45b1      	cmp	r9, r6
 801024c:	d31c      	bcc.n	8010288 <_strtol_l.constprop.0+0xc0>
 801024e:	d101      	bne.n	8010254 <_strtol_l.constprop.0+0x8c>
 8010250:	45a2      	cmp	sl, r4
 8010252:	db19      	blt.n	8010288 <_strtol_l.constprop.0+0xc0>
 8010254:	fb06 4603 	mla	r6, r6, r3, r4
 8010258:	f04f 0c01 	mov.w	ip, #1
 801025c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010260:	e7e8      	b.n	8010234 <_strtol_l.constprop.0+0x6c>
 8010262:	2c2b      	cmp	r4, #43	; 0x2b
 8010264:	bf04      	itt	eq
 8010266:	782c      	ldrbeq	r4, [r5, #0]
 8010268:	1cb5      	addeq	r5, r6, #2
 801026a:	e7ca      	b.n	8010202 <_strtol_l.constprop.0+0x3a>
 801026c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010270:	f1be 0f19 	cmp.w	lr, #25
 8010274:	d801      	bhi.n	801027a <_strtol_l.constprop.0+0xb2>
 8010276:	3c37      	subs	r4, #55	; 0x37
 8010278:	e7e2      	b.n	8010240 <_strtol_l.constprop.0+0x78>
 801027a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801027e:	f1be 0f19 	cmp.w	lr, #25
 8010282:	d804      	bhi.n	801028e <_strtol_l.constprop.0+0xc6>
 8010284:	3c57      	subs	r4, #87	; 0x57
 8010286:	e7db      	b.n	8010240 <_strtol_l.constprop.0+0x78>
 8010288:	f04f 3cff 	mov.w	ip, #4294967295
 801028c:	e7e6      	b.n	801025c <_strtol_l.constprop.0+0x94>
 801028e:	f1bc 0f00 	cmp.w	ip, #0
 8010292:	da05      	bge.n	80102a0 <_strtol_l.constprop.0+0xd8>
 8010294:	2322      	movs	r3, #34	; 0x22
 8010296:	6003      	str	r3, [r0, #0]
 8010298:	4646      	mov	r6, r8
 801029a:	b942      	cbnz	r2, 80102ae <_strtol_l.constprop.0+0xe6>
 801029c:	4630      	mov	r0, r6
 801029e:	e79e      	b.n	80101de <_strtol_l.constprop.0+0x16>
 80102a0:	b107      	cbz	r7, 80102a4 <_strtol_l.constprop.0+0xdc>
 80102a2:	4276      	negs	r6, r6
 80102a4:	2a00      	cmp	r2, #0
 80102a6:	d0f9      	beq.n	801029c <_strtol_l.constprop.0+0xd4>
 80102a8:	f1bc 0f00 	cmp.w	ip, #0
 80102ac:	d000      	beq.n	80102b0 <_strtol_l.constprop.0+0xe8>
 80102ae:	1e69      	subs	r1, r5, #1
 80102b0:	6011      	str	r1, [r2, #0]
 80102b2:	e7f3      	b.n	801029c <_strtol_l.constprop.0+0xd4>
 80102b4:	2430      	movs	r4, #48	; 0x30
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1b1      	bne.n	801021e <_strtol_l.constprop.0+0x56>
 80102ba:	2308      	movs	r3, #8
 80102bc:	e7af      	b.n	801021e <_strtol_l.constprop.0+0x56>
 80102be:	2c30      	cmp	r4, #48	; 0x30
 80102c0:	d0a5      	beq.n	801020e <_strtol_l.constprop.0+0x46>
 80102c2:	230a      	movs	r3, #10
 80102c4:	e7ab      	b.n	801021e <_strtol_l.constprop.0+0x56>
 80102c6:	bf00      	nop
 80102c8:	08016009 	.word	0x08016009

080102cc <_strtol_r>:
 80102cc:	f7ff bf7c 	b.w	80101c8 <_strtol_l.constprop.0>

080102d0 <_write_r>:
 80102d0:	b538      	push	{r3, r4, r5, lr}
 80102d2:	4d07      	ldr	r5, [pc, #28]	; (80102f0 <_write_r+0x20>)
 80102d4:	4604      	mov	r4, r0
 80102d6:	4608      	mov	r0, r1
 80102d8:	4611      	mov	r1, r2
 80102da:	2200      	movs	r2, #0
 80102dc:	602a      	str	r2, [r5, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	f7f5 fda5 	bl	8005e2e <_write>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	d102      	bne.n	80102ee <_write_r+0x1e>
 80102e8:	682b      	ldr	r3, [r5, #0]
 80102ea:	b103      	cbz	r3, 80102ee <_write_r+0x1e>
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	200036c0 	.word	0x200036c0

080102f4 <_close_r>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	4d06      	ldr	r5, [pc, #24]	; (8010310 <_close_r+0x1c>)
 80102f8:	2300      	movs	r3, #0
 80102fa:	4604      	mov	r4, r0
 80102fc:	4608      	mov	r0, r1
 80102fe:	602b      	str	r3, [r5, #0]
 8010300:	f7f5 fdb1 	bl	8005e66 <_close>
 8010304:	1c43      	adds	r3, r0, #1
 8010306:	d102      	bne.n	801030e <_close_r+0x1a>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	b103      	cbz	r3, 801030e <_close_r+0x1a>
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	200036c0 	.word	0x200036c0

08010314 <quorem>:
 8010314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010318:	6903      	ldr	r3, [r0, #16]
 801031a:	690c      	ldr	r4, [r1, #16]
 801031c:	42a3      	cmp	r3, r4
 801031e:	4607      	mov	r7, r0
 8010320:	f2c0 8081 	blt.w	8010426 <quorem+0x112>
 8010324:	3c01      	subs	r4, #1
 8010326:	f101 0814 	add.w	r8, r1, #20
 801032a:	f100 0514 	add.w	r5, r0, #20
 801032e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010332:	9301      	str	r3, [sp, #4]
 8010334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801033c:	3301      	adds	r3, #1
 801033e:	429a      	cmp	r2, r3
 8010340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010348:	fbb2 f6f3 	udiv	r6, r2, r3
 801034c:	d331      	bcc.n	80103b2 <quorem+0x9e>
 801034e:	f04f 0e00 	mov.w	lr, #0
 8010352:	4640      	mov	r0, r8
 8010354:	46ac      	mov	ip, r5
 8010356:	46f2      	mov	sl, lr
 8010358:	f850 2b04 	ldr.w	r2, [r0], #4
 801035c:	b293      	uxth	r3, r2
 801035e:	fb06 e303 	mla	r3, r6, r3, lr
 8010362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010366:	b29b      	uxth	r3, r3
 8010368:	ebaa 0303 	sub.w	r3, sl, r3
 801036c:	f8dc a000 	ldr.w	sl, [ip]
 8010370:	0c12      	lsrs	r2, r2, #16
 8010372:	fa13 f38a 	uxtah	r3, r3, sl
 8010376:	fb06 e202 	mla	r2, r6, r2, lr
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010382:	b292      	uxth	r2, r2
 8010384:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801038c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010390:	4581      	cmp	r9, r0
 8010392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010396:	f84c 3b04 	str.w	r3, [ip], #4
 801039a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801039e:	d2db      	bcs.n	8010358 <quorem+0x44>
 80103a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80103a4:	b92b      	cbnz	r3, 80103b2 <quorem+0x9e>
 80103a6:	9b01      	ldr	r3, [sp, #4]
 80103a8:	3b04      	subs	r3, #4
 80103aa:	429d      	cmp	r5, r3
 80103ac:	461a      	mov	r2, r3
 80103ae:	d32e      	bcc.n	801040e <quorem+0xfa>
 80103b0:	613c      	str	r4, [r7, #16]
 80103b2:	4638      	mov	r0, r7
 80103b4:	f001 fd64 	bl	8011e80 <__mcmp>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	db24      	blt.n	8010406 <quorem+0xf2>
 80103bc:	3601      	adds	r6, #1
 80103be:	4628      	mov	r0, r5
 80103c0:	f04f 0c00 	mov.w	ip, #0
 80103c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80103c8:	f8d0 e000 	ldr.w	lr, [r0]
 80103cc:	b293      	uxth	r3, r2
 80103ce:	ebac 0303 	sub.w	r3, ip, r3
 80103d2:	0c12      	lsrs	r2, r2, #16
 80103d4:	fa13 f38e 	uxtah	r3, r3, lr
 80103d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80103dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103e6:	45c1      	cmp	r9, r8
 80103e8:	f840 3b04 	str.w	r3, [r0], #4
 80103ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80103f0:	d2e8      	bcs.n	80103c4 <quorem+0xb0>
 80103f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103fa:	b922      	cbnz	r2, 8010406 <quorem+0xf2>
 80103fc:	3b04      	subs	r3, #4
 80103fe:	429d      	cmp	r5, r3
 8010400:	461a      	mov	r2, r3
 8010402:	d30a      	bcc.n	801041a <quorem+0x106>
 8010404:	613c      	str	r4, [r7, #16]
 8010406:	4630      	mov	r0, r6
 8010408:	b003      	add	sp, #12
 801040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040e:	6812      	ldr	r2, [r2, #0]
 8010410:	3b04      	subs	r3, #4
 8010412:	2a00      	cmp	r2, #0
 8010414:	d1cc      	bne.n	80103b0 <quorem+0x9c>
 8010416:	3c01      	subs	r4, #1
 8010418:	e7c7      	b.n	80103aa <quorem+0x96>
 801041a:	6812      	ldr	r2, [r2, #0]
 801041c:	3b04      	subs	r3, #4
 801041e:	2a00      	cmp	r2, #0
 8010420:	d1f0      	bne.n	8010404 <quorem+0xf0>
 8010422:	3c01      	subs	r4, #1
 8010424:	e7eb      	b.n	80103fe <quorem+0xea>
 8010426:	2000      	movs	r0, #0
 8010428:	e7ee      	b.n	8010408 <quorem+0xf4>
 801042a:	0000      	movs	r0, r0
 801042c:	0000      	movs	r0, r0
	...

08010430 <_dtoa_r>:
 8010430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010434:	ed2d 8b04 	vpush	{d8-d9}
 8010438:	ec57 6b10 	vmov	r6, r7, d0
 801043c:	b093      	sub	sp, #76	; 0x4c
 801043e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010444:	9106      	str	r1, [sp, #24]
 8010446:	ee10 aa10 	vmov	sl, s0
 801044a:	4604      	mov	r4, r0
 801044c:	9209      	str	r2, [sp, #36]	; 0x24
 801044e:	930c      	str	r3, [sp, #48]	; 0x30
 8010450:	46bb      	mov	fp, r7
 8010452:	b975      	cbnz	r5, 8010472 <_dtoa_r+0x42>
 8010454:	2010      	movs	r0, #16
 8010456:	f001 fa21 	bl	801189c <malloc>
 801045a:	4602      	mov	r2, r0
 801045c:	6260      	str	r0, [r4, #36]	; 0x24
 801045e:	b920      	cbnz	r0, 801046a <_dtoa_r+0x3a>
 8010460:	4ba7      	ldr	r3, [pc, #668]	; (8010700 <_dtoa_r+0x2d0>)
 8010462:	21ea      	movs	r1, #234	; 0xea
 8010464:	48a7      	ldr	r0, [pc, #668]	; (8010704 <_dtoa_r+0x2d4>)
 8010466:	f002 f8fd 	bl	8012664 <__assert_func>
 801046a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801046e:	6005      	str	r5, [r0, #0]
 8010470:	60c5      	str	r5, [r0, #12]
 8010472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010474:	6819      	ldr	r1, [r3, #0]
 8010476:	b151      	cbz	r1, 801048e <_dtoa_r+0x5e>
 8010478:	685a      	ldr	r2, [r3, #4]
 801047a:	604a      	str	r2, [r1, #4]
 801047c:	2301      	movs	r3, #1
 801047e:	4093      	lsls	r3, r2
 8010480:	608b      	str	r3, [r1, #8]
 8010482:	4620      	mov	r0, r4
 8010484:	f001 fa70 	bl	8011968 <_Bfree>
 8010488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	1e3b      	subs	r3, r7, #0
 8010490:	bfaa      	itet	ge
 8010492:	2300      	movge	r3, #0
 8010494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010498:	f8c8 3000 	strge.w	r3, [r8]
 801049c:	4b9a      	ldr	r3, [pc, #616]	; (8010708 <_dtoa_r+0x2d8>)
 801049e:	bfbc      	itt	lt
 80104a0:	2201      	movlt	r2, #1
 80104a2:	f8c8 2000 	strlt.w	r2, [r8]
 80104a6:	ea33 030b 	bics.w	r3, r3, fp
 80104aa:	d11b      	bne.n	80104e4 <_dtoa_r+0xb4>
 80104ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80104b2:	6013      	str	r3, [r2, #0]
 80104b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104b8:	4333      	orrs	r3, r6
 80104ba:	f000 8592 	beq.w	8010fe2 <_dtoa_r+0xbb2>
 80104be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104c0:	b963      	cbnz	r3, 80104dc <_dtoa_r+0xac>
 80104c2:	4b92      	ldr	r3, [pc, #584]	; (801070c <_dtoa_r+0x2dc>)
 80104c4:	e022      	b.n	801050c <_dtoa_r+0xdc>
 80104c6:	4b92      	ldr	r3, [pc, #584]	; (8010710 <_dtoa_r+0x2e0>)
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	3308      	adds	r3, #8
 80104cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80104ce:	6013      	str	r3, [r2, #0]
 80104d0:	9801      	ldr	r0, [sp, #4]
 80104d2:	b013      	add	sp, #76	; 0x4c
 80104d4:	ecbd 8b04 	vpop	{d8-d9}
 80104d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104dc:	4b8b      	ldr	r3, [pc, #556]	; (801070c <_dtoa_r+0x2dc>)
 80104de:	9301      	str	r3, [sp, #4]
 80104e0:	3303      	adds	r3, #3
 80104e2:	e7f3      	b.n	80104cc <_dtoa_r+0x9c>
 80104e4:	2200      	movs	r2, #0
 80104e6:	2300      	movs	r3, #0
 80104e8:	4650      	mov	r0, sl
 80104ea:	4659      	mov	r1, fp
 80104ec:	f7f0 fac4 	bl	8000a78 <__aeabi_dcmpeq>
 80104f0:	ec4b ab19 	vmov	d9, sl, fp
 80104f4:	4680      	mov	r8, r0
 80104f6:	b158      	cbz	r0, 8010510 <_dtoa_r+0xe0>
 80104f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104fa:	2301      	movs	r3, #1
 80104fc:	6013      	str	r3, [r2, #0]
 80104fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 856b 	beq.w	8010fdc <_dtoa_r+0xbac>
 8010506:	4883      	ldr	r0, [pc, #524]	; (8010714 <_dtoa_r+0x2e4>)
 8010508:	6018      	str	r0, [r3, #0]
 801050a:	1e43      	subs	r3, r0, #1
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	e7df      	b.n	80104d0 <_dtoa_r+0xa0>
 8010510:	ec4b ab10 	vmov	d0, sl, fp
 8010514:	aa10      	add	r2, sp, #64	; 0x40
 8010516:	a911      	add	r1, sp, #68	; 0x44
 8010518:	4620      	mov	r0, r4
 801051a:	f001 fdd3 	bl	80120c4 <__d2b>
 801051e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010522:	ee08 0a10 	vmov	s16, r0
 8010526:	2d00      	cmp	r5, #0
 8010528:	f000 8084 	beq.w	8010634 <_dtoa_r+0x204>
 801052c:	ee19 3a90 	vmov	r3, s19
 8010530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010538:	4656      	mov	r6, sl
 801053a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801053e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010546:	4b74      	ldr	r3, [pc, #464]	; (8010718 <_dtoa_r+0x2e8>)
 8010548:	2200      	movs	r2, #0
 801054a:	4630      	mov	r0, r6
 801054c:	4639      	mov	r1, r7
 801054e:	f7ef fe73 	bl	8000238 <__aeabi_dsub>
 8010552:	a365      	add	r3, pc, #404	; (adr r3, 80106e8 <_dtoa_r+0x2b8>)
 8010554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010558:	f7f0 f826 	bl	80005a8 <__aeabi_dmul>
 801055c:	a364      	add	r3, pc, #400	; (adr r3, 80106f0 <_dtoa_r+0x2c0>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef fe6b 	bl	800023c <__adddf3>
 8010566:	4606      	mov	r6, r0
 8010568:	4628      	mov	r0, r5
 801056a:	460f      	mov	r7, r1
 801056c:	f7ef ffb2 	bl	80004d4 <__aeabi_i2d>
 8010570:	a361      	add	r3, pc, #388	; (adr r3, 80106f8 <_dtoa_r+0x2c8>)
 8010572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010576:	f7f0 f817 	bl	80005a8 <__aeabi_dmul>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	4630      	mov	r0, r6
 8010580:	4639      	mov	r1, r7
 8010582:	f7ef fe5b 	bl	800023c <__adddf3>
 8010586:	4606      	mov	r6, r0
 8010588:	460f      	mov	r7, r1
 801058a:	f7f0 fabd 	bl	8000b08 <__aeabi_d2iz>
 801058e:	2200      	movs	r2, #0
 8010590:	9000      	str	r0, [sp, #0]
 8010592:	2300      	movs	r3, #0
 8010594:	4630      	mov	r0, r6
 8010596:	4639      	mov	r1, r7
 8010598:	f7f0 fa78 	bl	8000a8c <__aeabi_dcmplt>
 801059c:	b150      	cbz	r0, 80105b4 <_dtoa_r+0x184>
 801059e:	9800      	ldr	r0, [sp, #0]
 80105a0:	f7ef ff98 	bl	80004d4 <__aeabi_i2d>
 80105a4:	4632      	mov	r2, r6
 80105a6:	463b      	mov	r3, r7
 80105a8:	f7f0 fa66 	bl	8000a78 <__aeabi_dcmpeq>
 80105ac:	b910      	cbnz	r0, 80105b4 <_dtoa_r+0x184>
 80105ae:	9b00      	ldr	r3, [sp, #0]
 80105b0:	3b01      	subs	r3, #1
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	9b00      	ldr	r3, [sp, #0]
 80105b6:	2b16      	cmp	r3, #22
 80105b8:	d85a      	bhi.n	8010670 <_dtoa_r+0x240>
 80105ba:	9a00      	ldr	r2, [sp, #0]
 80105bc:	4b57      	ldr	r3, [pc, #348]	; (801071c <_dtoa_r+0x2ec>)
 80105be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	ec51 0b19 	vmov	r0, r1, d9
 80105ca:	f7f0 fa5f 	bl	8000a8c <__aeabi_dcmplt>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d050      	beq.n	8010674 <_dtoa_r+0x244>
 80105d2:	9b00      	ldr	r3, [sp, #0]
 80105d4:	3b01      	subs	r3, #1
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	2300      	movs	r3, #0
 80105da:	930b      	str	r3, [sp, #44]	; 0x2c
 80105dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105de:	1b5d      	subs	r5, r3, r5
 80105e0:	1e6b      	subs	r3, r5, #1
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	bf45      	ittet	mi
 80105e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80105ea:	9304      	strmi	r3, [sp, #16]
 80105ec:	2300      	movpl	r3, #0
 80105ee:	2300      	movmi	r3, #0
 80105f0:	bf4c      	ite	mi
 80105f2:	9305      	strmi	r3, [sp, #20]
 80105f4:	9304      	strpl	r3, [sp, #16]
 80105f6:	9b00      	ldr	r3, [sp, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	db3d      	blt.n	8010678 <_dtoa_r+0x248>
 80105fc:	9b05      	ldr	r3, [sp, #20]
 80105fe:	9a00      	ldr	r2, [sp, #0]
 8010600:	920a      	str	r2, [sp, #40]	; 0x28
 8010602:	4413      	add	r3, r2
 8010604:	9305      	str	r3, [sp, #20]
 8010606:	2300      	movs	r3, #0
 8010608:	9307      	str	r3, [sp, #28]
 801060a:	9b06      	ldr	r3, [sp, #24]
 801060c:	2b09      	cmp	r3, #9
 801060e:	f200 8089 	bhi.w	8010724 <_dtoa_r+0x2f4>
 8010612:	2b05      	cmp	r3, #5
 8010614:	bfc4      	itt	gt
 8010616:	3b04      	subgt	r3, #4
 8010618:	9306      	strgt	r3, [sp, #24]
 801061a:	9b06      	ldr	r3, [sp, #24]
 801061c:	f1a3 0302 	sub.w	r3, r3, #2
 8010620:	bfcc      	ite	gt
 8010622:	2500      	movgt	r5, #0
 8010624:	2501      	movle	r5, #1
 8010626:	2b03      	cmp	r3, #3
 8010628:	f200 8087 	bhi.w	801073a <_dtoa_r+0x30a>
 801062c:	e8df f003 	tbb	[pc, r3]
 8010630:	59383a2d 	.word	0x59383a2d
 8010634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010638:	441d      	add	r5, r3
 801063a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801063e:	2b20      	cmp	r3, #32
 8010640:	bfc1      	itttt	gt
 8010642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801064a:	fa0b f303 	lslgt.w	r3, fp, r3
 801064e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010652:	bfda      	itte	le
 8010654:	f1c3 0320 	rsble	r3, r3, #32
 8010658:	fa06 f003 	lslle.w	r0, r6, r3
 801065c:	4318      	orrgt	r0, r3
 801065e:	f7ef ff29 	bl	80004b4 <__aeabi_ui2d>
 8010662:	2301      	movs	r3, #1
 8010664:	4606      	mov	r6, r0
 8010666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801066a:	3d01      	subs	r5, #1
 801066c:	930e      	str	r3, [sp, #56]	; 0x38
 801066e:	e76a      	b.n	8010546 <_dtoa_r+0x116>
 8010670:	2301      	movs	r3, #1
 8010672:	e7b2      	b.n	80105da <_dtoa_r+0x1aa>
 8010674:	900b      	str	r0, [sp, #44]	; 0x2c
 8010676:	e7b1      	b.n	80105dc <_dtoa_r+0x1ac>
 8010678:	9b04      	ldr	r3, [sp, #16]
 801067a:	9a00      	ldr	r2, [sp, #0]
 801067c:	1a9b      	subs	r3, r3, r2
 801067e:	9304      	str	r3, [sp, #16]
 8010680:	4253      	negs	r3, r2
 8010682:	9307      	str	r3, [sp, #28]
 8010684:	2300      	movs	r3, #0
 8010686:	930a      	str	r3, [sp, #40]	; 0x28
 8010688:	e7bf      	b.n	801060a <_dtoa_r+0x1da>
 801068a:	2300      	movs	r3, #0
 801068c:	9308      	str	r3, [sp, #32]
 801068e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010690:	2b00      	cmp	r3, #0
 8010692:	dc55      	bgt.n	8010740 <_dtoa_r+0x310>
 8010694:	2301      	movs	r3, #1
 8010696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801069a:	461a      	mov	r2, r3
 801069c:	9209      	str	r2, [sp, #36]	; 0x24
 801069e:	e00c      	b.n	80106ba <_dtoa_r+0x28a>
 80106a0:	2301      	movs	r3, #1
 80106a2:	e7f3      	b.n	801068c <_dtoa_r+0x25c>
 80106a4:	2300      	movs	r3, #0
 80106a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106a8:	9308      	str	r3, [sp, #32]
 80106aa:	9b00      	ldr	r3, [sp, #0]
 80106ac:	4413      	add	r3, r2
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	3301      	adds	r3, #1
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	9303      	str	r3, [sp, #12]
 80106b6:	bfb8      	it	lt
 80106b8:	2301      	movlt	r3, #1
 80106ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80106bc:	2200      	movs	r2, #0
 80106be:	6042      	str	r2, [r0, #4]
 80106c0:	2204      	movs	r2, #4
 80106c2:	f102 0614 	add.w	r6, r2, #20
 80106c6:	429e      	cmp	r6, r3
 80106c8:	6841      	ldr	r1, [r0, #4]
 80106ca:	d93d      	bls.n	8010748 <_dtoa_r+0x318>
 80106cc:	4620      	mov	r0, r4
 80106ce:	f001 f90b 	bl	80118e8 <_Balloc>
 80106d2:	9001      	str	r0, [sp, #4]
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d13b      	bne.n	8010750 <_dtoa_r+0x320>
 80106d8:	4b11      	ldr	r3, [pc, #68]	; (8010720 <_dtoa_r+0x2f0>)
 80106da:	4602      	mov	r2, r0
 80106dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80106e0:	e6c0      	b.n	8010464 <_dtoa_r+0x34>
 80106e2:	2301      	movs	r3, #1
 80106e4:	e7df      	b.n	80106a6 <_dtoa_r+0x276>
 80106e6:	bf00      	nop
 80106e8:	636f4361 	.word	0x636f4361
 80106ec:	3fd287a7 	.word	0x3fd287a7
 80106f0:	8b60c8b3 	.word	0x8b60c8b3
 80106f4:	3fc68a28 	.word	0x3fc68a28
 80106f8:	509f79fb 	.word	0x509f79fb
 80106fc:	3fd34413 	.word	0x3fd34413
 8010700:	08016116 	.word	0x08016116
 8010704:	0801612d 	.word	0x0801612d
 8010708:	7ff00000 	.word	0x7ff00000
 801070c:	08016112 	.word	0x08016112
 8010710:	08016109 	.word	0x08016109
 8010714:	08015f8d 	.word	0x08015f8d
 8010718:	3ff80000 	.word	0x3ff80000
 801071c:	08016298 	.word	0x08016298
 8010720:	08016188 	.word	0x08016188
 8010724:	2501      	movs	r5, #1
 8010726:	2300      	movs	r3, #0
 8010728:	9306      	str	r3, [sp, #24]
 801072a:	9508      	str	r5, [sp, #32]
 801072c:	f04f 33ff 	mov.w	r3, #4294967295
 8010730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010734:	2200      	movs	r2, #0
 8010736:	2312      	movs	r3, #18
 8010738:	e7b0      	b.n	801069c <_dtoa_r+0x26c>
 801073a:	2301      	movs	r3, #1
 801073c:	9308      	str	r3, [sp, #32]
 801073e:	e7f5      	b.n	801072c <_dtoa_r+0x2fc>
 8010740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010746:	e7b8      	b.n	80106ba <_dtoa_r+0x28a>
 8010748:	3101      	adds	r1, #1
 801074a:	6041      	str	r1, [r0, #4]
 801074c:	0052      	lsls	r2, r2, #1
 801074e:	e7b8      	b.n	80106c2 <_dtoa_r+0x292>
 8010750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010752:	9a01      	ldr	r2, [sp, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	9b03      	ldr	r3, [sp, #12]
 8010758:	2b0e      	cmp	r3, #14
 801075a:	f200 809d 	bhi.w	8010898 <_dtoa_r+0x468>
 801075e:	2d00      	cmp	r5, #0
 8010760:	f000 809a 	beq.w	8010898 <_dtoa_r+0x468>
 8010764:	9b00      	ldr	r3, [sp, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	dd32      	ble.n	80107d0 <_dtoa_r+0x3a0>
 801076a:	4ab7      	ldr	r2, [pc, #732]	; (8010a48 <_dtoa_r+0x618>)
 801076c:	f003 030f 	and.w	r3, r3, #15
 8010770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010778:	9b00      	ldr	r3, [sp, #0]
 801077a:	05d8      	lsls	r0, r3, #23
 801077c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010780:	d516      	bpl.n	80107b0 <_dtoa_r+0x380>
 8010782:	4bb2      	ldr	r3, [pc, #712]	; (8010a4c <_dtoa_r+0x61c>)
 8010784:	ec51 0b19 	vmov	r0, r1, d9
 8010788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801078c:	f7f0 f836 	bl	80007fc <__aeabi_ddiv>
 8010790:	f007 070f 	and.w	r7, r7, #15
 8010794:	4682      	mov	sl, r0
 8010796:	468b      	mov	fp, r1
 8010798:	2503      	movs	r5, #3
 801079a:	4eac      	ldr	r6, [pc, #688]	; (8010a4c <_dtoa_r+0x61c>)
 801079c:	b957      	cbnz	r7, 80107b4 <_dtoa_r+0x384>
 801079e:	4642      	mov	r2, r8
 80107a0:	464b      	mov	r3, r9
 80107a2:	4650      	mov	r0, sl
 80107a4:	4659      	mov	r1, fp
 80107a6:	f7f0 f829 	bl	80007fc <__aeabi_ddiv>
 80107aa:	4682      	mov	sl, r0
 80107ac:	468b      	mov	fp, r1
 80107ae:	e028      	b.n	8010802 <_dtoa_r+0x3d2>
 80107b0:	2502      	movs	r5, #2
 80107b2:	e7f2      	b.n	801079a <_dtoa_r+0x36a>
 80107b4:	07f9      	lsls	r1, r7, #31
 80107b6:	d508      	bpl.n	80107ca <_dtoa_r+0x39a>
 80107b8:	4640      	mov	r0, r8
 80107ba:	4649      	mov	r1, r9
 80107bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80107c0:	f7ef fef2 	bl	80005a8 <__aeabi_dmul>
 80107c4:	3501      	adds	r5, #1
 80107c6:	4680      	mov	r8, r0
 80107c8:	4689      	mov	r9, r1
 80107ca:	107f      	asrs	r7, r7, #1
 80107cc:	3608      	adds	r6, #8
 80107ce:	e7e5      	b.n	801079c <_dtoa_r+0x36c>
 80107d0:	f000 809b 	beq.w	801090a <_dtoa_r+0x4da>
 80107d4:	9b00      	ldr	r3, [sp, #0]
 80107d6:	4f9d      	ldr	r7, [pc, #628]	; (8010a4c <_dtoa_r+0x61c>)
 80107d8:	425e      	negs	r6, r3
 80107da:	4b9b      	ldr	r3, [pc, #620]	; (8010a48 <_dtoa_r+0x618>)
 80107dc:	f006 020f 	and.w	r2, r6, #15
 80107e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	ec51 0b19 	vmov	r0, r1, d9
 80107ec:	f7ef fedc 	bl	80005a8 <__aeabi_dmul>
 80107f0:	1136      	asrs	r6, r6, #4
 80107f2:	4682      	mov	sl, r0
 80107f4:	468b      	mov	fp, r1
 80107f6:	2300      	movs	r3, #0
 80107f8:	2502      	movs	r5, #2
 80107fa:	2e00      	cmp	r6, #0
 80107fc:	d17a      	bne.n	80108f4 <_dtoa_r+0x4c4>
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1d3      	bne.n	80107aa <_dtoa_r+0x37a>
 8010802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8082 	beq.w	801090e <_dtoa_r+0x4de>
 801080a:	4b91      	ldr	r3, [pc, #580]	; (8010a50 <_dtoa_r+0x620>)
 801080c:	2200      	movs	r2, #0
 801080e:	4650      	mov	r0, sl
 8010810:	4659      	mov	r1, fp
 8010812:	f7f0 f93b 	bl	8000a8c <__aeabi_dcmplt>
 8010816:	2800      	cmp	r0, #0
 8010818:	d079      	beq.n	801090e <_dtoa_r+0x4de>
 801081a:	9b03      	ldr	r3, [sp, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d076      	beq.n	801090e <_dtoa_r+0x4de>
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	dd36      	ble.n	8010894 <_dtoa_r+0x464>
 8010826:	9b00      	ldr	r3, [sp, #0]
 8010828:	4650      	mov	r0, sl
 801082a:	4659      	mov	r1, fp
 801082c:	1e5f      	subs	r7, r3, #1
 801082e:	2200      	movs	r2, #0
 8010830:	4b88      	ldr	r3, [pc, #544]	; (8010a54 <_dtoa_r+0x624>)
 8010832:	f7ef feb9 	bl	80005a8 <__aeabi_dmul>
 8010836:	9e02      	ldr	r6, [sp, #8]
 8010838:	4682      	mov	sl, r0
 801083a:	468b      	mov	fp, r1
 801083c:	3501      	adds	r5, #1
 801083e:	4628      	mov	r0, r5
 8010840:	f7ef fe48 	bl	80004d4 <__aeabi_i2d>
 8010844:	4652      	mov	r2, sl
 8010846:	465b      	mov	r3, fp
 8010848:	f7ef feae 	bl	80005a8 <__aeabi_dmul>
 801084c:	4b82      	ldr	r3, [pc, #520]	; (8010a58 <_dtoa_r+0x628>)
 801084e:	2200      	movs	r2, #0
 8010850:	f7ef fcf4 	bl	800023c <__adddf3>
 8010854:	46d0      	mov	r8, sl
 8010856:	46d9      	mov	r9, fp
 8010858:	4682      	mov	sl, r0
 801085a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801085e:	2e00      	cmp	r6, #0
 8010860:	d158      	bne.n	8010914 <_dtoa_r+0x4e4>
 8010862:	4b7e      	ldr	r3, [pc, #504]	; (8010a5c <_dtoa_r+0x62c>)
 8010864:	2200      	movs	r2, #0
 8010866:	4640      	mov	r0, r8
 8010868:	4649      	mov	r1, r9
 801086a:	f7ef fce5 	bl	8000238 <__aeabi_dsub>
 801086e:	4652      	mov	r2, sl
 8010870:	465b      	mov	r3, fp
 8010872:	4680      	mov	r8, r0
 8010874:	4689      	mov	r9, r1
 8010876:	f7f0 f927 	bl	8000ac8 <__aeabi_dcmpgt>
 801087a:	2800      	cmp	r0, #0
 801087c:	f040 8295 	bne.w	8010daa <_dtoa_r+0x97a>
 8010880:	4652      	mov	r2, sl
 8010882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010886:	4640      	mov	r0, r8
 8010888:	4649      	mov	r1, r9
 801088a:	f7f0 f8ff 	bl	8000a8c <__aeabi_dcmplt>
 801088e:	2800      	cmp	r0, #0
 8010890:	f040 8289 	bne.w	8010da6 <_dtoa_r+0x976>
 8010894:	ec5b ab19 	vmov	sl, fp, d9
 8010898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801089a:	2b00      	cmp	r3, #0
 801089c:	f2c0 8148 	blt.w	8010b30 <_dtoa_r+0x700>
 80108a0:	9a00      	ldr	r2, [sp, #0]
 80108a2:	2a0e      	cmp	r2, #14
 80108a4:	f300 8144 	bgt.w	8010b30 <_dtoa_r+0x700>
 80108a8:	4b67      	ldr	r3, [pc, #412]	; (8010a48 <_dtoa_r+0x618>)
 80108aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f280 80d5 	bge.w	8010a64 <_dtoa_r+0x634>
 80108ba:	9b03      	ldr	r3, [sp, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f300 80d1 	bgt.w	8010a64 <_dtoa_r+0x634>
 80108c2:	f040 826f 	bne.w	8010da4 <_dtoa_r+0x974>
 80108c6:	4b65      	ldr	r3, [pc, #404]	; (8010a5c <_dtoa_r+0x62c>)
 80108c8:	2200      	movs	r2, #0
 80108ca:	4640      	mov	r0, r8
 80108cc:	4649      	mov	r1, r9
 80108ce:	f7ef fe6b 	bl	80005a8 <__aeabi_dmul>
 80108d2:	4652      	mov	r2, sl
 80108d4:	465b      	mov	r3, fp
 80108d6:	f7f0 f8ed 	bl	8000ab4 <__aeabi_dcmpge>
 80108da:	9e03      	ldr	r6, [sp, #12]
 80108dc:	4637      	mov	r7, r6
 80108de:	2800      	cmp	r0, #0
 80108e0:	f040 8245 	bne.w	8010d6e <_dtoa_r+0x93e>
 80108e4:	9d01      	ldr	r5, [sp, #4]
 80108e6:	2331      	movs	r3, #49	; 0x31
 80108e8:	f805 3b01 	strb.w	r3, [r5], #1
 80108ec:	9b00      	ldr	r3, [sp, #0]
 80108ee:	3301      	adds	r3, #1
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	e240      	b.n	8010d76 <_dtoa_r+0x946>
 80108f4:	07f2      	lsls	r2, r6, #31
 80108f6:	d505      	bpl.n	8010904 <_dtoa_r+0x4d4>
 80108f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108fc:	f7ef fe54 	bl	80005a8 <__aeabi_dmul>
 8010900:	3501      	adds	r5, #1
 8010902:	2301      	movs	r3, #1
 8010904:	1076      	asrs	r6, r6, #1
 8010906:	3708      	adds	r7, #8
 8010908:	e777      	b.n	80107fa <_dtoa_r+0x3ca>
 801090a:	2502      	movs	r5, #2
 801090c:	e779      	b.n	8010802 <_dtoa_r+0x3d2>
 801090e:	9f00      	ldr	r7, [sp, #0]
 8010910:	9e03      	ldr	r6, [sp, #12]
 8010912:	e794      	b.n	801083e <_dtoa_r+0x40e>
 8010914:	9901      	ldr	r1, [sp, #4]
 8010916:	4b4c      	ldr	r3, [pc, #304]	; (8010a48 <_dtoa_r+0x618>)
 8010918:	4431      	add	r1, r6
 801091a:	910d      	str	r1, [sp, #52]	; 0x34
 801091c:	9908      	ldr	r1, [sp, #32]
 801091e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010926:	2900      	cmp	r1, #0
 8010928:	d043      	beq.n	80109b2 <_dtoa_r+0x582>
 801092a:	494d      	ldr	r1, [pc, #308]	; (8010a60 <_dtoa_r+0x630>)
 801092c:	2000      	movs	r0, #0
 801092e:	f7ef ff65 	bl	80007fc <__aeabi_ddiv>
 8010932:	4652      	mov	r2, sl
 8010934:	465b      	mov	r3, fp
 8010936:	f7ef fc7f 	bl	8000238 <__aeabi_dsub>
 801093a:	9d01      	ldr	r5, [sp, #4]
 801093c:	4682      	mov	sl, r0
 801093e:	468b      	mov	fp, r1
 8010940:	4649      	mov	r1, r9
 8010942:	4640      	mov	r0, r8
 8010944:	f7f0 f8e0 	bl	8000b08 <__aeabi_d2iz>
 8010948:	4606      	mov	r6, r0
 801094a:	f7ef fdc3 	bl	80004d4 <__aeabi_i2d>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4640      	mov	r0, r8
 8010954:	4649      	mov	r1, r9
 8010956:	f7ef fc6f 	bl	8000238 <__aeabi_dsub>
 801095a:	3630      	adds	r6, #48	; 0x30
 801095c:	f805 6b01 	strb.w	r6, [r5], #1
 8010960:	4652      	mov	r2, sl
 8010962:	465b      	mov	r3, fp
 8010964:	4680      	mov	r8, r0
 8010966:	4689      	mov	r9, r1
 8010968:	f7f0 f890 	bl	8000a8c <__aeabi_dcmplt>
 801096c:	2800      	cmp	r0, #0
 801096e:	d163      	bne.n	8010a38 <_dtoa_r+0x608>
 8010970:	4642      	mov	r2, r8
 8010972:	464b      	mov	r3, r9
 8010974:	4936      	ldr	r1, [pc, #216]	; (8010a50 <_dtoa_r+0x620>)
 8010976:	2000      	movs	r0, #0
 8010978:	f7ef fc5e 	bl	8000238 <__aeabi_dsub>
 801097c:	4652      	mov	r2, sl
 801097e:	465b      	mov	r3, fp
 8010980:	f7f0 f884 	bl	8000a8c <__aeabi_dcmplt>
 8010984:	2800      	cmp	r0, #0
 8010986:	f040 80b5 	bne.w	8010af4 <_dtoa_r+0x6c4>
 801098a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801098c:	429d      	cmp	r5, r3
 801098e:	d081      	beq.n	8010894 <_dtoa_r+0x464>
 8010990:	4b30      	ldr	r3, [pc, #192]	; (8010a54 <_dtoa_r+0x624>)
 8010992:	2200      	movs	r2, #0
 8010994:	4650      	mov	r0, sl
 8010996:	4659      	mov	r1, fp
 8010998:	f7ef fe06 	bl	80005a8 <__aeabi_dmul>
 801099c:	4b2d      	ldr	r3, [pc, #180]	; (8010a54 <_dtoa_r+0x624>)
 801099e:	4682      	mov	sl, r0
 80109a0:	468b      	mov	fp, r1
 80109a2:	4640      	mov	r0, r8
 80109a4:	4649      	mov	r1, r9
 80109a6:	2200      	movs	r2, #0
 80109a8:	f7ef fdfe 	bl	80005a8 <__aeabi_dmul>
 80109ac:	4680      	mov	r8, r0
 80109ae:	4689      	mov	r9, r1
 80109b0:	e7c6      	b.n	8010940 <_dtoa_r+0x510>
 80109b2:	4650      	mov	r0, sl
 80109b4:	4659      	mov	r1, fp
 80109b6:	f7ef fdf7 	bl	80005a8 <__aeabi_dmul>
 80109ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109bc:	9d01      	ldr	r5, [sp, #4]
 80109be:	930f      	str	r3, [sp, #60]	; 0x3c
 80109c0:	4682      	mov	sl, r0
 80109c2:	468b      	mov	fp, r1
 80109c4:	4649      	mov	r1, r9
 80109c6:	4640      	mov	r0, r8
 80109c8:	f7f0 f89e 	bl	8000b08 <__aeabi_d2iz>
 80109cc:	4606      	mov	r6, r0
 80109ce:	f7ef fd81 	bl	80004d4 <__aeabi_i2d>
 80109d2:	3630      	adds	r6, #48	; 0x30
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	4640      	mov	r0, r8
 80109da:	4649      	mov	r1, r9
 80109dc:	f7ef fc2c 	bl	8000238 <__aeabi_dsub>
 80109e0:	f805 6b01 	strb.w	r6, [r5], #1
 80109e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109e6:	429d      	cmp	r5, r3
 80109e8:	4680      	mov	r8, r0
 80109ea:	4689      	mov	r9, r1
 80109ec:	f04f 0200 	mov.w	r2, #0
 80109f0:	d124      	bne.n	8010a3c <_dtoa_r+0x60c>
 80109f2:	4b1b      	ldr	r3, [pc, #108]	; (8010a60 <_dtoa_r+0x630>)
 80109f4:	4650      	mov	r0, sl
 80109f6:	4659      	mov	r1, fp
 80109f8:	f7ef fc20 	bl	800023c <__adddf3>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	4640      	mov	r0, r8
 8010a02:	4649      	mov	r1, r9
 8010a04:	f7f0 f860 	bl	8000ac8 <__aeabi_dcmpgt>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d173      	bne.n	8010af4 <_dtoa_r+0x6c4>
 8010a0c:	4652      	mov	r2, sl
 8010a0e:	465b      	mov	r3, fp
 8010a10:	4913      	ldr	r1, [pc, #76]	; (8010a60 <_dtoa_r+0x630>)
 8010a12:	2000      	movs	r0, #0
 8010a14:	f7ef fc10 	bl	8000238 <__aeabi_dsub>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	f7f0 f834 	bl	8000a8c <__aeabi_dcmplt>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	f43f af35 	beq.w	8010894 <_dtoa_r+0x464>
 8010a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010a2c:	1e6b      	subs	r3, r5, #1
 8010a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010a34:	2b30      	cmp	r3, #48	; 0x30
 8010a36:	d0f8      	beq.n	8010a2a <_dtoa_r+0x5fa>
 8010a38:	9700      	str	r7, [sp, #0]
 8010a3a:	e049      	b.n	8010ad0 <_dtoa_r+0x6a0>
 8010a3c:	4b05      	ldr	r3, [pc, #20]	; (8010a54 <_dtoa_r+0x624>)
 8010a3e:	f7ef fdb3 	bl	80005a8 <__aeabi_dmul>
 8010a42:	4680      	mov	r8, r0
 8010a44:	4689      	mov	r9, r1
 8010a46:	e7bd      	b.n	80109c4 <_dtoa_r+0x594>
 8010a48:	08016298 	.word	0x08016298
 8010a4c:	08016270 	.word	0x08016270
 8010a50:	3ff00000 	.word	0x3ff00000
 8010a54:	40240000 	.word	0x40240000
 8010a58:	401c0000 	.word	0x401c0000
 8010a5c:	40140000 	.word	0x40140000
 8010a60:	3fe00000 	.word	0x3fe00000
 8010a64:	9d01      	ldr	r5, [sp, #4]
 8010a66:	4656      	mov	r6, sl
 8010a68:	465f      	mov	r7, fp
 8010a6a:	4642      	mov	r2, r8
 8010a6c:	464b      	mov	r3, r9
 8010a6e:	4630      	mov	r0, r6
 8010a70:	4639      	mov	r1, r7
 8010a72:	f7ef fec3 	bl	80007fc <__aeabi_ddiv>
 8010a76:	f7f0 f847 	bl	8000b08 <__aeabi_d2iz>
 8010a7a:	4682      	mov	sl, r0
 8010a7c:	f7ef fd2a 	bl	80004d4 <__aeabi_i2d>
 8010a80:	4642      	mov	r2, r8
 8010a82:	464b      	mov	r3, r9
 8010a84:	f7ef fd90 	bl	80005a8 <__aeabi_dmul>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	4639      	mov	r1, r7
 8010a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010a94:	f7ef fbd0 	bl	8000238 <__aeabi_dsub>
 8010a98:	f805 6b01 	strb.w	r6, [r5], #1
 8010a9c:	9e01      	ldr	r6, [sp, #4]
 8010a9e:	9f03      	ldr	r7, [sp, #12]
 8010aa0:	1bae      	subs	r6, r5, r6
 8010aa2:	42b7      	cmp	r7, r6
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	d135      	bne.n	8010b16 <_dtoa_r+0x6e6>
 8010aaa:	f7ef fbc7 	bl	800023c <__adddf3>
 8010aae:	4642      	mov	r2, r8
 8010ab0:	464b      	mov	r3, r9
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	460f      	mov	r7, r1
 8010ab6:	f7f0 f807 	bl	8000ac8 <__aeabi_dcmpgt>
 8010aba:	b9d0      	cbnz	r0, 8010af2 <_dtoa_r+0x6c2>
 8010abc:	4642      	mov	r2, r8
 8010abe:	464b      	mov	r3, r9
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	f7ef ffd8 	bl	8000a78 <__aeabi_dcmpeq>
 8010ac8:	b110      	cbz	r0, 8010ad0 <_dtoa_r+0x6a0>
 8010aca:	f01a 0f01 	tst.w	sl, #1
 8010ace:	d110      	bne.n	8010af2 <_dtoa_r+0x6c2>
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	ee18 1a10 	vmov	r1, s16
 8010ad6:	f000 ff47 	bl	8011968 <_Bfree>
 8010ada:	2300      	movs	r3, #0
 8010adc:	9800      	ldr	r0, [sp, #0]
 8010ade:	702b      	strb	r3, [r5, #0]
 8010ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	6018      	str	r0, [r3, #0]
 8010ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f43f acf1 	beq.w	80104d0 <_dtoa_r+0xa0>
 8010aee:	601d      	str	r5, [r3, #0]
 8010af0:	e4ee      	b.n	80104d0 <_dtoa_r+0xa0>
 8010af2:	9f00      	ldr	r7, [sp, #0]
 8010af4:	462b      	mov	r3, r5
 8010af6:	461d      	mov	r5, r3
 8010af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010afc:	2a39      	cmp	r2, #57	; 0x39
 8010afe:	d106      	bne.n	8010b0e <_dtoa_r+0x6de>
 8010b00:	9a01      	ldr	r2, [sp, #4]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d1f7      	bne.n	8010af6 <_dtoa_r+0x6c6>
 8010b06:	9901      	ldr	r1, [sp, #4]
 8010b08:	2230      	movs	r2, #48	; 0x30
 8010b0a:	3701      	adds	r7, #1
 8010b0c:	700a      	strb	r2, [r1, #0]
 8010b0e:	781a      	ldrb	r2, [r3, #0]
 8010b10:	3201      	adds	r2, #1
 8010b12:	701a      	strb	r2, [r3, #0]
 8010b14:	e790      	b.n	8010a38 <_dtoa_r+0x608>
 8010b16:	4ba6      	ldr	r3, [pc, #664]	; (8010db0 <_dtoa_r+0x980>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f7ef fd45 	bl	80005a8 <__aeabi_dmul>
 8010b1e:	2200      	movs	r2, #0
 8010b20:	2300      	movs	r3, #0
 8010b22:	4606      	mov	r6, r0
 8010b24:	460f      	mov	r7, r1
 8010b26:	f7ef ffa7 	bl	8000a78 <__aeabi_dcmpeq>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d09d      	beq.n	8010a6a <_dtoa_r+0x63a>
 8010b2e:	e7cf      	b.n	8010ad0 <_dtoa_r+0x6a0>
 8010b30:	9a08      	ldr	r2, [sp, #32]
 8010b32:	2a00      	cmp	r2, #0
 8010b34:	f000 80d7 	beq.w	8010ce6 <_dtoa_r+0x8b6>
 8010b38:	9a06      	ldr	r2, [sp, #24]
 8010b3a:	2a01      	cmp	r2, #1
 8010b3c:	f300 80ba 	bgt.w	8010cb4 <_dtoa_r+0x884>
 8010b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b42:	2a00      	cmp	r2, #0
 8010b44:	f000 80b2 	beq.w	8010cac <_dtoa_r+0x87c>
 8010b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010b4c:	9e07      	ldr	r6, [sp, #28]
 8010b4e:	9d04      	ldr	r5, [sp, #16]
 8010b50:	9a04      	ldr	r2, [sp, #16]
 8010b52:	441a      	add	r2, r3
 8010b54:	9204      	str	r2, [sp, #16]
 8010b56:	9a05      	ldr	r2, [sp, #20]
 8010b58:	2101      	movs	r1, #1
 8010b5a:	441a      	add	r2, r3
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	9205      	str	r2, [sp, #20]
 8010b60:	f001 f804 	bl	8011b6c <__i2b>
 8010b64:	4607      	mov	r7, r0
 8010b66:	2d00      	cmp	r5, #0
 8010b68:	dd0c      	ble.n	8010b84 <_dtoa_r+0x754>
 8010b6a:	9b05      	ldr	r3, [sp, #20]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd09      	ble.n	8010b84 <_dtoa_r+0x754>
 8010b70:	42ab      	cmp	r3, r5
 8010b72:	9a04      	ldr	r2, [sp, #16]
 8010b74:	bfa8      	it	ge
 8010b76:	462b      	movge	r3, r5
 8010b78:	1ad2      	subs	r2, r2, r3
 8010b7a:	9204      	str	r2, [sp, #16]
 8010b7c:	9a05      	ldr	r2, [sp, #20]
 8010b7e:	1aed      	subs	r5, r5, r3
 8010b80:	1ad3      	subs	r3, r2, r3
 8010b82:	9305      	str	r3, [sp, #20]
 8010b84:	9b07      	ldr	r3, [sp, #28]
 8010b86:	b31b      	cbz	r3, 8010bd0 <_dtoa_r+0x7a0>
 8010b88:	9b08      	ldr	r3, [sp, #32]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 80af 	beq.w	8010cee <_dtoa_r+0x8be>
 8010b90:	2e00      	cmp	r6, #0
 8010b92:	dd13      	ble.n	8010bbc <_dtoa_r+0x78c>
 8010b94:	4639      	mov	r1, r7
 8010b96:	4632      	mov	r2, r6
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f001 f8a7 	bl	8011cec <__pow5mult>
 8010b9e:	ee18 2a10 	vmov	r2, s16
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	4607      	mov	r7, r0
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f000 fff6 	bl	8011b98 <__multiply>
 8010bac:	ee18 1a10 	vmov	r1, s16
 8010bb0:	4680      	mov	r8, r0
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	f000 fed8 	bl	8011968 <_Bfree>
 8010bb8:	ee08 8a10 	vmov	s16, r8
 8010bbc:	9b07      	ldr	r3, [sp, #28]
 8010bbe:	1b9a      	subs	r2, r3, r6
 8010bc0:	d006      	beq.n	8010bd0 <_dtoa_r+0x7a0>
 8010bc2:	ee18 1a10 	vmov	r1, s16
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f001 f890 	bl	8011cec <__pow5mult>
 8010bcc:	ee08 0a10 	vmov	s16, r0
 8010bd0:	2101      	movs	r1, #1
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f000 ffca 	bl	8011b6c <__i2b>
 8010bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	4606      	mov	r6, r0
 8010bde:	f340 8088 	ble.w	8010cf2 <_dtoa_r+0x8c2>
 8010be2:	461a      	mov	r2, r3
 8010be4:	4601      	mov	r1, r0
 8010be6:	4620      	mov	r0, r4
 8010be8:	f001 f880 	bl	8011cec <__pow5mult>
 8010bec:	9b06      	ldr	r3, [sp, #24]
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	f340 8081 	ble.w	8010cf8 <_dtoa_r+0x8c8>
 8010bf6:	f04f 0800 	mov.w	r8, #0
 8010bfa:	6933      	ldr	r3, [r6, #16]
 8010bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010c00:	6918      	ldr	r0, [r3, #16]
 8010c02:	f000 ff63 	bl	8011acc <__hi0bits>
 8010c06:	f1c0 0020 	rsb	r0, r0, #32
 8010c0a:	9b05      	ldr	r3, [sp, #20]
 8010c0c:	4418      	add	r0, r3
 8010c0e:	f010 001f 	ands.w	r0, r0, #31
 8010c12:	f000 8092 	beq.w	8010d3a <_dtoa_r+0x90a>
 8010c16:	f1c0 0320 	rsb	r3, r0, #32
 8010c1a:	2b04      	cmp	r3, #4
 8010c1c:	f340 808a 	ble.w	8010d34 <_dtoa_r+0x904>
 8010c20:	f1c0 001c 	rsb	r0, r0, #28
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	4403      	add	r3, r0
 8010c28:	9304      	str	r3, [sp, #16]
 8010c2a:	9b05      	ldr	r3, [sp, #20]
 8010c2c:	4403      	add	r3, r0
 8010c2e:	4405      	add	r5, r0
 8010c30:	9305      	str	r3, [sp, #20]
 8010c32:	9b04      	ldr	r3, [sp, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	dd07      	ble.n	8010c48 <_dtoa_r+0x818>
 8010c38:	ee18 1a10 	vmov	r1, s16
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	4620      	mov	r0, r4
 8010c40:	f001 f8ae 	bl	8011da0 <__lshift>
 8010c44:	ee08 0a10 	vmov	s16, r0
 8010c48:	9b05      	ldr	r3, [sp, #20]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd05      	ble.n	8010c5a <_dtoa_r+0x82a>
 8010c4e:	4631      	mov	r1, r6
 8010c50:	461a      	mov	r2, r3
 8010c52:	4620      	mov	r0, r4
 8010c54:	f001 f8a4 	bl	8011da0 <__lshift>
 8010c58:	4606      	mov	r6, r0
 8010c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d06e      	beq.n	8010d3e <_dtoa_r+0x90e>
 8010c60:	ee18 0a10 	vmov	r0, s16
 8010c64:	4631      	mov	r1, r6
 8010c66:	f001 f90b 	bl	8011e80 <__mcmp>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	da67      	bge.n	8010d3e <_dtoa_r+0x90e>
 8010c6e:	9b00      	ldr	r3, [sp, #0]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	ee18 1a10 	vmov	r1, s16
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	220a      	movs	r2, #10
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f000 fe95 	bl	80119ac <__multadd>
 8010c82:	9b08      	ldr	r3, [sp, #32]
 8010c84:	ee08 0a10 	vmov	s16, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 81b1 	beq.w	8010ff0 <_dtoa_r+0xbc0>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	4639      	mov	r1, r7
 8010c92:	220a      	movs	r2, #10
 8010c94:	4620      	mov	r0, r4
 8010c96:	f000 fe89 	bl	80119ac <__multadd>
 8010c9a:	9b02      	ldr	r3, [sp, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	4607      	mov	r7, r0
 8010ca0:	f300 808e 	bgt.w	8010dc0 <_dtoa_r+0x990>
 8010ca4:	9b06      	ldr	r3, [sp, #24]
 8010ca6:	2b02      	cmp	r3, #2
 8010ca8:	dc51      	bgt.n	8010d4e <_dtoa_r+0x91e>
 8010caa:	e089      	b.n	8010dc0 <_dtoa_r+0x990>
 8010cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010cb2:	e74b      	b.n	8010b4c <_dtoa_r+0x71c>
 8010cb4:	9b03      	ldr	r3, [sp, #12]
 8010cb6:	1e5e      	subs	r6, r3, #1
 8010cb8:	9b07      	ldr	r3, [sp, #28]
 8010cba:	42b3      	cmp	r3, r6
 8010cbc:	bfbf      	itttt	lt
 8010cbe:	9b07      	ldrlt	r3, [sp, #28]
 8010cc0:	9607      	strlt	r6, [sp, #28]
 8010cc2:	1af2      	sublt	r2, r6, r3
 8010cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010cc6:	bfb6      	itet	lt
 8010cc8:	189b      	addlt	r3, r3, r2
 8010cca:	1b9e      	subge	r6, r3, r6
 8010ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010cce:	9b03      	ldr	r3, [sp, #12]
 8010cd0:	bfb8      	it	lt
 8010cd2:	2600      	movlt	r6, #0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	bfb7      	itett	lt
 8010cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010ce0:	1a9d      	sublt	r5, r3, r2
 8010ce2:	2300      	movlt	r3, #0
 8010ce4:	e734      	b.n	8010b50 <_dtoa_r+0x720>
 8010ce6:	9e07      	ldr	r6, [sp, #28]
 8010ce8:	9d04      	ldr	r5, [sp, #16]
 8010cea:	9f08      	ldr	r7, [sp, #32]
 8010cec:	e73b      	b.n	8010b66 <_dtoa_r+0x736>
 8010cee:	9a07      	ldr	r2, [sp, #28]
 8010cf0:	e767      	b.n	8010bc2 <_dtoa_r+0x792>
 8010cf2:	9b06      	ldr	r3, [sp, #24]
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	dc18      	bgt.n	8010d2a <_dtoa_r+0x8fa>
 8010cf8:	f1ba 0f00 	cmp.w	sl, #0
 8010cfc:	d115      	bne.n	8010d2a <_dtoa_r+0x8fa>
 8010cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d02:	b993      	cbnz	r3, 8010d2a <_dtoa_r+0x8fa>
 8010d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d08:	0d1b      	lsrs	r3, r3, #20
 8010d0a:	051b      	lsls	r3, r3, #20
 8010d0c:	b183      	cbz	r3, 8010d30 <_dtoa_r+0x900>
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	3301      	adds	r3, #1
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	9b05      	ldr	r3, [sp, #20]
 8010d16:	3301      	adds	r3, #1
 8010d18:	9305      	str	r3, [sp, #20]
 8010d1a:	f04f 0801 	mov.w	r8, #1
 8010d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f47f af6a 	bne.w	8010bfa <_dtoa_r+0x7ca>
 8010d26:	2001      	movs	r0, #1
 8010d28:	e76f      	b.n	8010c0a <_dtoa_r+0x7da>
 8010d2a:	f04f 0800 	mov.w	r8, #0
 8010d2e:	e7f6      	b.n	8010d1e <_dtoa_r+0x8ee>
 8010d30:	4698      	mov	r8, r3
 8010d32:	e7f4      	b.n	8010d1e <_dtoa_r+0x8ee>
 8010d34:	f43f af7d 	beq.w	8010c32 <_dtoa_r+0x802>
 8010d38:	4618      	mov	r0, r3
 8010d3a:	301c      	adds	r0, #28
 8010d3c:	e772      	b.n	8010c24 <_dtoa_r+0x7f4>
 8010d3e:	9b03      	ldr	r3, [sp, #12]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	dc37      	bgt.n	8010db4 <_dtoa_r+0x984>
 8010d44:	9b06      	ldr	r3, [sp, #24]
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	dd34      	ble.n	8010db4 <_dtoa_r+0x984>
 8010d4a:	9b03      	ldr	r3, [sp, #12]
 8010d4c:	9302      	str	r3, [sp, #8]
 8010d4e:	9b02      	ldr	r3, [sp, #8]
 8010d50:	b96b      	cbnz	r3, 8010d6e <_dtoa_r+0x93e>
 8010d52:	4631      	mov	r1, r6
 8010d54:	2205      	movs	r2, #5
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 fe28 	bl	80119ac <__multadd>
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	4606      	mov	r6, r0
 8010d60:	ee18 0a10 	vmov	r0, s16
 8010d64:	f001 f88c 	bl	8011e80 <__mcmp>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	f73f adbb 	bgt.w	80108e4 <_dtoa_r+0x4b4>
 8010d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d70:	9d01      	ldr	r5, [sp, #4]
 8010d72:	43db      	mvns	r3, r3
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	f04f 0800 	mov.w	r8, #0
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f000 fdf3 	bl	8011968 <_Bfree>
 8010d82:	2f00      	cmp	r7, #0
 8010d84:	f43f aea4 	beq.w	8010ad0 <_dtoa_r+0x6a0>
 8010d88:	f1b8 0f00 	cmp.w	r8, #0
 8010d8c:	d005      	beq.n	8010d9a <_dtoa_r+0x96a>
 8010d8e:	45b8      	cmp	r8, r7
 8010d90:	d003      	beq.n	8010d9a <_dtoa_r+0x96a>
 8010d92:	4641      	mov	r1, r8
 8010d94:	4620      	mov	r0, r4
 8010d96:	f000 fde7 	bl	8011968 <_Bfree>
 8010d9a:	4639      	mov	r1, r7
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 fde3 	bl	8011968 <_Bfree>
 8010da2:	e695      	b.n	8010ad0 <_dtoa_r+0x6a0>
 8010da4:	2600      	movs	r6, #0
 8010da6:	4637      	mov	r7, r6
 8010da8:	e7e1      	b.n	8010d6e <_dtoa_r+0x93e>
 8010daa:	9700      	str	r7, [sp, #0]
 8010dac:	4637      	mov	r7, r6
 8010dae:	e599      	b.n	80108e4 <_dtoa_r+0x4b4>
 8010db0:	40240000 	.word	0x40240000
 8010db4:	9b08      	ldr	r3, [sp, #32]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 80ca 	beq.w	8010f50 <_dtoa_r+0xb20>
 8010dbc:	9b03      	ldr	r3, [sp, #12]
 8010dbe:	9302      	str	r3, [sp, #8]
 8010dc0:	2d00      	cmp	r5, #0
 8010dc2:	dd05      	ble.n	8010dd0 <_dtoa_r+0x9a0>
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f000 ffe9 	bl	8011da0 <__lshift>
 8010dce:	4607      	mov	r7, r0
 8010dd0:	f1b8 0f00 	cmp.w	r8, #0
 8010dd4:	d05b      	beq.n	8010e8e <_dtoa_r+0xa5e>
 8010dd6:	6879      	ldr	r1, [r7, #4]
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f000 fd85 	bl	80118e8 <_Balloc>
 8010dde:	4605      	mov	r5, r0
 8010de0:	b928      	cbnz	r0, 8010dee <_dtoa_r+0x9be>
 8010de2:	4b87      	ldr	r3, [pc, #540]	; (8011000 <_dtoa_r+0xbd0>)
 8010de4:	4602      	mov	r2, r0
 8010de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010dea:	f7ff bb3b 	b.w	8010464 <_dtoa_r+0x34>
 8010dee:	693a      	ldr	r2, [r7, #16]
 8010df0:	3202      	adds	r2, #2
 8010df2:	0092      	lsls	r2, r2, #2
 8010df4:	f107 010c 	add.w	r1, r7, #12
 8010df8:	300c      	adds	r0, #12
 8010dfa:	f7fd fbb2 	bl	800e562 <memcpy>
 8010dfe:	2201      	movs	r2, #1
 8010e00:	4629      	mov	r1, r5
 8010e02:	4620      	mov	r0, r4
 8010e04:	f000 ffcc 	bl	8011da0 <__lshift>
 8010e08:	9b01      	ldr	r3, [sp, #4]
 8010e0a:	f103 0901 	add.w	r9, r3, #1
 8010e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010e12:	4413      	add	r3, r2
 8010e14:	9305      	str	r3, [sp, #20]
 8010e16:	f00a 0301 	and.w	r3, sl, #1
 8010e1a:	46b8      	mov	r8, r7
 8010e1c:	9304      	str	r3, [sp, #16]
 8010e1e:	4607      	mov	r7, r0
 8010e20:	4631      	mov	r1, r6
 8010e22:	ee18 0a10 	vmov	r0, s16
 8010e26:	f7ff fa75 	bl	8010314 <quorem>
 8010e2a:	4641      	mov	r1, r8
 8010e2c:	9002      	str	r0, [sp, #8]
 8010e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010e32:	ee18 0a10 	vmov	r0, s16
 8010e36:	f001 f823 	bl	8011e80 <__mcmp>
 8010e3a:	463a      	mov	r2, r7
 8010e3c:	9003      	str	r0, [sp, #12]
 8010e3e:	4631      	mov	r1, r6
 8010e40:	4620      	mov	r0, r4
 8010e42:	f001 f839 	bl	8011eb8 <__mdiff>
 8010e46:	68c2      	ldr	r2, [r0, #12]
 8010e48:	f109 3bff 	add.w	fp, r9, #4294967295
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	bb02      	cbnz	r2, 8010e92 <_dtoa_r+0xa62>
 8010e50:	4601      	mov	r1, r0
 8010e52:	ee18 0a10 	vmov	r0, s16
 8010e56:	f001 f813 	bl	8011e80 <__mcmp>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	4620      	mov	r0, r4
 8010e60:	9207      	str	r2, [sp, #28]
 8010e62:	f000 fd81 	bl	8011968 <_Bfree>
 8010e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010e6a:	ea43 0102 	orr.w	r1, r3, r2
 8010e6e:	9b04      	ldr	r3, [sp, #16]
 8010e70:	430b      	orrs	r3, r1
 8010e72:	464d      	mov	r5, r9
 8010e74:	d10f      	bne.n	8010e96 <_dtoa_r+0xa66>
 8010e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e7a:	d02a      	beq.n	8010ed2 <_dtoa_r+0xaa2>
 8010e7c:	9b03      	ldr	r3, [sp, #12]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	dd02      	ble.n	8010e88 <_dtoa_r+0xa58>
 8010e82:	9b02      	ldr	r3, [sp, #8]
 8010e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010e88:	f88b a000 	strb.w	sl, [fp]
 8010e8c:	e775      	b.n	8010d7a <_dtoa_r+0x94a>
 8010e8e:	4638      	mov	r0, r7
 8010e90:	e7ba      	b.n	8010e08 <_dtoa_r+0x9d8>
 8010e92:	2201      	movs	r2, #1
 8010e94:	e7e2      	b.n	8010e5c <_dtoa_r+0xa2c>
 8010e96:	9b03      	ldr	r3, [sp, #12]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	db04      	blt.n	8010ea6 <_dtoa_r+0xa76>
 8010e9c:	9906      	ldr	r1, [sp, #24]
 8010e9e:	430b      	orrs	r3, r1
 8010ea0:	9904      	ldr	r1, [sp, #16]
 8010ea2:	430b      	orrs	r3, r1
 8010ea4:	d122      	bne.n	8010eec <_dtoa_r+0xabc>
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	ddee      	ble.n	8010e88 <_dtoa_r+0xa58>
 8010eaa:	ee18 1a10 	vmov	r1, s16
 8010eae:	2201      	movs	r2, #1
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f000 ff75 	bl	8011da0 <__lshift>
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	ee08 0a10 	vmov	s16, r0
 8010ebc:	f000 ffe0 	bl	8011e80 <__mcmp>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	dc03      	bgt.n	8010ecc <_dtoa_r+0xa9c>
 8010ec4:	d1e0      	bne.n	8010e88 <_dtoa_r+0xa58>
 8010ec6:	f01a 0f01 	tst.w	sl, #1
 8010eca:	d0dd      	beq.n	8010e88 <_dtoa_r+0xa58>
 8010ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010ed0:	d1d7      	bne.n	8010e82 <_dtoa_r+0xa52>
 8010ed2:	2339      	movs	r3, #57	; 0x39
 8010ed4:	f88b 3000 	strb.w	r3, [fp]
 8010ed8:	462b      	mov	r3, r5
 8010eda:	461d      	mov	r5, r3
 8010edc:	3b01      	subs	r3, #1
 8010ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010ee2:	2a39      	cmp	r2, #57	; 0x39
 8010ee4:	d071      	beq.n	8010fca <_dtoa_r+0xb9a>
 8010ee6:	3201      	adds	r2, #1
 8010ee8:	701a      	strb	r2, [r3, #0]
 8010eea:	e746      	b.n	8010d7a <_dtoa_r+0x94a>
 8010eec:	2a00      	cmp	r2, #0
 8010eee:	dd07      	ble.n	8010f00 <_dtoa_r+0xad0>
 8010ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010ef4:	d0ed      	beq.n	8010ed2 <_dtoa_r+0xaa2>
 8010ef6:	f10a 0301 	add.w	r3, sl, #1
 8010efa:	f88b 3000 	strb.w	r3, [fp]
 8010efe:	e73c      	b.n	8010d7a <_dtoa_r+0x94a>
 8010f00:	9b05      	ldr	r3, [sp, #20]
 8010f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010f06:	4599      	cmp	r9, r3
 8010f08:	d047      	beq.n	8010f9a <_dtoa_r+0xb6a>
 8010f0a:	ee18 1a10 	vmov	r1, s16
 8010f0e:	2300      	movs	r3, #0
 8010f10:	220a      	movs	r2, #10
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 fd4a 	bl	80119ac <__multadd>
 8010f18:	45b8      	cmp	r8, r7
 8010f1a:	ee08 0a10 	vmov	s16, r0
 8010f1e:	f04f 0300 	mov.w	r3, #0
 8010f22:	f04f 020a 	mov.w	r2, #10
 8010f26:	4641      	mov	r1, r8
 8010f28:	4620      	mov	r0, r4
 8010f2a:	d106      	bne.n	8010f3a <_dtoa_r+0xb0a>
 8010f2c:	f000 fd3e 	bl	80119ac <__multadd>
 8010f30:	4680      	mov	r8, r0
 8010f32:	4607      	mov	r7, r0
 8010f34:	f109 0901 	add.w	r9, r9, #1
 8010f38:	e772      	b.n	8010e20 <_dtoa_r+0x9f0>
 8010f3a:	f000 fd37 	bl	80119ac <__multadd>
 8010f3e:	4639      	mov	r1, r7
 8010f40:	4680      	mov	r8, r0
 8010f42:	2300      	movs	r3, #0
 8010f44:	220a      	movs	r2, #10
 8010f46:	4620      	mov	r0, r4
 8010f48:	f000 fd30 	bl	80119ac <__multadd>
 8010f4c:	4607      	mov	r7, r0
 8010f4e:	e7f1      	b.n	8010f34 <_dtoa_r+0xb04>
 8010f50:	9b03      	ldr	r3, [sp, #12]
 8010f52:	9302      	str	r3, [sp, #8]
 8010f54:	9d01      	ldr	r5, [sp, #4]
 8010f56:	ee18 0a10 	vmov	r0, s16
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	f7ff f9da 	bl	8010314 <quorem>
 8010f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010f64:	9b01      	ldr	r3, [sp, #4]
 8010f66:	f805 ab01 	strb.w	sl, [r5], #1
 8010f6a:	1aea      	subs	r2, r5, r3
 8010f6c:	9b02      	ldr	r3, [sp, #8]
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	dd09      	ble.n	8010f86 <_dtoa_r+0xb56>
 8010f72:	ee18 1a10 	vmov	r1, s16
 8010f76:	2300      	movs	r3, #0
 8010f78:	220a      	movs	r2, #10
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 fd16 	bl	80119ac <__multadd>
 8010f80:	ee08 0a10 	vmov	s16, r0
 8010f84:	e7e7      	b.n	8010f56 <_dtoa_r+0xb26>
 8010f86:	9b02      	ldr	r3, [sp, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bfc8      	it	gt
 8010f8c:	461d      	movgt	r5, r3
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	bfd8      	it	le
 8010f92:	2501      	movle	r5, #1
 8010f94:	441d      	add	r5, r3
 8010f96:	f04f 0800 	mov.w	r8, #0
 8010f9a:	ee18 1a10 	vmov	r1, s16
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 fefd 	bl	8011da0 <__lshift>
 8010fa6:	4631      	mov	r1, r6
 8010fa8:	ee08 0a10 	vmov	s16, r0
 8010fac:	f000 ff68 	bl	8011e80 <__mcmp>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	dc91      	bgt.n	8010ed8 <_dtoa_r+0xaa8>
 8010fb4:	d102      	bne.n	8010fbc <_dtoa_r+0xb8c>
 8010fb6:	f01a 0f01 	tst.w	sl, #1
 8010fba:	d18d      	bne.n	8010ed8 <_dtoa_r+0xaa8>
 8010fbc:	462b      	mov	r3, r5
 8010fbe:	461d      	mov	r5, r3
 8010fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fc4:	2a30      	cmp	r2, #48	; 0x30
 8010fc6:	d0fa      	beq.n	8010fbe <_dtoa_r+0xb8e>
 8010fc8:	e6d7      	b.n	8010d7a <_dtoa_r+0x94a>
 8010fca:	9a01      	ldr	r2, [sp, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d184      	bne.n	8010eda <_dtoa_r+0xaaa>
 8010fd0:	9b00      	ldr	r3, [sp, #0]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	2331      	movs	r3, #49	; 0x31
 8010fd8:	7013      	strb	r3, [r2, #0]
 8010fda:	e6ce      	b.n	8010d7a <_dtoa_r+0x94a>
 8010fdc:	4b09      	ldr	r3, [pc, #36]	; (8011004 <_dtoa_r+0xbd4>)
 8010fde:	f7ff ba95 	b.w	801050c <_dtoa_r+0xdc>
 8010fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f47f aa6e 	bne.w	80104c6 <_dtoa_r+0x96>
 8010fea:	4b07      	ldr	r3, [pc, #28]	; (8011008 <_dtoa_r+0xbd8>)
 8010fec:	f7ff ba8e 	b.w	801050c <_dtoa_r+0xdc>
 8010ff0:	9b02      	ldr	r3, [sp, #8]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	dcae      	bgt.n	8010f54 <_dtoa_r+0xb24>
 8010ff6:	9b06      	ldr	r3, [sp, #24]
 8010ff8:	2b02      	cmp	r3, #2
 8010ffa:	f73f aea8 	bgt.w	8010d4e <_dtoa_r+0x91e>
 8010ffe:	e7a9      	b.n	8010f54 <_dtoa_r+0xb24>
 8011000:	08016188 	.word	0x08016188
 8011004:	08015f8c 	.word	0x08015f8c
 8011008:	08016109 	.word	0x08016109

0801100c <__sflush_r>:
 801100c:	898a      	ldrh	r2, [r1, #12]
 801100e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011012:	4605      	mov	r5, r0
 8011014:	0710      	lsls	r0, r2, #28
 8011016:	460c      	mov	r4, r1
 8011018:	d458      	bmi.n	80110cc <__sflush_r+0xc0>
 801101a:	684b      	ldr	r3, [r1, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dc05      	bgt.n	801102c <__sflush_r+0x20>
 8011020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011022:	2b00      	cmp	r3, #0
 8011024:	dc02      	bgt.n	801102c <__sflush_r+0x20>
 8011026:	2000      	movs	r0, #0
 8011028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801102e:	2e00      	cmp	r6, #0
 8011030:	d0f9      	beq.n	8011026 <__sflush_r+0x1a>
 8011032:	2300      	movs	r3, #0
 8011034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011038:	682f      	ldr	r7, [r5, #0]
 801103a:	602b      	str	r3, [r5, #0]
 801103c:	d032      	beq.n	80110a4 <__sflush_r+0x98>
 801103e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	075a      	lsls	r2, r3, #29
 8011044:	d505      	bpl.n	8011052 <__sflush_r+0x46>
 8011046:	6863      	ldr	r3, [r4, #4]
 8011048:	1ac0      	subs	r0, r0, r3
 801104a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801104c:	b10b      	cbz	r3, 8011052 <__sflush_r+0x46>
 801104e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011050:	1ac0      	subs	r0, r0, r3
 8011052:	2300      	movs	r3, #0
 8011054:	4602      	mov	r2, r0
 8011056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011058:	6a21      	ldr	r1, [r4, #32]
 801105a:	4628      	mov	r0, r5
 801105c:	47b0      	blx	r6
 801105e:	1c43      	adds	r3, r0, #1
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	d106      	bne.n	8011072 <__sflush_r+0x66>
 8011064:	6829      	ldr	r1, [r5, #0]
 8011066:	291d      	cmp	r1, #29
 8011068:	d82c      	bhi.n	80110c4 <__sflush_r+0xb8>
 801106a:	4a2a      	ldr	r2, [pc, #168]	; (8011114 <__sflush_r+0x108>)
 801106c:	40ca      	lsrs	r2, r1
 801106e:	07d6      	lsls	r6, r2, #31
 8011070:	d528      	bpl.n	80110c4 <__sflush_r+0xb8>
 8011072:	2200      	movs	r2, #0
 8011074:	6062      	str	r2, [r4, #4]
 8011076:	04d9      	lsls	r1, r3, #19
 8011078:	6922      	ldr	r2, [r4, #16]
 801107a:	6022      	str	r2, [r4, #0]
 801107c:	d504      	bpl.n	8011088 <__sflush_r+0x7c>
 801107e:	1c42      	adds	r2, r0, #1
 8011080:	d101      	bne.n	8011086 <__sflush_r+0x7a>
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	b903      	cbnz	r3, 8011088 <__sflush_r+0x7c>
 8011086:	6560      	str	r0, [r4, #84]	; 0x54
 8011088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801108a:	602f      	str	r7, [r5, #0]
 801108c:	2900      	cmp	r1, #0
 801108e:	d0ca      	beq.n	8011026 <__sflush_r+0x1a>
 8011090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011094:	4299      	cmp	r1, r3
 8011096:	d002      	beq.n	801109e <__sflush_r+0x92>
 8011098:	4628      	mov	r0, r5
 801109a:	f001 f8fd 	bl	8012298 <_free_r>
 801109e:	2000      	movs	r0, #0
 80110a0:	6360      	str	r0, [r4, #52]	; 0x34
 80110a2:	e7c1      	b.n	8011028 <__sflush_r+0x1c>
 80110a4:	6a21      	ldr	r1, [r4, #32]
 80110a6:	2301      	movs	r3, #1
 80110a8:	4628      	mov	r0, r5
 80110aa:	47b0      	blx	r6
 80110ac:	1c41      	adds	r1, r0, #1
 80110ae:	d1c7      	bne.n	8011040 <__sflush_r+0x34>
 80110b0:	682b      	ldr	r3, [r5, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d0c4      	beq.n	8011040 <__sflush_r+0x34>
 80110b6:	2b1d      	cmp	r3, #29
 80110b8:	d001      	beq.n	80110be <__sflush_r+0xb2>
 80110ba:	2b16      	cmp	r3, #22
 80110bc:	d101      	bne.n	80110c2 <__sflush_r+0xb6>
 80110be:	602f      	str	r7, [r5, #0]
 80110c0:	e7b1      	b.n	8011026 <__sflush_r+0x1a>
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	e7ad      	b.n	8011028 <__sflush_r+0x1c>
 80110cc:	690f      	ldr	r7, [r1, #16]
 80110ce:	2f00      	cmp	r7, #0
 80110d0:	d0a9      	beq.n	8011026 <__sflush_r+0x1a>
 80110d2:	0793      	lsls	r3, r2, #30
 80110d4:	680e      	ldr	r6, [r1, #0]
 80110d6:	bf08      	it	eq
 80110d8:	694b      	ldreq	r3, [r1, #20]
 80110da:	600f      	str	r7, [r1, #0]
 80110dc:	bf18      	it	ne
 80110de:	2300      	movne	r3, #0
 80110e0:	eba6 0807 	sub.w	r8, r6, r7
 80110e4:	608b      	str	r3, [r1, #8]
 80110e6:	f1b8 0f00 	cmp.w	r8, #0
 80110ea:	dd9c      	ble.n	8011026 <__sflush_r+0x1a>
 80110ec:	6a21      	ldr	r1, [r4, #32]
 80110ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110f0:	4643      	mov	r3, r8
 80110f2:	463a      	mov	r2, r7
 80110f4:	4628      	mov	r0, r5
 80110f6:	47b0      	blx	r6
 80110f8:	2800      	cmp	r0, #0
 80110fa:	dc06      	bgt.n	801110a <__sflush_r+0xfe>
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011102:	81a3      	strh	r3, [r4, #12]
 8011104:	f04f 30ff 	mov.w	r0, #4294967295
 8011108:	e78e      	b.n	8011028 <__sflush_r+0x1c>
 801110a:	4407      	add	r7, r0
 801110c:	eba8 0800 	sub.w	r8, r8, r0
 8011110:	e7e9      	b.n	80110e6 <__sflush_r+0xda>
 8011112:	bf00      	nop
 8011114:	20400001 	.word	0x20400001

08011118 <_fflush_r>:
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	690b      	ldr	r3, [r1, #16]
 801111c:	4605      	mov	r5, r0
 801111e:	460c      	mov	r4, r1
 8011120:	b913      	cbnz	r3, 8011128 <_fflush_r+0x10>
 8011122:	2500      	movs	r5, #0
 8011124:	4628      	mov	r0, r5
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	b118      	cbz	r0, 8011132 <_fflush_r+0x1a>
 801112a:	6983      	ldr	r3, [r0, #24]
 801112c:	b90b      	cbnz	r3, 8011132 <_fflush_r+0x1a>
 801112e:	f7fd f953 	bl	800e3d8 <__sinit>
 8011132:	4b14      	ldr	r3, [pc, #80]	; (8011184 <_fflush_r+0x6c>)
 8011134:	429c      	cmp	r4, r3
 8011136:	d11b      	bne.n	8011170 <_fflush_r+0x58>
 8011138:	686c      	ldr	r4, [r5, #4]
 801113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d0ef      	beq.n	8011122 <_fflush_r+0xa>
 8011142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011144:	07d0      	lsls	r0, r2, #31
 8011146:	d404      	bmi.n	8011152 <_fflush_r+0x3a>
 8011148:	0599      	lsls	r1, r3, #22
 801114a:	d402      	bmi.n	8011152 <_fflush_r+0x3a>
 801114c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801114e:	f7fd fa06 	bl	800e55e <__retarget_lock_acquire_recursive>
 8011152:	4628      	mov	r0, r5
 8011154:	4621      	mov	r1, r4
 8011156:	f7ff ff59 	bl	801100c <__sflush_r>
 801115a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801115c:	07da      	lsls	r2, r3, #31
 801115e:	4605      	mov	r5, r0
 8011160:	d4e0      	bmi.n	8011124 <_fflush_r+0xc>
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	059b      	lsls	r3, r3, #22
 8011166:	d4dd      	bmi.n	8011124 <_fflush_r+0xc>
 8011168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116a:	f7fd f9f9 	bl	800e560 <__retarget_lock_release_recursive>
 801116e:	e7d9      	b.n	8011124 <_fflush_r+0xc>
 8011170:	4b05      	ldr	r3, [pc, #20]	; (8011188 <_fflush_r+0x70>)
 8011172:	429c      	cmp	r4, r3
 8011174:	d101      	bne.n	801117a <_fflush_r+0x62>
 8011176:	68ac      	ldr	r4, [r5, #8]
 8011178:	e7df      	b.n	801113a <_fflush_r+0x22>
 801117a:	4b04      	ldr	r3, [pc, #16]	; (801118c <_fflush_r+0x74>)
 801117c:	429c      	cmp	r4, r3
 801117e:	bf08      	it	eq
 8011180:	68ec      	ldreq	r4, [r5, #12]
 8011182:	e7da      	b.n	801113a <_fflush_r+0x22>
 8011184:	08015f38 	.word	0x08015f38
 8011188:	08015f58 	.word	0x08015f58
 801118c:	08015f18 	.word	0x08015f18

08011190 <rshift>:
 8011190:	6903      	ldr	r3, [r0, #16]
 8011192:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801119a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801119e:	f100 0414 	add.w	r4, r0, #20
 80111a2:	dd45      	ble.n	8011230 <rshift+0xa0>
 80111a4:	f011 011f 	ands.w	r1, r1, #31
 80111a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80111ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80111b0:	d10c      	bne.n	80111cc <rshift+0x3c>
 80111b2:	f100 0710 	add.w	r7, r0, #16
 80111b6:	4629      	mov	r1, r5
 80111b8:	42b1      	cmp	r1, r6
 80111ba:	d334      	bcc.n	8011226 <rshift+0x96>
 80111bc:	1a9b      	subs	r3, r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	1eea      	subs	r2, r5, #3
 80111c2:	4296      	cmp	r6, r2
 80111c4:	bf38      	it	cc
 80111c6:	2300      	movcc	r3, #0
 80111c8:	4423      	add	r3, r4
 80111ca:	e015      	b.n	80111f8 <rshift+0x68>
 80111cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80111d0:	f1c1 0820 	rsb	r8, r1, #32
 80111d4:	40cf      	lsrs	r7, r1
 80111d6:	f105 0e04 	add.w	lr, r5, #4
 80111da:	46a1      	mov	r9, r4
 80111dc:	4576      	cmp	r6, lr
 80111de:	46f4      	mov	ip, lr
 80111e0:	d815      	bhi.n	801120e <rshift+0x7e>
 80111e2:	1a9a      	subs	r2, r3, r2
 80111e4:	0092      	lsls	r2, r2, #2
 80111e6:	3a04      	subs	r2, #4
 80111e8:	3501      	adds	r5, #1
 80111ea:	42ae      	cmp	r6, r5
 80111ec:	bf38      	it	cc
 80111ee:	2200      	movcc	r2, #0
 80111f0:	18a3      	adds	r3, r4, r2
 80111f2:	50a7      	str	r7, [r4, r2]
 80111f4:	b107      	cbz	r7, 80111f8 <rshift+0x68>
 80111f6:	3304      	adds	r3, #4
 80111f8:	1b1a      	subs	r2, r3, r4
 80111fa:	42a3      	cmp	r3, r4
 80111fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011200:	bf08      	it	eq
 8011202:	2300      	moveq	r3, #0
 8011204:	6102      	str	r2, [r0, #16]
 8011206:	bf08      	it	eq
 8011208:	6143      	streq	r3, [r0, #20]
 801120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120e:	f8dc c000 	ldr.w	ip, [ip]
 8011212:	fa0c fc08 	lsl.w	ip, ip, r8
 8011216:	ea4c 0707 	orr.w	r7, ip, r7
 801121a:	f849 7b04 	str.w	r7, [r9], #4
 801121e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011222:	40cf      	lsrs	r7, r1
 8011224:	e7da      	b.n	80111dc <rshift+0x4c>
 8011226:	f851 cb04 	ldr.w	ip, [r1], #4
 801122a:	f847 cf04 	str.w	ip, [r7, #4]!
 801122e:	e7c3      	b.n	80111b8 <rshift+0x28>
 8011230:	4623      	mov	r3, r4
 8011232:	e7e1      	b.n	80111f8 <rshift+0x68>

08011234 <__hexdig_fun>:
 8011234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011238:	2b09      	cmp	r3, #9
 801123a:	d802      	bhi.n	8011242 <__hexdig_fun+0xe>
 801123c:	3820      	subs	r0, #32
 801123e:	b2c0      	uxtb	r0, r0
 8011240:	4770      	bx	lr
 8011242:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011246:	2b05      	cmp	r3, #5
 8011248:	d801      	bhi.n	801124e <__hexdig_fun+0x1a>
 801124a:	3847      	subs	r0, #71	; 0x47
 801124c:	e7f7      	b.n	801123e <__hexdig_fun+0xa>
 801124e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011252:	2b05      	cmp	r3, #5
 8011254:	d801      	bhi.n	801125a <__hexdig_fun+0x26>
 8011256:	3827      	subs	r0, #39	; 0x27
 8011258:	e7f1      	b.n	801123e <__hexdig_fun+0xa>
 801125a:	2000      	movs	r0, #0
 801125c:	4770      	bx	lr
	...

08011260 <__gethex>:
 8011260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011264:	ed2d 8b02 	vpush	{d8}
 8011268:	b089      	sub	sp, #36	; 0x24
 801126a:	ee08 0a10 	vmov	s16, r0
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	4bb4      	ldr	r3, [pc, #720]	; (8011544 <__gethex+0x2e4>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	4618      	mov	r0, r3
 8011278:	468b      	mov	fp, r1
 801127a:	4690      	mov	r8, r2
 801127c:	f7ee ff80 	bl	8000180 <strlen>
 8011280:	9b01      	ldr	r3, [sp, #4]
 8011282:	f8db 2000 	ldr.w	r2, [fp]
 8011286:	4403      	add	r3, r0
 8011288:	4682      	mov	sl, r0
 801128a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801128e:	9305      	str	r3, [sp, #20]
 8011290:	1c93      	adds	r3, r2, #2
 8011292:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011296:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801129a:	32fe      	adds	r2, #254	; 0xfe
 801129c:	18d1      	adds	r1, r2, r3
 801129e:	461f      	mov	r7, r3
 80112a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80112a4:	9100      	str	r1, [sp, #0]
 80112a6:	2830      	cmp	r0, #48	; 0x30
 80112a8:	d0f8      	beq.n	801129c <__gethex+0x3c>
 80112aa:	f7ff ffc3 	bl	8011234 <__hexdig_fun>
 80112ae:	4604      	mov	r4, r0
 80112b0:	2800      	cmp	r0, #0
 80112b2:	d13a      	bne.n	801132a <__gethex+0xca>
 80112b4:	9901      	ldr	r1, [sp, #4]
 80112b6:	4652      	mov	r2, sl
 80112b8:	4638      	mov	r0, r7
 80112ba:	f001 f9b1 	bl	8012620 <strncmp>
 80112be:	4605      	mov	r5, r0
 80112c0:	2800      	cmp	r0, #0
 80112c2:	d168      	bne.n	8011396 <__gethex+0x136>
 80112c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80112c8:	eb07 060a 	add.w	r6, r7, sl
 80112cc:	f7ff ffb2 	bl	8011234 <__hexdig_fun>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	d062      	beq.n	801139a <__gethex+0x13a>
 80112d4:	4633      	mov	r3, r6
 80112d6:	7818      	ldrb	r0, [r3, #0]
 80112d8:	2830      	cmp	r0, #48	; 0x30
 80112da:	461f      	mov	r7, r3
 80112dc:	f103 0301 	add.w	r3, r3, #1
 80112e0:	d0f9      	beq.n	80112d6 <__gethex+0x76>
 80112e2:	f7ff ffa7 	bl	8011234 <__hexdig_fun>
 80112e6:	2301      	movs	r3, #1
 80112e8:	fab0 f480 	clz	r4, r0
 80112ec:	0964      	lsrs	r4, r4, #5
 80112ee:	4635      	mov	r5, r6
 80112f0:	9300      	str	r3, [sp, #0]
 80112f2:	463a      	mov	r2, r7
 80112f4:	4616      	mov	r6, r2
 80112f6:	3201      	adds	r2, #1
 80112f8:	7830      	ldrb	r0, [r6, #0]
 80112fa:	f7ff ff9b 	bl	8011234 <__hexdig_fun>
 80112fe:	2800      	cmp	r0, #0
 8011300:	d1f8      	bne.n	80112f4 <__gethex+0x94>
 8011302:	9901      	ldr	r1, [sp, #4]
 8011304:	4652      	mov	r2, sl
 8011306:	4630      	mov	r0, r6
 8011308:	f001 f98a 	bl	8012620 <strncmp>
 801130c:	b980      	cbnz	r0, 8011330 <__gethex+0xd0>
 801130e:	b94d      	cbnz	r5, 8011324 <__gethex+0xc4>
 8011310:	eb06 050a 	add.w	r5, r6, sl
 8011314:	462a      	mov	r2, r5
 8011316:	4616      	mov	r6, r2
 8011318:	3201      	adds	r2, #1
 801131a:	7830      	ldrb	r0, [r6, #0]
 801131c:	f7ff ff8a 	bl	8011234 <__hexdig_fun>
 8011320:	2800      	cmp	r0, #0
 8011322:	d1f8      	bne.n	8011316 <__gethex+0xb6>
 8011324:	1bad      	subs	r5, r5, r6
 8011326:	00ad      	lsls	r5, r5, #2
 8011328:	e004      	b.n	8011334 <__gethex+0xd4>
 801132a:	2400      	movs	r4, #0
 801132c:	4625      	mov	r5, r4
 801132e:	e7e0      	b.n	80112f2 <__gethex+0x92>
 8011330:	2d00      	cmp	r5, #0
 8011332:	d1f7      	bne.n	8011324 <__gethex+0xc4>
 8011334:	7833      	ldrb	r3, [r6, #0]
 8011336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801133a:	2b50      	cmp	r3, #80	; 0x50
 801133c:	d13b      	bne.n	80113b6 <__gethex+0x156>
 801133e:	7873      	ldrb	r3, [r6, #1]
 8011340:	2b2b      	cmp	r3, #43	; 0x2b
 8011342:	d02c      	beq.n	801139e <__gethex+0x13e>
 8011344:	2b2d      	cmp	r3, #45	; 0x2d
 8011346:	d02e      	beq.n	80113a6 <__gethex+0x146>
 8011348:	1c71      	adds	r1, r6, #1
 801134a:	f04f 0900 	mov.w	r9, #0
 801134e:	7808      	ldrb	r0, [r1, #0]
 8011350:	f7ff ff70 	bl	8011234 <__hexdig_fun>
 8011354:	1e43      	subs	r3, r0, #1
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b18      	cmp	r3, #24
 801135a:	d82c      	bhi.n	80113b6 <__gethex+0x156>
 801135c:	f1a0 0210 	sub.w	r2, r0, #16
 8011360:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011364:	f7ff ff66 	bl	8011234 <__hexdig_fun>
 8011368:	1e43      	subs	r3, r0, #1
 801136a:	b2db      	uxtb	r3, r3
 801136c:	2b18      	cmp	r3, #24
 801136e:	d91d      	bls.n	80113ac <__gethex+0x14c>
 8011370:	f1b9 0f00 	cmp.w	r9, #0
 8011374:	d000      	beq.n	8011378 <__gethex+0x118>
 8011376:	4252      	negs	r2, r2
 8011378:	4415      	add	r5, r2
 801137a:	f8cb 1000 	str.w	r1, [fp]
 801137e:	b1e4      	cbz	r4, 80113ba <__gethex+0x15a>
 8011380:	9b00      	ldr	r3, [sp, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	bf14      	ite	ne
 8011386:	2700      	movne	r7, #0
 8011388:	2706      	moveq	r7, #6
 801138a:	4638      	mov	r0, r7
 801138c:	b009      	add	sp, #36	; 0x24
 801138e:	ecbd 8b02 	vpop	{d8}
 8011392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011396:	463e      	mov	r6, r7
 8011398:	4625      	mov	r5, r4
 801139a:	2401      	movs	r4, #1
 801139c:	e7ca      	b.n	8011334 <__gethex+0xd4>
 801139e:	f04f 0900 	mov.w	r9, #0
 80113a2:	1cb1      	adds	r1, r6, #2
 80113a4:	e7d3      	b.n	801134e <__gethex+0xee>
 80113a6:	f04f 0901 	mov.w	r9, #1
 80113aa:	e7fa      	b.n	80113a2 <__gethex+0x142>
 80113ac:	230a      	movs	r3, #10
 80113ae:	fb03 0202 	mla	r2, r3, r2, r0
 80113b2:	3a10      	subs	r2, #16
 80113b4:	e7d4      	b.n	8011360 <__gethex+0x100>
 80113b6:	4631      	mov	r1, r6
 80113b8:	e7df      	b.n	801137a <__gethex+0x11a>
 80113ba:	1bf3      	subs	r3, r6, r7
 80113bc:	3b01      	subs	r3, #1
 80113be:	4621      	mov	r1, r4
 80113c0:	2b07      	cmp	r3, #7
 80113c2:	dc0b      	bgt.n	80113dc <__gethex+0x17c>
 80113c4:	ee18 0a10 	vmov	r0, s16
 80113c8:	f000 fa8e 	bl	80118e8 <_Balloc>
 80113cc:	4604      	mov	r4, r0
 80113ce:	b940      	cbnz	r0, 80113e2 <__gethex+0x182>
 80113d0:	4b5d      	ldr	r3, [pc, #372]	; (8011548 <__gethex+0x2e8>)
 80113d2:	4602      	mov	r2, r0
 80113d4:	21de      	movs	r1, #222	; 0xde
 80113d6:	485d      	ldr	r0, [pc, #372]	; (801154c <__gethex+0x2ec>)
 80113d8:	f001 f944 	bl	8012664 <__assert_func>
 80113dc:	3101      	adds	r1, #1
 80113de:	105b      	asrs	r3, r3, #1
 80113e0:	e7ee      	b.n	80113c0 <__gethex+0x160>
 80113e2:	f100 0914 	add.w	r9, r0, #20
 80113e6:	f04f 0b00 	mov.w	fp, #0
 80113ea:	f1ca 0301 	rsb	r3, sl, #1
 80113ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80113f2:	f8cd b000 	str.w	fp, [sp]
 80113f6:	9306      	str	r3, [sp, #24]
 80113f8:	42b7      	cmp	r7, r6
 80113fa:	d340      	bcc.n	801147e <__gethex+0x21e>
 80113fc:	9802      	ldr	r0, [sp, #8]
 80113fe:	9b00      	ldr	r3, [sp, #0]
 8011400:	f840 3b04 	str.w	r3, [r0], #4
 8011404:	eba0 0009 	sub.w	r0, r0, r9
 8011408:	1080      	asrs	r0, r0, #2
 801140a:	0146      	lsls	r6, r0, #5
 801140c:	6120      	str	r0, [r4, #16]
 801140e:	4618      	mov	r0, r3
 8011410:	f000 fb5c 	bl	8011acc <__hi0bits>
 8011414:	1a30      	subs	r0, r6, r0
 8011416:	f8d8 6000 	ldr.w	r6, [r8]
 801141a:	42b0      	cmp	r0, r6
 801141c:	dd63      	ble.n	80114e6 <__gethex+0x286>
 801141e:	1b87      	subs	r7, r0, r6
 8011420:	4639      	mov	r1, r7
 8011422:	4620      	mov	r0, r4
 8011424:	f000 ff00 	bl	8012228 <__any_on>
 8011428:	4682      	mov	sl, r0
 801142a:	b1a8      	cbz	r0, 8011458 <__gethex+0x1f8>
 801142c:	1e7b      	subs	r3, r7, #1
 801142e:	1159      	asrs	r1, r3, #5
 8011430:	f003 021f 	and.w	r2, r3, #31
 8011434:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011438:	f04f 0a01 	mov.w	sl, #1
 801143c:	fa0a f202 	lsl.w	r2, sl, r2
 8011440:	420a      	tst	r2, r1
 8011442:	d009      	beq.n	8011458 <__gethex+0x1f8>
 8011444:	4553      	cmp	r3, sl
 8011446:	dd05      	ble.n	8011454 <__gethex+0x1f4>
 8011448:	1eb9      	subs	r1, r7, #2
 801144a:	4620      	mov	r0, r4
 801144c:	f000 feec 	bl	8012228 <__any_on>
 8011450:	2800      	cmp	r0, #0
 8011452:	d145      	bne.n	80114e0 <__gethex+0x280>
 8011454:	f04f 0a02 	mov.w	sl, #2
 8011458:	4639      	mov	r1, r7
 801145a:	4620      	mov	r0, r4
 801145c:	f7ff fe98 	bl	8011190 <rshift>
 8011460:	443d      	add	r5, r7
 8011462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011466:	42ab      	cmp	r3, r5
 8011468:	da4c      	bge.n	8011504 <__gethex+0x2a4>
 801146a:	ee18 0a10 	vmov	r0, s16
 801146e:	4621      	mov	r1, r4
 8011470:	f000 fa7a 	bl	8011968 <_Bfree>
 8011474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011476:	2300      	movs	r3, #0
 8011478:	6013      	str	r3, [r2, #0]
 801147a:	27a3      	movs	r7, #163	; 0xa3
 801147c:	e785      	b.n	801138a <__gethex+0x12a>
 801147e:	1e73      	subs	r3, r6, #1
 8011480:	9a05      	ldr	r2, [sp, #20]
 8011482:	9303      	str	r3, [sp, #12]
 8011484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011488:	4293      	cmp	r3, r2
 801148a:	d019      	beq.n	80114c0 <__gethex+0x260>
 801148c:	f1bb 0f20 	cmp.w	fp, #32
 8011490:	d107      	bne.n	80114a2 <__gethex+0x242>
 8011492:	9b02      	ldr	r3, [sp, #8]
 8011494:	9a00      	ldr	r2, [sp, #0]
 8011496:	f843 2b04 	str.w	r2, [r3], #4
 801149a:	9302      	str	r3, [sp, #8]
 801149c:	2300      	movs	r3, #0
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	469b      	mov	fp, r3
 80114a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80114a6:	f7ff fec5 	bl	8011234 <__hexdig_fun>
 80114aa:	9b00      	ldr	r3, [sp, #0]
 80114ac:	f000 000f 	and.w	r0, r0, #15
 80114b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80114b4:	4303      	orrs	r3, r0
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	f10b 0b04 	add.w	fp, fp, #4
 80114bc:	9b03      	ldr	r3, [sp, #12]
 80114be:	e00d      	b.n	80114dc <__gethex+0x27c>
 80114c0:	9b03      	ldr	r3, [sp, #12]
 80114c2:	9a06      	ldr	r2, [sp, #24]
 80114c4:	4413      	add	r3, r2
 80114c6:	42bb      	cmp	r3, r7
 80114c8:	d3e0      	bcc.n	801148c <__gethex+0x22c>
 80114ca:	4618      	mov	r0, r3
 80114cc:	9901      	ldr	r1, [sp, #4]
 80114ce:	9307      	str	r3, [sp, #28]
 80114d0:	4652      	mov	r2, sl
 80114d2:	f001 f8a5 	bl	8012620 <strncmp>
 80114d6:	9b07      	ldr	r3, [sp, #28]
 80114d8:	2800      	cmp	r0, #0
 80114da:	d1d7      	bne.n	801148c <__gethex+0x22c>
 80114dc:	461e      	mov	r6, r3
 80114de:	e78b      	b.n	80113f8 <__gethex+0x198>
 80114e0:	f04f 0a03 	mov.w	sl, #3
 80114e4:	e7b8      	b.n	8011458 <__gethex+0x1f8>
 80114e6:	da0a      	bge.n	80114fe <__gethex+0x29e>
 80114e8:	1a37      	subs	r7, r6, r0
 80114ea:	4621      	mov	r1, r4
 80114ec:	ee18 0a10 	vmov	r0, s16
 80114f0:	463a      	mov	r2, r7
 80114f2:	f000 fc55 	bl	8011da0 <__lshift>
 80114f6:	1bed      	subs	r5, r5, r7
 80114f8:	4604      	mov	r4, r0
 80114fa:	f100 0914 	add.w	r9, r0, #20
 80114fe:	f04f 0a00 	mov.w	sl, #0
 8011502:	e7ae      	b.n	8011462 <__gethex+0x202>
 8011504:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011508:	42a8      	cmp	r0, r5
 801150a:	dd72      	ble.n	80115f2 <__gethex+0x392>
 801150c:	1b45      	subs	r5, r0, r5
 801150e:	42ae      	cmp	r6, r5
 8011510:	dc36      	bgt.n	8011580 <__gethex+0x320>
 8011512:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011516:	2b02      	cmp	r3, #2
 8011518:	d02a      	beq.n	8011570 <__gethex+0x310>
 801151a:	2b03      	cmp	r3, #3
 801151c:	d02c      	beq.n	8011578 <__gethex+0x318>
 801151e:	2b01      	cmp	r3, #1
 8011520:	d11c      	bne.n	801155c <__gethex+0x2fc>
 8011522:	42ae      	cmp	r6, r5
 8011524:	d11a      	bne.n	801155c <__gethex+0x2fc>
 8011526:	2e01      	cmp	r6, #1
 8011528:	d112      	bne.n	8011550 <__gethex+0x2f0>
 801152a:	9a04      	ldr	r2, [sp, #16]
 801152c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011530:	6013      	str	r3, [r2, #0]
 8011532:	2301      	movs	r3, #1
 8011534:	6123      	str	r3, [r4, #16]
 8011536:	f8c9 3000 	str.w	r3, [r9]
 801153a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801153c:	2762      	movs	r7, #98	; 0x62
 801153e:	601c      	str	r4, [r3, #0]
 8011540:	e723      	b.n	801138a <__gethex+0x12a>
 8011542:	bf00      	nop
 8011544:	08016200 	.word	0x08016200
 8011548:	08016188 	.word	0x08016188
 801154c:	08016199 	.word	0x08016199
 8011550:	1e71      	subs	r1, r6, #1
 8011552:	4620      	mov	r0, r4
 8011554:	f000 fe68 	bl	8012228 <__any_on>
 8011558:	2800      	cmp	r0, #0
 801155a:	d1e6      	bne.n	801152a <__gethex+0x2ca>
 801155c:	ee18 0a10 	vmov	r0, s16
 8011560:	4621      	mov	r1, r4
 8011562:	f000 fa01 	bl	8011968 <_Bfree>
 8011566:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011568:	2300      	movs	r3, #0
 801156a:	6013      	str	r3, [r2, #0]
 801156c:	2750      	movs	r7, #80	; 0x50
 801156e:	e70c      	b.n	801138a <__gethex+0x12a>
 8011570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011572:	2b00      	cmp	r3, #0
 8011574:	d1f2      	bne.n	801155c <__gethex+0x2fc>
 8011576:	e7d8      	b.n	801152a <__gethex+0x2ca>
 8011578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1d5      	bne.n	801152a <__gethex+0x2ca>
 801157e:	e7ed      	b.n	801155c <__gethex+0x2fc>
 8011580:	1e6f      	subs	r7, r5, #1
 8011582:	f1ba 0f00 	cmp.w	sl, #0
 8011586:	d131      	bne.n	80115ec <__gethex+0x38c>
 8011588:	b127      	cbz	r7, 8011594 <__gethex+0x334>
 801158a:	4639      	mov	r1, r7
 801158c:	4620      	mov	r0, r4
 801158e:	f000 fe4b 	bl	8012228 <__any_on>
 8011592:	4682      	mov	sl, r0
 8011594:	117b      	asrs	r3, r7, #5
 8011596:	2101      	movs	r1, #1
 8011598:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801159c:	f007 071f 	and.w	r7, r7, #31
 80115a0:	fa01 f707 	lsl.w	r7, r1, r7
 80115a4:	421f      	tst	r7, r3
 80115a6:	4629      	mov	r1, r5
 80115a8:	4620      	mov	r0, r4
 80115aa:	bf18      	it	ne
 80115ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80115b0:	1b76      	subs	r6, r6, r5
 80115b2:	f7ff fded 	bl	8011190 <rshift>
 80115b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80115ba:	2702      	movs	r7, #2
 80115bc:	f1ba 0f00 	cmp.w	sl, #0
 80115c0:	d048      	beq.n	8011654 <__gethex+0x3f4>
 80115c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d015      	beq.n	80115f6 <__gethex+0x396>
 80115ca:	2b03      	cmp	r3, #3
 80115cc:	d017      	beq.n	80115fe <__gethex+0x39e>
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d109      	bne.n	80115e6 <__gethex+0x386>
 80115d2:	f01a 0f02 	tst.w	sl, #2
 80115d6:	d006      	beq.n	80115e6 <__gethex+0x386>
 80115d8:	f8d9 0000 	ldr.w	r0, [r9]
 80115dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80115e0:	f01a 0f01 	tst.w	sl, #1
 80115e4:	d10e      	bne.n	8011604 <__gethex+0x3a4>
 80115e6:	f047 0710 	orr.w	r7, r7, #16
 80115ea:	e033      	b.n	8011654 <__gethex+0x3f4>
 80115ec:	f04f 0a01 	mov.w	sl, #1
 80115f0:	e7d0      	b.n	8011594 <__gethex+0x334>
 80115f2:	2701      	movs	r7, #1
 80115f4:	e7e2      	b.n	80115bc <__gethex+0x35c>
 80115f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115f8:	f1c3 0301 	rsb	r3, r3, #1
 80115fc:	9315      	str	r3, [sp, #84]	; 0x54
 80115fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011600:	2b00      	cmp	r3, #0
 8011602:	d0f0      	beq.n	80115e6 <__gethex+0x386>
 8011604:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011608:	f104 0314 	add.w	r3, r4, #20
 801160c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011610:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011614:	f04f 0c00 	mov.w	ip, #0
 8011618:	4618      	mov	r0, r3
 801161a:	f853 2b04 	ldr.w	r2, [r3], #4
 801161e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011622:	d01c      	beq.n	801165e <__gethex+0x3fe>
 8011624:	3201      	adds	r2, #1
 8011626:	6002      	str	r2, [r0, #0]
 8011628:	2f02      	cmp	r7, #2
 801162a:	f104 0314 	add.w	r3, r4, #20
 801162e:	d13f      	bne.n	80116b0 <__gethex+0x450>
 8011630:	f8d8 2000 	ldr.w	r2, [r8]
 8011634:	3a01      	subs	r2, #1
 8011636:	42b2      	cmp	r2, r6
 8011638:	d10a      	bne.n	8011650 <__gethex+0x3f0>
 801163a:	1171      	asrs	r1, r6, #5
 801163c:	2201      	movs	r2, #1
 801163e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011642:	f006 061f 	and.w	r6, r6, #31
 8011646:	fa02 f606 	lsl.w	r6, r2, r6
 801164a:	421e      	tst	r6, r3
 801164c:	bf18      	it	ne
 801164e:	4617      	movne	r7, r2
 8011650:	f047 0720 	orr.w	r7, r7, #32
 8011654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011656:	601c      	str	r4, [r3, #0]
 8011658:	9b04      	ldr	r3, [sp, #16]
 801165a:	601d      	str	r5, [r3, #0]
 801165c:	e695      	b.n	801138a <__gethex+0x12a>
 801165e:	4299      	cmp	r1, r3
 8011660:	f843 cc04 	str.w	ip, [r3, #-4]
 8011664:	d8d8      	bhi.n	8011618 <__gethex+0x3b8>
 8011666:	68a3      	ldr	r3, [r4, #8]
 8011668:	459b      	cmp	fp, r3
 801166a:	db19      	blt.n	80116a0 <__gethex+0x440>
 801166c:	6861      	ldr	r1, [r4, #4]
 801166e:	ee18 0a10 	vmov	r0, s16
 8011672:	3101      	adds	r1, #1
 8011674:	f000 f938 	bl	80118e8 <_Balloc>
 8011678:	4681      	mov	r9, r0
 801167a:	b918      	cbnz	r0, 8011684 <__gethex+0x424>
 801167c:	4b1a      	ldr	r3, [pc, #104]	; (80116e8 <__gethex+0x488>)
 801167e:	4602      	mov	r2, r0
 8011680:	2184      	movs	r1, #132	; 0x84
 8011682:	e6a8      	b.n	80113d6 <__gethex+0x176>
 8011684:	6922      	ldr	r2, [r4, #16]
 8011686:	3202      	adds	r2, #2
 8011688:	f104 010c 	add.w	r1, r4, #12
 801168c:	0092      	lsls	r2, r2, #2
 801168e:	300c      	adds	r0, #12
 8011690:	f7fc ff67 	bl	800e562 <memcpy>
 8011694:	4621      	mov	r1, r4
 8011696:	ee18 0a10 	vmov	r0, s16
 801169a:	f000 f965 	bl	8011968 <_Bfree>
 801169e:	464c      	mov	r4, r9
 80116a0:	6923      	ldr	r3, [r4, #16]
 80116a2:	1c5a      	adds	r2, r3, #1
 80116a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116a8:	6122      	str	r2, [r4, #16]
 80116aa:	2201      	movs	r2, #1
 80116ac:	615a      	str	r2, [r3, #20]
 80116ae:	e7bb      	b.n	8011628 <__gethex+0x3c8>
 80116b0:	6922      	ldr	r2, [r4, #16]
 80116b2:	455a      	cmp	r2, fp
 80116b4:	dd0b      	ble.n	80116ce <__gethex+0x46e>
 80116b6:	2101      	movs	r1, #1
 80116b8:	4620      	mov	r0, r4
 80116ba:	f7ff fd69 	bl	8011190 <rshift>
 80116be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116c2:	3501      	adds	r5, #1
 80116c4:	42ab      	cmp	r3, r5
 80116c6:	f6ff aed0 	blt.w	801146a <__gethex+0x20a>
 80116ca:	2701      	movs	r7, #1
 80116cc:	e7c0      	b.n	8011650 <__gethex+0x3f0>
 80116ce:	f016 061f 	ands.w	r6, r6, #31
 80116d2:	d0fa      	beq.n	80116ca <__gethex+0x46a>
 80116d4:	4453      	add	r3, sl
 80116d6:	f1c6 0620 	rsb	r6, r6, #32
 80116da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80116de:	f000 f9f5 	bl	8011acc <__hi0bits>
 80116e2:	42b0      	cmp	r0, r6
 80116e4:	dbe7      	blt.n	80116b6 <__gethex+0x456>
 80116e6:	e7f0      	b.n	80116ca <__gethex+0x46a>
 80116e8:	08016188 	.word	0x08016188

080116ec <L_shift>:
 80116ec:	f1c2 0208 	rsb	r2, r2, #8
 80116f0:	0092      	lsls	r2, r2, #2
 80116f2:	b570      	push	{r4, r5, r6, lr}
 80116f4:	f1c2 0620 	rsb	r6, r2, #32
 80116f8:	6843      	ldr	r3, [r0, #4]
 80116fa:	6804      	ldr	r4, [r0, #0]
 80116fc:	fa03 f506 	lsl.w	r5, r3, r6
 8011700:	432c      	orrs	r4, r5
 8011702:	40d3      	lsrs	r3, r2
 8011704:	6004      	str	r4, [r0, #0]
 8011706:	f840 3f04 	str.w	r3, [r0, #4]!
 801170a:	4288      	cmp	r0, r1
 801170c:	d3f4      	bcc.n	80116f8 <L_shift+0xc>
 801170e:	bd70      	pop	{r4, r5, r6, pc}

08011710 <__match>:
 8011710:	b530      	push	{r4, r5, lr}
 8011712:	6803      	ldr	r3, [r0, #0]
 8011714:	3301      	adds	r3, #1
 8011716:	f811 4b01 	ldrb.w	r4, [r1], #1
 801171a:	b914      	cbnz	r4, 8011722 <__match+0x12>
 801171c:	6003      	str	r3, [r0, #0]
 801171e:	2001      	movs	r0, #1
 8011720:	bd30      	pop	{r4, r5, pc}
 8011722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011726:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801172a:	2d19      	cmp	r5, #25
 801172c:	bf98      	it	ls
 801172e:	3220      	addls	r2, #32
 8011730:	42a2      	cmp	r2, r4
 8011732:	d0f0      	beq.n	8011716 <__match+0x6>
 8011734:	2000      	movs	r0, #0
 8011736:	e7f3      	b.n	8011720 <__match+0x10>

08011738 <__hexnan>:
 8011738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173c:	680b      	ldr	r3, [r1, #0]
 801173e:	115e      	asrs	r6, r3, #5
 8011740:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011744:	f013 031f 	ands.w	r3, r3, #31
 8011748:	b087      	sub	sp, #28
 801174a:	bf18      	it	ne
 801174c:	3604      	addne	r6, #4
 801174e:	2500      	movs	r5, #0
 8011750:	1f37      	subs	r7, r6, #4
 8011752:	4690      	mov	r8, r2
 8011754:	6802      	ldr	r2, [r0, #0]
 8011756:	9301      	str	r3, [sp, #4]
 8011758:	4682      	mov	sl, r0
 801175a:	f846 5c04 	str.w	r5, [r6, #-4]
 801175e:	46b9      	mov	r9, r7
 8011760:	463c      	mov	r4, r7
 8011762:	9502      	str	r5, [sp, #8]
 8011764:	46ab      	mov	fp, r5
 8011766:	7851      	ldrb	r1, [r2, #1]
 8011768:	1c53      	adds	r3, r2, #1
 801176a:	9303      	str	r3, [sp, #12]
 801176c:	b341      	cbz	r1, 80117c0 <__hexnan+0x88>
 801176e:	4608      	mov	r0, r1
 8011770:	9205      	str	r2, [sp, #20]
 8011772:	9104      	str	r1, [sp, #16]
 8011774:	f7ff fd5e 	bl	8011234 <__hexdig_fun>
 8011778:	2800      	cmp	r0, #0
 801177a:	d14f      	bne.n	801181c <__hexnan+0xe4>
 801177c:	9904      	ldr	r1, [sp, #16]
 801177e:	9a05      	ldr	r2, [sp, #20]
 8011780:	2920      	cmp	r1, #32
 8011782:	d818      	bhi.n	80117b6 <__hexnan+0x7e>
 8011784:	9b02      	ldr	r3, [sp, #8]
 8011786:	459b      	cmp	fp, r3
 8011788:	dd13      	ble.n	80117b2 <__hexnan+0x7a>
 801178a:	454c      	cmp	r4, r9
 801178c:	d206      	bcs.n	801179c <__hexnan+0x64>
 801178e:	2d07      	cmp	r5, #7
 8011790:	dc04      	bgt.n	801179c <__hexnan+0x64>
 8011792:	462a      	mov	r2, r5
 8011794:	4649      	mov	r1, r9
 8011796:	4620      	mov	r0, r4
 8011798:	f7ff ffa8 	bl	80116ec <L_shift>
 801179c:	4544      	cmp	r4, r8
 801179e:	d950      	bls.n	8011842 <__hexnan+0x10a>
 80117a0:	2300      	movs	r3, #0
 80117a2:	f1a4 0904 	sub.w	r9, r4, #4
 80117a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80117aa:	f8cd b008 	str.w	fp, [sp, #8]
 80117ae:	464c      	mov	r4, r9
 80117b0:	461d      	mov	r5, r3
 80117b2:	9a03      	ldr	r2, [sp, #12]
 80117b4:	e7d7      	b.n	8011766 <__hexnan+0x2e>
 80117b6:	2929      	cmp	r1, #41	; 0x29
 80117b8:	d156      	bne.n	8011868 <__hexnan+0x130>
 80117ba:	3202      	adds	r2, #2
 80117bc:	f8ca 2000 	str.w	r2, [sl]
 80117c0:	f1bb 0f00 	cmp.w	fp, #0
 80117c4:	d050      	beq.n	8011868 <__hexnan+0x130>
 80117c6:	454c      	cmp	r4, r9
 80117c8:	d206      	bcs.n	80117d8 <__hexnan+0xa0>
 80117ca:	2d07      	cmp	r5, #7
 80117cc:	dc04      	bgt.n	80117d8 <__hexnan+0xa0>
 80117ce:	462a      	mov	r2, r5
 80117d0:	4649      	mov	r1, r9
 80117d2:	4620      	mov	r0, r4
 80117d4:	f7ff ff8a 	bl	80116ec <L_shift>
 80117d8:	4544      	cmp	r4, r8
 80117da:	d934      	bls.n	8011846 <__hexnan+0x10e>
 80117dc:	f1a8 0204 	sub.w	r2, r8, #4
 80117e0:	4623      	mov	r3, r4
 80117e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80117e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80117ea:	429f      	cmp	r7, r3
 80117ec:	d2f9      	bcs.n	80117e2 <__hexnan+0xaa>
 80117ee:	1b3b      	subs	r3, r7, r4
 80117f0:	f023 0303 	bic.w	r3, r3, #3
 80117f4:	3304      	adds	r3, #4
 80117f6:	3401      	adds	r4, #1
 80117f8:	3e03      	subs	r6, #3
 80117fa:	42b4      	cmp	r4, r6
 80117fc:	bf88      	it	hi
 80117fe:	2304      	movhi	r3, #4
 8011800:	4443      	add	r3, r8
 8011802:	2200      	movs	r2, #0
 8011804:	f843 2b04 	str.w	r2, [r3], #4
 8011808:	429f      	cmp	r7, r3
 801180a:	d2fb      	bcs.n	8011804 <__hexnan+0xcc>
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	b91b      	cbnz	r3, 8011818 <__hexnan+0xe0>
 8011810:	4547      	cmp	r7, r8
 8011812:	d127      	bne.n	8011864 <__hexnan+0x12c>
 8011814:	2301      	movs	r3, #1
 8011816:	603b      	str	r3, [r7, #0]
 8011818:	2005      	movs	r0, #5
 801181a:	e026      	b.n	801186a <__hexnan+0x132>
 801181c:	3501      	adds	r5, #1
 801181e:	2d08      	cmp	r5, #8
 8011820:	f10b 0b01 	add.w	fp, fp, #1
 8011824:	dd06      	ble.n	8011834 <__hexnan+0xfc>
 8011826:	4544      	cmp	r4, r8
 8011828:	d9c3      	bls.n	80117b2 <__hexnan+0x7a>
 801182a:	2300      	movs	r3, #0
 801182c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011830:	2501      	movs	r5, #1
 8011832:	3c04      	subs	r4, #4
 8011834:	6822      	ldr	r2, [r4, #0]
 8011836:	f000 000f 	and.w	r0, r0, #15
 801183a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801183e:	6022      	str	r2, [r4, #0]
 8011840:	e7b7      	b.n	80117b2 <__hexnan+0x7a>
 8011842:	2508      	movs	r5, #8
 8011844:	e7b5      	b.n	80117b2 <__hexnan+0x7a>
 8011846:	9b01      	ldr	r3, [sp, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d0df      	beq.n	801180c <__hexnan+0xd4>
 801184c:	f04f 32ff 	mov.w	r2, #4294967295
 8011850:	f1c3 0320 	rsb	r3, r3, #32
 8011854:	fa22 f303 	lsr.w	r3, r2, r3
 8011858:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801185c:	401a      	ands	r2, r3
 801185e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011862:	e7d3      	b.n	801180c <__hexnan+0xd4>
 8011864:	3f04      	subs	r7, #4
 8011866:	e7d1      	b.n	801180c <__hexnan+0xd4>
 8011868:	2004      	movs	r0, #4
 801186a:	b007      	add	sp, #28
 801186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011870 <_localeconv_r>:
 8011870:	4800      	ldr	r0, [pc, #0]	; (8011874 <_localeconv_r+0x4>)
 8011872:	4770      	bx	lr
 8011874:	2000020c 	.word	0x2000020c

08011878 <_lseek_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d07      	ldr	r5, [pc, #28]	; (8011898 <_lseek_r+0x20>)
 801187c:	4604      	mov	r4, r0
 801187e:	4608      	mov	r0, r1
 8011880:	4611      	mov	r1, r2
 8011882:	2200      	movs	r2, #0
 8011884:	602a      	str	r2, [r5, #0]
 8011886:	461a      	mov	r2, r3
 8011888:	f7f4 fb14 	bl	8005eb4 <_lseek>
 801188c:	1c43      	adds	r3, r0, #1
 801188e:	d102      	bne.n	8011896 <_lseek_r+0x1e>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	b103      	cbz	r3, 8011896 <_lseek_r+0x1e>
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	bd38      	pop	{r3, r4, r5, pc}
 8011898:	200036c0 	.word	0x200036c0

0801189c <malloc>:
 801189c:	4b02      	ldr	r3, [pc, #8]	; (80118a8 <malloc+0xc>)
 801189e:	4601      	mov	r1, r0
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	f7fc be95 	b.w	800e5d0 <_malloc_r>
 80118a6:	bf00      	nop
 80118a8:	200000b4 	.word	0x200000b4

080118ac <__ascii_mbtowc>:
 80118ac:	b082      	sub	sp, #8
 80118ae:	b901      	cbnz	r1, 80118b2 <__ascii_mbtowc+0x6>
 80118b0:	a901      	add	r1, sp, #4
 80118b2:	b142      	cbz	r2, 80118c6 <__ascii_mbtowc+0x1a>
 80118b4:	b14b      	cbz	r3, 80118ca <__ascii_mbtowc+0x1e>
 80118b6:	7813      	ldrb	r3, [r2, #0]
 80118b8:	600b      	str	r3, [r1, #0]
 80118ba:	7812      	ldrb	r2, [r2, #0]
 80118bc:	1e10      	subs	r0, r2, #0
 80118be:	bf18      	it	ne
 80118c0:	2001      	movne	r0, #1
 80118c2:	b002      	add	sp, #8
 80118c4:	4770      	bx	lr
 80118c6:	4610      	mov	r0, r2
 80118c8:	e7fb      	b.n	80118c2 <__ascii_mbtowc+0x16>
 80118ca:	f06f 0001 	mvn.w	r0, #1
 80118ce:	e7f8      	b.n	80118c2 <__ascii_mbtowc+0x16>

080118d0 <__malloc_lock>:
 80118d0:	4801      	ldr	r0, [pc, #4]	; (80118d8 <__malloc_lock+0x8>)
 80118d2:	f7fc be44 	b.w	800e55e <__retarget_lock_acquire_recursive>
 80118d6:	bf00      	nop
 80118d8:	200036b4 	.word	0x200036b4

080118dc <__malloc_unlock>:
 80118dc:	4801      	ldr	r0, [pc, #4]	; (80118e4 <__malloc_unlock+0x8>)
 80118de:	f7fc be3f 	b.w	800e560 <__retarget_lock_release_recursive>
 80118e2:	bf00      	nop
 80118e4:	200036b4 	.word	0x200036b4

080118e8 <_Balloc>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80118ec:	4604      	mov	r4, r0
 80118ee:	460d      	mov	r5, r1
 80118f0:	b976      	cbnz	r6, 8011910 <_Balloc+0x28>
 80118f2:	2010      	movs	r0, #16
 80118f4:	f7ff ffd2 	bl	801189c <malloc>
 80118f8:	4602      	mov	r2, r0
 80118fa:	6260      	str	r0, [r4, #36]	; 0x24
 80118fc:	b920      	cbnz	r0, 8011908 <_Balloc+0x20>
 80118fe:	4b18      	ldr	r3, [pc, #96]	; (8011960 <_Balloc+0x78>)
 8011900:	4818      	ldr	r0, [pc, #96]	; (8011964 <_Balloc+0x7c>)
 8011902:	2166      	movs	r1, #102	; 0x66
 8011904:	f000 feae 	bl	8012664 <__assert_func>
 8011908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801190c:	6006      	str	r6, [r0, #0]
 801190e:	60c6      	str	r6, [r0, #12]
 8011910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011912:	68f3      	ldr	r3, [r6, #12]
 8011914:	b183      	cbz	r3, 8011938 <_Balloc+0x50>
 8011916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801191e:	b9b8      	cbnz	r0, 8011950 <_Balloc+0x68>
 8011920:	2101      	movs	r1, #1
 8011922:	fa01 f605 	lsl.w	r6, r1, r5
 8011926:	1d72      	adds	r2, r6, #5
 8011928:	0092      	lsls	r2, r2, #2
 801192a:	4620      	mov	r0, r4
 801192c:	f000 fc9d 	bl	801226a <_calloc_r>
 8011930:	b160      	cbz	r0, 801194c <_Balloc+0x64>
 8011932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011936:	e00e      	b.n	8011956 <_Balloc+0x6e>
 8011938:	2221      	movs	r2, #33	; 0x21
 801193a:	2104      	movs	r1, #4
 801193c:	4620      	mov	r0, r4
 801193e:	f000 fc94 	bl	801226a <_calloc_r>
 8011942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011944:	60f0      	str	r0, [r6, #12]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1e4      	bne.n	8011916 <_Balloc+0x2e>
 801194c:	2000      	movs	r0, #0
 801194e:	bd70      	pop	{r4, r5, r6, pc}
 8011950:	6802      	ldr	r2, [r0, #0]
 8011952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011956:	2300      	movs	r3, #0
 8011958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801195c:	e7f7      	b.n	801194e <_Balloc+0x66>
 801195e:	bf00      	nop
 8011960:	08016116 	.word	0x08016116
 8011964:	08016214 	.word	0x08016214

08011968 <_Bfree>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801196c:	4605      	mov	r5, r0
 801196e:	460c      	mov	r4, r1
 8011970:	b976      	cbnz	r6, 8011990 <_Bfree+0x28>
 8011972:	2010      	movs	r0, #16
 8011974:	f7ff ff92 	bl	801189c <malloc>
 8011978:	4602      	mov	r2, r0
 801197a:	6268      	str	r0, [r5, #36]	; 0x24
 801197c:	b920      	cbnz	r0, 8011988 <_Bfree+0x20>
 801197e:	4b09      	ldr	r3, [pc, #36]	; (80119a4 <_Bfree+0x3c>)
 8011980:	4809      	ldr	r0, [pc, #36]	; (80119a8 <_Bfree+0x40>)
 8011982:	218a      	movs	r1, #138	; 0x8a
 8011984:	f000 fe6e 	bl	8012664 <__assert_func>
 8011988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801198c:	6006      	str	r6, [r0, #0]
 801198e:	60c6      	str	r6, [r0, #12]
 8011990:	b13c      	cbz	r4, 80119a2 <_Bfree+0x3a>
 8011992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011994:	6862      	ldr	r2, [r4, #4]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801199c:	6021      	str	r1, [r4, #0]
 801199e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80119a2:	bd70      	pop	{r4, r5, r6, pc}
 80119a4:	08016116 	.word	0x08016116
 80119a8:	08016214 	.word	0x08016214

080119ac <__multadd>:
 80119ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b0:	690d      	ldr	r5, [r1, #16]
 80119b2:	4607      	mov	r7, r0
 80119b4:	460c      	mov	r4, r1
 80119b6:	461e      	mov	r6, r3
 80119b8:	f101 0c14 	add.w	ip, r1, #20
 80119bc:	2000      	movs	r0, #0
 80119be:	f8dc 3000 	ldr.w	r3, [ip]
 80119c2:	b299      	uxth	r1, r3
 80119c4:	fb02 6101 	mla	r1, r2, r1, r6
 80119c8:	0c1e      	lsrs	r6, r3, #16
 80119ca:	0c0b      	lsrs	r3, r1, #16
 80119cc:	fb02 3306 	mla	r3, r2, r6, r3
 80119d0:	b289      	uxth	r1, r1
 80119d2:	3001      	adds	r0, #1
 80119d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119d8:	4285      	cmp	r5, r0
 80119da:	f84c 1b04 	str.w	r1, [ip], #4
 80119de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80119e2:	dcec      	bgt.n	80119be <__multadd+0x12>
 80119e4:	b30e      	cbz	r6, 8011a2a <__multadd+0x7e>
 80119e6:	68a3      	ldr	r3, [r4, #8]
 80119e8:	42ab      	cmp	r3, r5
 80119ea:	dc19      	bgt.n	8011a20 <__multadd+0x74>
 80119ec:	6861      	ldr	r1, [r4, #4]
 80119ee:	4638      	mov	r0, r7
 80119f0:	3101      	adds	r1, #1
 80119f2:	f7ff ff79 	bl	80118e8 <_Balloc>
 80119f6:	4680      	mov	r8, r0
 80119f8:	b928      	cbnz	r0, 8011a06 <__multadd+0x5a>
 80119fa:	4602      	mov	r2, r0
 80119fc:	4b0c      	ldr	r3, [pc, #48]	; (8011a30 <__multadd+0x84>)
 80119fe:	480d      	ldr	r0, [pc, #52]	; (8011a34 <__multadd+0x88>)
 8011a00:	21b5      	movs	r1, #181	; 0xb5
 8011a02:	f000 fe2f 	bl	8012664 <__assert_func>
 8011a06:	6922      	ldr	r2, [r4, #16]
 8011a08:	3202      	adds	r2, #2
 8011a0a:	f104 010c 	add.w	r1, r4, #12
 8011a0e:	0092      	lsls	r2, r2, #2
 8011a10:	300c      	adds	r0, #12
 8011a12:	f7fc fda6 	bl	800e562 <memcpy>
 8011a16:	4621      	mov	r1, r4
 8011a18:	4638      	mov	r0, r7
 8011a1a:	f7ff ffa5 	bl	8011968 <_Bfree>
 8011a1e:	4644      	mov	r4, r8
 8011a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a24:	3501      	adds	r5, #1
 8011a26:	615e      	str	r6, [r3, #20]
 8011a28:	6125      	str	r5, [r4, #16]
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a30:	08016188 	.word	0x08016188
 8011a34:	08016214 	.word	0x08016214

08011a38 <__s2b>:
 8011a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a3c:	460c      	mov	r4, r1
 8011a3e:	4615      	mov	r5, r2
 8011a40:	461f      	mov	r7, r3
 8011a42:	2209      	movs	r2, #9
 8011a44:	3308      	adds	r3, #8
 8011a46:	4606      	mov	r6, r0
 8011a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	2201      	movs	r2, #1
 8011a50:	429a      	cmp	r2, r3
 8011a52:	db09      	blt.n	8011a68 <__s2b+0x30>
 8011a54:	4630      	mov	r0, r6
 8011a56:	f7ff ff47 	bl	80118e8 <_Balloc>
 8011a5a:	b940      	cbnz	r0, 8011a6e <__s2b+0x36>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	4b19      	ldr	r3, [pc, #100]	; (8011ac4 <__s2b+0x8c>)
 8011a60:	4819      	ldr	r0, [pc, #100]	; (8011ac8 <__s2b+0x90>)
 8011a62:	21ce      	movs	r1, #206	; 0xce
 8011a64:	f000 fdfe 	bl	8012664 <__assert_func>
 8011a68:	0052      	lsls	r2, r2, #1
 8011a6a:	3101      	adds	r1, #1
 8011a6c:	e7f0      	b.n	8011a50 <__s2b+0x18>
 8011a6e:	9b08      	ldr	r3, [sp, #32]
 8011a70:	6143      	str	r3, [r0, #20]
 8011a72:	2d09      	cmp	r5, #9
 8011a74:	f04f 0301 	mov.w	r3, #1
 8011a78:	6103      	str	r3, [r0, #16]
 8011a7a:	dd16      	ble.n	8011aaa <__s2b+0x72>
 8011a7c:	f104 0909 	add.w	r9, r4, #9
 8011a80:	46c8      	mov	r8, r9
 8011a82:	442c      	add	r4, r5
 8011a84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011a88:	4601      	mov	r1, r0
 8011a8a:	3b30      	subs	r3, #48	; 0x30
 8011a8c:	220a      	movs	r2, #10
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f7ff ff8c 	bl	80119ac <__multadd>
 8011a94:	45a0      	cmp	r8, r4
 8011a96:	d1f5      	bne.n	8011a84 <__s2b+0x4c>
 8011a98:	f1a5 0408 	sub.w	r4, r5, #8
 8011a9c:	444c      	add	r4, r9
 8011a9e:	1b2d      	subs	r5, r5, r4
 8011aa0:	1963      	adds	r3, r4, r5
 8011aa2:	42bb      	cmp	r3, r7
 8011aa4:	db04      	blt.n	8011ab0 <__s2b+0x78>
 8011aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aaa:	340a      	adds	r4, #10
 8011aac:	2509      	movs	r5, #9
 8011aae:	e7f6      	b.n	8011a9e <__s2b+0x66>
 8011ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ab4:	4601      	mov	r1, r0
 8011ab6:	3b30      	subs	r3, #48	; 0x30
 8011ab8:	220a      	movs	r2, #10
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7ff ff76 	bl	80119ac <__multadd>
 8011ac0:	e7ee      	b.n	8011aa0 <__s2b+0x68>
 8011ac2:	bf00      	nop
 8011ac4:	08016188 	.word	0x08016188
 8011ac8:	08016214 	.word	0x08016214

08011acc <__hi0bits>:
 8011acc:	0c03      	lsrs	r3, r0, #16
 8011ace:	041b      	lsls	r3, r3, #16
 8011ad0:	b9d3      	cbnz	r3, 8011b08 <__hi0bits+0x3c>
 8011ad2:	0400      	lsls	r0, r0, #16
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011ada:	bf04      	itt	eq
 8011adc:	0200      	lsleq	r0, r0, #8
 8011ade:	3308      	addeq	r3, #8
 8011ae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ae4:	bf04      	itt	eq
 8011ae6:	0100      	lsleq	r0, r0, #4
 8011ae8:	3304      	addeq	r3, #4
 8011aea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011aee:	bf04      	itt	eq
 8011af0:	0080      	lsleq	r0, r0, #2
 8011af2:	3302      	addeq	r3, #2
 8011af4:	2800      	cmp	r0, #0
 8011af6:	db05      	blt.n	8011b04 <__hi0bits+0x38>
 8011af8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011afc:	f103 0301 	add.w	r3, r3, #1
 8011b00:	bf08      	it	eq
 8011b02:	2320      	moveq	r3, #32
 8011b04:	4618      	mov	r0, r3
 8011b06:	4770      	bx	lr
 8011b08:	2300      	movs	r3, #0
 8011b0a:	e7e4      	b.n	8011ad6 <__hi0bits+0xa>

08011b0c <__lo0bits>:
 8011b0c:	6803      	ldr	r3, [r0, #0]
 8011b0e:	f013 0207 	ands.w	r2, r3, #7
 8011b12:	4601      	mov	r1, r0
 8011b14:	d00b      	beq.n	8011b2e <__lo0bits+0x22>
 8011b16:	07da      	lsls	r2, r3, #31
 8011b18:	d423      	bmi.n	8011b62 <__lo0bits+0x56>
 8011b1a:	0798      	lsls	r0, r3, #30
 8011b1c:	bf49      	itett	mi
 8011b1e:	085b      	lsrmi	r3, r3, #1
 8011b20:	089b      	lsrpl	r3, r3, #2
 8011b22:	2001      	movmi	r0, #1
 8011b24:	600b      	strmi	r3, [r1, #0]
 8011b26:	bf5c      	itt	pl
 8011b28:	600b      	strpl	r3, [r1, #0]
 8011b2a:	2002      	movpl	r0, #2
 8011b2c:	4770      	bx	lr
 8011b2e:	b298      	uxth	r0, r3
 8011b30:	b9a8      	cbnz	r0, 8011b5e <__lo0bits+0x52>
 8011b32:	0c1b      	lsrs	r3, r3, #16
 8011b34:	2010      	movs	r0, #16
 8011b36:	b2da      	uxtb	r2, r3
 8011b38:	b90a      	cbnz	r2, 8011b3e <__lo0bits+0x32>
 8011b3a:	3008      	adds	r0, #8
 8011b3c:	0a1b      	lsrs	r3, r3, #8
 8011b3e:	071a      	lsls	r2, r3, #28
 8011b40:	bf04      	itt	eq
 8011b42:	091b      	lsreq	r3, r3, #4
 8011b44:	3004      	addeq	r0, #4
 8011b46:	079a      	lsls	r2, r3, #30
 8011b48:	bf04      	itt	eq
 8011b4a:	089b      	lsreq	r3, r3, #2
 8011b4c:	3002      	addeq	r0, #2
 8011b4e:	07da      	lsls	r2, r3, #31
 8011b50:	d403      	bmi.n	8011b5a <__lo0bits+0x4e>
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	f100 0001 	add.w	r0, r0, #1
 8011b58:	d005      	beq.n	8011b66 <__lo0bits+0x5a>
 8011b5a:	600b      	str	r3, [r1, #0]
 8011b5c:	4770      	bx	lr
 8011b5e:	4610      	mov	r0, r2
 8011b60:	e7e9      	b.n	8011b36 <__lo0bits+0x2a>
 8011b62:	2000      	movs	r0, #0
 8011b64:	4770      	bx	lr
 8011b66:	2020      	movs	r0, #32
 8011b68:	4770      	bx	lr
	...

08011b6c <__i2b>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	460c      	mov	r4, r1
 8011b70:	2101      	movs	r1, #1
 8011b72:	f7ff feb9 	bl	80118e8 <_Balloc>
 8011b76:	4602      	mov	r2, r0
 8011b78:	b928      	cbnz	r0, 8011b86 <__i2b+0x1a>
 8011b7a:	4b05      	ldr	r3, [pc, #20]	; (8011b90 <__i2b+0x24>)
 8011b7c:	4805      	ldr	r0, [pc, #20]	; (8011b94 <__i2b+0x28>)
 8011b7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011b82:	f000 fd6f 	bl	8012664 <__assert_func>
 8011b86:	2301      	movs	r3, #1
 8011b88:	6144      	str	r4, [r0, #20]
 8011b8a:	6103      	str	r3, [r0, #16]
 8011b8c:	bd10      	pop	{r4, pc}
 8011b8e:	bf00      	nop
 8011b90:	08016188 	.word	0x08016188
 8011b94:	08016214 	.word	0x08016214

08011b98 <__multiply>:
 8011b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9c:	4691      	mov	r9, r2
 8011b9e:	690a      	ldr	r2, [r1, #16]
 8011ba0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	bfb8      	it	lt
 8011ba8:	460b      	movlt	r3, r1
 8011baa:	460c      	mov	r4, r1
 8011bac:	bfbc      	itt	lt
 8011bae:	464c      	movlt	r4, r9
 8011bb0:	4699      	movlt	r9, r3
 8011bb2:	6927      	ldr	r7, [r4, #16]
 8011bb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011bb8:	68a3      	ldr	r3, [r4, #8]
 8011bba:	6861      	ldr	r1, [r4, #4]
 8011bbc:	eb07 060a 	add.w	r6, r7, sl
 8011bc0:	42b3      	cmp	r3, r6
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	bfb8      	it	lt
 8011bc6:	3101      	addlt	r1, #1
 8011bc8:	f7ff fe8e 	bl	80118e8 <_Balloc>
 8011bcc:	b930      	cbnz	r0, 8011bdc <__multiply+0x44>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	4b44      	ldr	r3, [pc, #272]	; (8011ce4 <__multiply+0x14c>)
 8011bd2:	4845      	ldr	r0, [pc, #276]	; (8011ce8 <__multiply+0x150>)
 8011bd4:	f240 115d 	movw	r1, #349	; 0x15d
 8011bd8:	f000 fd44 	bl	8012664 <__assert_func>
 8011bdc:	f100 0514 	add.w	r5, r0, #20
 8011be0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011be4:	462b      	mov	r3, r5
 8011be6:	2200      	movs	r2, #0
 8011be8:	4543      	cmp	r3, r8
 8011bea:	d321      	bcc.n	8011c30 <__multiply+0x98>
 8011bec:	f104 0314 	add.w	r3, r4, #20
 8011bf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011bf4:	f109 0314 	add.w	r3, r9, #20
 8011bf8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011bfc:	9202      	str	r2, [sp, #8]
 8011bfe:	1b3a      	subs	r2, r7, r4
 8011c00:	3a15      	subs	r2, #21
 8011c02:	f022 0203 	bic.w	r2, r2, #3
 8011c06:	3204      	adds	r2, #4
 8011c08:	f104 0115 	add.w	r1, r4, #21
 8011c0c:	428f      	cmp	r7, r1
 8011c0e:	bf38      	it	cc
 8011c10:	2204      	movcc	r2, #4
 8011c12:	9201      	str	r2, [sp, #4]
 8011c14:	9a02      	ldr	r2, [sp, #8]
 8011c16:	9303      	str	r3, [sp, #12]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d80c      	bhi.n	8011c36 <__multiply+0x9e>
 8011c1c:	2e00      	cmp	r6, #0
 8011c1e:	dd03      	ble.n	8011c28 <__multiply+0x90>
 8011c20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d05a      	beq.n	8011cde <__multiply+0x146>
 8011c28:	6106      	str	r6, [r0, #16]
 8011c2a:	b005      	add	sp, #20
 8011c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c30:	f843 2b04 	str.w	r2, [r3], #4
 8011c34:	e7d8      	b.n	8011be8 <__multiply+0x50>
 8011c36:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c3a:	f1ba 0f00 	cmp.w	sl, #0
 8011c3e:	d024      	beq.n	8011c8a <__multiply+0xf2>
 8011c40:	f104 0e14 	add.w	lr, r4, #20
 8011c44:	46a9      	mov	r9, r5
 8011c46:	f04f 0c00 	mov.w	ip, #0
 8011c4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c4e:	f8d9 1000 	ldr.w	r1, [r9]
 8011c52:	fa1f fb82 	uxth.w	fp, r2
 8011c56:	b289      	uxth	r1, r1
 8011c58:	fb0a 110b 	mla	r1, sl, fp, r1
 8011c5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011c60:	f8d9 2000 	ldr.w	r2, [r9]
 8011c64:	4461      	add	r1, ip
 8011c66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8011c6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011c72:	b289      	uxth	r1, r1
 8011c74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011c78:	4577      	cmp	r7, lr
 8011c7a:	f849 1b04 	str.w	r1, [r9], #4
 8011c7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c82:	d8e2      	bhi.n	8011c4a <__multiply+0xb2>
 8011c84:	9a01      	ldr	r2, [sp, #4]
 8011c86:	f845 c002 	str.w	ip, [r5, r2]
 8011c8a:	9a03      	ldr	r2, [sp, #12]
 8011c8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011c90:	3304      	adds	r3, #4
 8011c92:	f1b9 0f00 	cmp.w	r9, #0
 8011c96:	d020      	beq.n	8011cda <__multiply+0x142>
 8011c98:	6829      	ldr	r1, [r5, #0]
 8011c9a:	f104 0c14 	add.w	ip, r4, #20
 8011c9e:	46ae      	mov	lr, r5
 8011ca0:	f04f 0a00 	mov.w	sl, #0
 8011ca4:	f8bc b000 	ldrh.w	fp, [ip]
 8011ca8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011cac:	fb09 220b 	mla	r2, r9, fp, r2
 8011cb0:	4492      	add	sl, r2
 8011cb2:	b289      	uxth	r1, r1
 8011cb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011cb8:	f84e 1b04 	str.w	r1, [lr], #4
 8011cbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011cc0:	f8be 1000 	ldrh.w	r1, [lr]
 8011cc4:	0c12      	lsrs	r2, r2, #16
 8011cc6:	fb09 1102 	mla	r1, r9, r2, r1
 8011cca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011cce:	4567      	cmp	r7, ip
 8011cd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011cd4:	d8e6      	bhi.n	8011ca4 <__multiply+0x10c>
 8011cd6:	9a01      	ldr	r2, [sp, #4]
 8011cd8:	50a9      	str	r1, [r5, r2]
 8011cda:	3504      	adds	r5, #4
 8011cdc:	e79a      	b.n	8011c14 <__multiply+0x7c>
 8011cde:	3e01      	subs	r6, #1
 8011ce0:	e79c      	b.n	8011c1c <__multiply+0x84>
 8011ce2:	bf00      	nop
 8011ce4:	08016188 	.word	0x08016188
 8011ce8:	08016214 	.word	0x08016214

08011cec <__pow5mult>:
 8011cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	4615      	mov	r5, r2
 8011cf2:	f012 0203 	ands.w	r2, r2, #3
 8011cf6:	4606      	mov	r6, r0
 8011cf8:	460f      	mov	r7, r1
 8011cfa:	d007      	beq.n	8011d0c <__pow5mult+0x20>
 8011cfc:	4c25      	ldr	r4, [pc, #148]	; (8011d94 <__pow5mult+0xa8>)
 8011cfe:	3a01      	subs	r2, #1
 8011d00:	2300      	movs	r3, #0
 8011d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d06:	f7ff fe51 	bl	80119ac <__multadd>
 8011d0a:	4607      	mov	r7, r0
 8011d0c:	10ad      	asrs	r5, r5, #2
 8011d0e:	d03d      	beq.n	8011d8c <__pow5mult+0xa0>
 8011d10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d12:	b97c      	cbnz	r4, 8011d34 <__pow5mult+0x48>
 8011d14:	2010      	movs	r0, #16
 8011d16:	f7ff fdc1 	bl	801189c <malloc>
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	6270      	str	r0, [r6, #36]	; 0x24
 8011d1e:	b928      	cbnz	r0, 8011d2c <__pow5mult+0x40>
 8011d20:	4b1d      	ldr	r3, [pc, #116]	; (8011d98 <__pow5mult+0xac>)
 8011d22:	481e      	ldr	r0, [pc, #120]	; (8011d9c <__pow5mult+0xb0>)
 8011d24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011d28:	f000 fc9c 	bl	8012664 <__assert_func>
 8011d2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d30:	6004      	str	r4, [r0, #0]
 8011d32:	60c4      	str	r4, [r0, #12]
 8011d34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011d38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d3c:	b94c      	cbnz	r4, 8011d52 <__pow5mult+0x66>
 8011d3e:	f240 2171 	movw	r1, #625	; 0x271
 8011d42:	4630      	mov	r0, r6
 8011d44:	f7ff ff12 	bl	8011b6c <__i2b>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d4e:	4604      	mov	r4, r0
 8011d50:	6003      	str	r3, [r0, #0]
 8011d52:	f04f 0900 	mov.w	r9, #0
 8011d56:	07eb      	lsls	r3, r5, #31
 8011d58:	d50a      	bpl.n	8011d70 <__pow5mult+0x84>
 8011d5a:	4639      	mov	r1, r7
 8011d5c:	4622      	mov	r2, r4
 8011d5e:	4630      	mov	r0, r6
 8011d60:	f7ff ff1a 	bl	8011b98 <__multiply>
 8011d64:	4639      	mov	r1, r7
 8011d66:	4680      	mov	r8, r0
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7ff fdfd 	bl	8011968 <_Bfree>
 8011d6e:	4647      	mov	r7, r8
 8011d70:	106d      	asrs	r5, r5, #1
 8011d72:	d00b      	beq.n	8011d8c <__pow5mult+0xa0>
 8011d74:	6820      	ldr	r0, [r4, #0]
 8011d76:	b938      	cbnz	r0, 8011d88 <__pow5mult+0x9c>
 8011d78:	4622      	mov	r2, r4
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f7ff ff0b 	bl	8011b98 <__multiply>
 8011d82:	6020      	str	r0, [r4, #0]
 8011d84:	f8c0 9000 	str.w	r9, [r0]
 8011d88:	4604      	mov	r4, r0
 8011d8a:	e7e4      	b.n	8011d56 <__pow5mult+0x6a>
 8011d8c:	4638      	mov	r0, r7
 8011d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d92:	bf00      	nop
 8011d94:	08016360 	.word	0x08016360
 8011d98:	08016116 	.word	0x08016116
 8011d9c:	08016214 	.word	0x08016214

08011da0 <__lshift>:
 8011da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da4:	460c      	mov	r4, r1
 8011da6:	6849      	ldr	r1, [r1, #4]
 8011da8:	6923      	ldr	r3, [r4, #16]
 8011daa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dae:	68a3      	ldr	r3, [r4, #8]
 8011db0:	4607      	mov	r7, r0
 8011db2:	4691      	mov	r9, r2
 8011db4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011db8:	f108 0601 	add.w	r6, r8, #1
 8011dbc:	42b3      	cmp	r3, r6
 8011dbe:	db0b      	blt.n	8011dd8 <__lshift+0x38>
 8011dc0:	4638      	mov	r0, r7
 8011dc2:	f7ff fd91 	bl	80118e8 <_Balloc>
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	b948      	cbnz	r0, 8011dde <__lshift+0x3e>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	4b2a      	ldr	r3, [pc, #168]	; (8011e78 <__lshift+0xd8>)
 8011dce:	482b      	ldr	r0, [pc, #172]	; (8011e7c <__lshift+0xdc>)
 8011dd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011dd4:	f000 fc46 	bl	8012664 <__assert_func>
 8011dd8:	3101      	adds	r1, #1
 8011dda:	005b      	lsls	r3, r3, #1
 8011ddc:	e7ee      	b.n	8011dbc <__lshift+0x1c>
 8011dde:	2300      	movs	r3, #0
 8011de0:	f100 0114 	add.w	r1, r0, #20
 8011de4:	f100 0210 	add.w	r2, r0, #16
 8011de8:	4618      	mov	r0, r3
 8011dea:	4553      	cmp	r3, sl
 8011dec:	db37      	blt.n	8011e5e <__lshift+0xbe>
 8011dee:	6920      	ldr	r0, [r4, #16]
 8011df0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011df4:	f104 0314 	add.w	r3, r4, #20
 8011df8:	f019 091f 	ands.w	r9, r9, #31
 8011dfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011e04:	d02f      	beq.n	8011e66 <__lshift+0xc6>
 8011e06:	f1c9 0e20 	rsb	lr, r9, #32
 8011e0a:	468a      	mov	sl, r1
 8011e0c:	f04f 0c00 	mov.w	ip, #0
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	fa02 f209 	lsl.w	r2, r2, r9
 8011e16:	ea42 020c 	orr.w	r2, r2, ip
 8011e1a:	f84a 2b04 	str.w	r2, [sl], #4
 8011e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e22:	4298      	cmp	r0, r3
 8011e24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011e28:	d8f2      	bhi.n	8011e10 <__lshift+0x70>
 8011e2a:	1b03      	subs	r3, r0, r4
 8011e2c:	3b15      	subs	r3, #21
 8011e2e:	f023 0303 	bic.w	r3, r3, #3
 8011e32:	3304      	adds	r3, #4
 8011e34:	f104 0215 	add.w	r2, r4, #21
 8011e38:	4290      	cmp	r0, r2
 8011e3a:	bf38      	it	cc
 8011e3c:	2304      	movcc	r3, #4
 8011e3e:	f841 c003 	str.w	ip, [r1, r3]
 8011e42:	f1bc 0f00 	cmp.w	ip, #0
 8011e46:	d001      	beq.n	8011e4c <__lshift+0xac>
 8011e48:	f108 0602 	add.w	r6, r8, #2
 8011e4c:	3e01      	subs	r6, #1
 8011e4e:	4638      	mov	r0, r7
 8011e50:	612e      	str	r6, [r5, #16]
 8011e52:	4621      	mov	r1, r4
 8011e54:	f7ff fd88 	bl	8011968 <_Bfree>
 8011e58:	4628      	mov	r0, r5
 8011e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e62:	3301      	adds	r3, #1
 8011e64:	e7c1      	b.n	8011dea <__lshift+0x4a>
 8011e66:	3904      	subs	r1, #4
 8011e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e70:	4298      	cmp	r0, r3
 8011e72:	d8f9      	bhi.n	8011e68 <__lshift+0xc8>
 8011e74:	e7ea      	b.n	8011e4c <__lshift+0xac>
 8011e76:	bf00      	nop
 8011e78:	08016188 	.word	0x08016188
 8011e7c:	08016214 	.word	0x08016214

08011e80 <__mcmp>:
 8011e80:	b530      	push	{r4, r5, lr}
 8011e82:	6902      	ldr	r2, [r0, #16]
 8011e84:	690c      	ldr	r4, [r1, #16]
 8011e86:	1b12      	subs	r2, r2, r4
 8011e88:	d10e      	bne.n	8011ea8 <__mcmp+0x28>
 8011e8a:	f100 0314 	add.w	r3, r0, #20
 8011e8e:	3114      	adds	r1, #20
 8011e90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011e94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011e98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011e9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ea0:	42a5      	cmp	r5, r4
 8011ea2:	d003      	beq.n	8011eac <__mcmp+0x2c>
 8011ea4:	d305      	bcc.n	8011eb2 <__mcmp+0x32>
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	4610      	mov	r0, r2
 8011eaa:	bd30      	pop	{r4, r5, pc}
 8011eac:	4283      	cmp	r3, r0
 8011eae:	d3f3      	bcc.n	8011e98 <__mcmp+0x18>
 8011eb0:	e7fa      	b.n	8011ea8 <__mcmp+0x28>
 8011eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb6:	e7f7      	b.n	8011ea8 <__mcmp+0x28>

08011eb8 <__mdiff>:
 8011eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	460c      	mov	r4, r1
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	4611      	mov	r1, r2
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	4690      	mov	r8, r2
 8011ec6:	f7ff ffdb 	bl	8011e80 <__mcmp>
 8011eca:	1e05      	subs	r5, r0, #0
 8011ecc:	d110      	bne.n	8011ef0 <__mdiff+0x38>
 8011ece:	4629      	mov	r1, r5
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	f7ff fd09 	bl	80118e8 <_Balloc>
 8011ed6:	b930      	cbnz	r0, 8011ee6 <__mdiff+0x2e>
 8011ed8:	4b3a      	ldr	r3, [pc, #232]	; (8011fc4 <__mdiff+0x10c>)
 8011eda:	4602      	mov	r2, r0
 8011edc:	f240 2132 	movw	r1, #562	; 0x232
 8011ee0:	4839      	ldr	r0, [pc, #228]	; (8011fc8 <__mdiff+0x110>)
 8011ee2:	f000 fbbf 	bl	8012664 <__assert_func>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef0:	bfa4      	itt	ge
 8011ef2:	4643      	movge	r3, r8
 8011ef4:	46a0      	movge	r8, r4
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011efc:	bfa6      	itte	ge
 8011efe:	461c      	movge	r4, r3
 8011f00:	2500      	movge	r5, #0
 8011f02:	2501      	movlt	r5, #1
 8011f04:	f7ff fcf0 	bl	80118e8 <_Balloc>
 8011f08:	b920      	cbnz	r0, 8011f14 <__mdiff+0x5c>
 8011f0a:	4b2e      	ldr	r3, [pc, #184]	; (8011fc4 <__mdiff+0x10c>)
 8011f0c:	4602      	mov	r2, r0
 8011f0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011f12:	e7e5      	b.n	8011ee0 <__mdiff+0x28>
 8011f14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f18:	6926      	ldr	r6, [r4, #16]
 8011f1a:	60c5      	str	r5, [r0, #12]
 8011f1c:	f104 0914 	add.w	r9, r4, #20
 8011f20:	f108 0514 	add.w	r5, r8, #20
 8011f24:	f100 0e14 	add.w	lr, r0, #20
 8011f28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f30:	f108 0210 	add.w	r2, r8, #16
 8011f34:	46f2      	mov	sl, lr
 8011f36:	2100      	movs	r1, #0
 8011f38:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f40:	fa1f f883 	uxth.w	r8, r3
 8011f44:	fa11 f18b 	uxtah	r1, r1, fp
 8011f48:	0c1b      	lsrs	r3, r3, #16
 8011f4a:	eba1 0808 	sub.w	r8, r1, r8
 8011f4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f56:	fa1f f888 	uxth.w	r8, r8
 8011f5a:	1419      	asrs	r1, r3, #16
 8011f5c:	454e      	cmp	r6, r9
 8011f5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011f62:	f84a 3b04 	str.w	r3, [sl], #4
 8011f66:	d8e7      	bhi.n	8011f38 <__mdiff+0x80>
 8011f68:	1b33      	subs	r3, r6, r4
 8011f6a:	3b15      	subs	r3, #21
 8011f6c:	f023 0303 	bic.w	r3, r3, #3
 8011f70:	3304      	adds	r3, #4
 8011f72:	3415      	adds	r4, #21
 8011f74:	42a6      	cmp	r6, r4
 8011f76:	bf38      	it	cc
 8011f78:	2304      	movcc	r3, #4
 8011f7a:	441d      	add	r5, r3
 8011f7c:	4473      	add	r3, lr
 8011f7e:	469e      	mov	lr, r3
 8011f80:	462e      	mov	r6, r5
 8011f82:	4566      	cmp	r6, ip
 8011f84:	d30e      	bcc.n	8011fa4 <__mdiff+0xec>
 8011f86:	f10c 0203 	add.w	r2, ip, #3
 8011f8a:	1b52      	subs	r2, r2, r5
 8011f8c:	f022 0203 	bic.w	r2, r2, #3
 8011f90:	3d03      	subs	r5, #3
 8011f92:	45ac      	cmp	ip, r5
 8011f94:	bf38      	it	cc
 8011f96:	2200      	movcc	r2, #0
 8011f98:	441a      	add	r2, r3
 8011f9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011f9e:	b17b      	cbz	r3, 8011fc0 <__mdiff+0x108>
 8011fa0:	6107      	str	r7, [r0, #16]
 8011fa2:	e7a3      	b.n	8011eec <__mdiff+0x34>
 8011fa4:	f856 8b04 	ldr.w	r8, [r6], #4
 8011fa8:	fa11 f288 	uxtah	r2, r1, r8
 8011fac:	1414      	asrs	r4, r2, #16
 8011fae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011fb2:	b292      	uxth	r2, r2
 8011fb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011fb8:	f84e 2b04 	str.w	r2, [lr], #4
 8011fbc:	1421      	asrs	r1, r4, #16
 8011fbe:	e7e0      	b.n	8011f82 <__mdiff+0xca>
 8011fc0:	3f01      	subs	r7, #1
 8011fc2:	e7ea      	b.n	8011f9a <__mdiff+0xe2>
 8011fc4:	08016188 	.word	0x08016188
 8011fc8:	08016214 	.word	0x08016214

08011fcc <__ulp>:
 8011fcc:	b082      	sub	sp, #8
 8011fce:	ed8d 0b00 	vstr	d0, [sp]
 8011fd2:	9b01      	ldr	r3, [sp, #4]
 8011fd4:	4912      	ldr	r1, [pc, #72]	; (8012020 <__ulp+0x54>)
 8011fd6:	4019      	ands	r1, r3
 8011fd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011fdc:	2900      	cmp	r1, #0
 8011fde:	dd05      	ble.n	8011fec <__ulp+0x20>
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	ec43 2b10 	vmov	d0, r2, r3
 8011fe8:	b002      	add	sp, #8
 8011fea:	4770      	bx	lr
 8011fec:	4249      	negs	r1, r1
 8011fee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011ff2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011ff6:	f04f 0200 	mov.w	r2, #0
 8011ffa:	f04f 0300 	mov.w	r3, #0
 8011ffe:	da04      	bge.n	801200a <__ulp+0x3e>
 8012000:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012004:	fa41 f300 	asr.w	r3, r1, r0
 8012008:	e7ec      	b.n	8011fe4 <__ulp+0x18>
 801200a:	f1a0 0114 	sub.w	r1, r0, #20
 801200e:	291e      	cmp	r1, #30
 8012010:	bfda      	itte	le
 8012012:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012016:	fa20 f101 	lsrle.w	r1, r0, r1
 801201a:	2101      	movgt	r1, #1
 801201c:	460a      	mov	r2, r1
 801201e:	e7e1      	b.n	8011fe4 <__ulp+0x18>
 8012020:	7ff00000 	.word	0x7ff00000

08012024 <__b2d>:
 8012024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012026:	6905      	ldr	r5, [r0, #16]
 8012028:	f100 0714 	add.w	r7, r0, #20
 801202c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012030:	1f2e      	subs	r6, r5, #4
 8012032:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012036:	4620      	mov	r0, r4
 8012038:	f7ff fd48 	bl	8011acc <__hi0bits>
 801203c:	f1c0 0320 	rsb	r3, r0, #32
 8012040:	280a      	cmp	r0, #10
 8012042:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80120c0 <__b2d+0x9c>
 8012046:	600b      	str	r3, [r1, #0]
 8012048:	dc14      	bgt.n	8012074 <__b2d+0x50>
 801204a:	f1c0 0e0b 	rsb	lr, r0, #11
 801204e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012052:	42b7      	cmp	r7, r6
 8012054:	ea41 030c 	orr.w	r3, r1, ip
 8012058:	bf34      	ite	cc
 801205a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801205e:	2100      	movcs	r1, #0
 8012060:	3015      	adds	r0, #21
 8012062:	fa04 f000 	lsl.w	r0, r4, r0
 8012066:	fa21 f10e 	lsr.w	r1, r1, lr
 801206a:	ea40 0201 	orr.w	r2, r0, r1
 801206e:	ec43 2b10 	vmov	d0, r2, r3
 8012072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012074:	42b7      	cmp	r7, r6
 8012076:	bf3a      	itte	cc
 8012078:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801207c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012080:	2100      	movcs	r1, #0
 8012082:	380b      	subs	r0, #11
 8012084:	d017      	beq.n	80120b6 <__b2d+0x92>
 8012086:	f1c0 0c20 	rsb	ip, r0, #32
 801208a:	fa04 f500 	lsl.w	r5, r4, r0
 801208e:	42be      	cmp	r6, r7
 8012090:	fa21 f40c 	lsr.w	r4, r1, ip
 8012094:	ea45 0504 	orr.w	r5, r5, r4
 8012098:	bf8c      	ite	hi
 801209a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801209e:	2400      	movls	r4, #0
 80120a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80120a4:	fa01 f000 	lsl.w	r0, r1, r0
 80120a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80120ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80120b0:	ea40 0204 	orr.w	r2, r0, r4
 80120b4:	e7db      	b.n	801206e <__b2d+0x4a>
 80120b6:	ea44 030c 	orr.w	r3, r4, ip
 80120ba:	460a      	mov	r2, r1
 80120bc:	e7d7      	b.n	801206e <__b2d+0x4a>
 80120be:	bf00      	nop
 80120c0:	3ff00000 	.word	0x3ff00000

080120c4 <__d2b>:
 80120c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80120c8:	4689      	mov	r9, r1
 80120ca:	2101      	movs	r1, #1
 80120cc:	ec57 6b10 	vmov	r6, r7, d0
 80120d0:	4690      	mov	r8, r2
 80120d2:	f7ff fc09 	bl	80118e8 <_Balloc>
 80120d6:	4604      	mov	r4, r0
 80120d8:	b930      	cbnz	r0, 80120e8 <__d2b+0x24>
 80120da:	4602      	mov	r2, r0
 80120dc:	4b25      	ldr	r3, [pc, #148]	; (8012174 <__d2b+0xb0>)
 80120de:	4826      	ldr	r0, [pc, #152]	; (8012178 <__d2b+0xb4>)
 80120e0:	f240 310a 	movw	r1, #778	; 0x30a
 80120e4:	f000 fabe 	bl	8012664 <__assert_func>
 80120e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80120ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80120f0:	bb35      	cbnz	r5, 8012140 <__d2b+0x7c>
 80120f2:	2e00      	cmp	r6, #0
 80120f4:	9301      	str	r3, [sp, #4]
 80120f6:	d028      	beq.n	801214a <__d2b+0x86>
 80120f8:	4668      	mov	r0, sp
 80120fa:	9600      	str	r6, [sp, #0]
 80120fc:	f7ff fd06 	bl	8011b0c <__lo0bits>
 8012100:	9900      	ldr	r1, [sp, #0]
 8012102:	b300      	cbz	r0, 8012146 <__d2b+0x82>
 8012104:	9a01      	ldr	r2, [sp, #4]
 8012106:	f1c0 0320 	rsb	r3, r0, #32
 801210a:	fa02 f303 	lsl.w	r3, r2, r3
 801210e:	430b      	orrs	r3, r1
 8012110:	40c2      	lsrs	r2, r0
 8012112:	6163      	str	r3, [r4, #20]
 8012114:	9201      	str	r2, [sp, #4]
 8012116:	9b01      	ldr	r3, [sp, #4]
 8012118:	61a3      	str	r3, [r4, #24]
 801211a:	2b00      	cmp	r3, #0
 801211c:	bf14      	ite	ne
 801211e:	2202      	movne	r2, #2
 8012120:	2201      	moveq	r2, #1
 8012122:	6122      	str	r2, [r4, #16]
 8012124:	b1d5      	cbz	r5, 801215c <__d2b+0x98>
 8012126:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801212a:	4405      	add	r5, r0
 801212c:	f8c9 5000 	str.w	r5, [r9]
 8012130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012134:	f8c8 0000 	str.w	r0, [r8]
 8012138:	4620      	mov	r0, r4
 801213a:	b003      	add	sp, #12
 801213c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012144:	e7d5      	b.n	80120f2 <__d2b+0x2e>
 8012146:	6161      	str	r1, [r4, #20]
 8012148:	e7e5      	b.n	8012116 <__d2b+0x52>
 801214a:	a801      	add	r0, sp, #4
 801214c:	f7ff fcde 	bl	8011b0c <__lo0bits>
 8012150:	9b01      	ldr	r3, [sp, #4]
 8012152:	6163      	str	r3, [r4, #20]
 8012154:	2201      	movs	r2, #1
 8012156:	6122      	str	r2, [r4, #16]
 8012158:	3020      	adds	r0, #32
 801215a:	e7e3      	b.n	8012124 <__d2b+0x60>
 801215c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012164:	f8c9 0000 	str.w	r0, [r9]
 8012168:	6918      	ldr	r0, [r3, #16]
 801216a:	f7ff fcaf 	bl	8011acc <__hi0bits>
 801216e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012172:	e7df      	b.n	8012134 <__d2b+0x70>
 8012174:	08016188 	.word	0x08016188
 8012178:	08016214 	.word	0x08016214

0801217c <__ratio>:
 801217c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012180:	4688      	mov	r8, r1
 8012182:	4669      	mov	r1, sp
 8012184:	4681      	mov	r9, r0
 8012186:	f7ff ff4d 	bl	8012024 <__b2d>
 801218a:	a901      	add	r1, sp, #4
 801218c:	4640      	mov	r0, r8
 801218e:	ec55 4b10 	vmov	r4, r5, d0
 8012192:	f7ff ff47 	bl	8012024 <__b2d>
 8012196:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801219a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801219e:	eba3 0c02 	sub.w	ip, r3, r2
 80121a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80121a6:	1a9b      	subs	r3, r3, r2
 80121a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80121ac:	ec51 0b10 	vmov	r0, r1, d0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfd6      	itet	le
 80121b4:	460a      	movle	r2, r1
 80121b6:	462a      	movgt	r2, r5
 80121b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80121bc:	468b      	mov	fp, r1
 80121be:	462f      	mov	r7, r5
 80121c0:	bfd4      	ite	le
 80121c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80121c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80121ca:	4620      	mov	r0, r4
 80121cc:	ee10 2a10 	vmov	r2, s0
 80121d0:	465b      	mov	r3, fp
 80121d2:	4639      	mov	r1, r7
 80121d4:	f7ee fb12 	bl	80007fc <__aeabi_ddiv>
 80121d8:	ec41 0b10 	vmov	d0, r0, r1
 80121dc:	b003      	add	sp, #12
 80121de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121e2 <__copybits>:
 80121e2:	3901      	subs	r1, #1
 80121e4:	b570      	push	{r4, r5, r6, lr}
 80121e6:	1149      	asrs	r1, r1, #5
 80121e8:	6914      	ldr	r4, [r2, #16]
 80121ea:	3101      	adds	r1, #1
 80121ec:	f102 0314 	add.w	r3, r2, #20
 80121f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80121f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80121f8:	1f05      	subs	r5, r0, #4
 80121fa:	42a3      	cmp	r3, r4
 80121fc:	d30c      	bcc.n	8012218 <__copybits+0x36>
 80121fe:	1aa3      	subs	r3, r4, r2
 8012200:	3b11      	subs	r3, #17
 8012202:	f023 0303 	bic.w	r3, r3, #3
 8012206:	3211      	adds	r2, #17
 8012208:	42a2      	cmp	r2, r4
 801220a:	bf88      	it	hi
 801220c:	2300      	movhi	r3, #0
 801220e:	4418      	add	r0, r3
 8012210:	2300      	movs	r3, #0
 8012212:	4288      	cmp	r0, r1
 8012214:	d305      	bcc.n	8012222 <__copybits+0x40>
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	f853 6b04 	ldr.w	r6, [r3], #4
 801221c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012220:	e7eb      	b.n	80121fa <__copybits+0x18>
 8012222:	f840 3b04 	str.w	r3, [r0], #4
 8012226:	e7f4      	b.n	8012212 <__copybits+0x30>

08012228 <__any_on>:
 8012228:	f100 0214 	add.w	r2, r0, #20
 801222c:	6900      	ldr	r0, [r0, #16]
 801222e:	114b      	asrs	r3, r1, #5
 8012230:	4298      	cmp	r0, r3
 8012232:	b510      	push	{r4, lr}
 8012234:	db11      	blt.n	801225a <__any_on+0x32>
 8012236:	dd0a      	ble.n	801224e <__any_on+0x26>
 8012238:	f011 011f 	ands.w	r1, r1, #31
 801223c:	d007      	beq.n	801224e <__any_on+0x26>
 801223e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012242:	fa24 f001 	lsr.w	r0, r4, r1
 8012246:	fa00 f101 	lsl.w	r1, r0, r1
 801224a:	428c      	cmp	r4, r1
 801224c:	d10b      	bne.n	8012266 <__any_on+0x3e>
 801224e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012252:	4293      	cmp	r3, r2
 8012254:	d803      	bhi.n	801225e <__any_on+0x36>
 8012256:	2000      	movs	r0, #0
 8012258:	bd10      	pop	{r4, pc}
 801225a:	4603      	mov	r3, r0
 801225c:	e7f7      	b.n	801224e <__any_on+0x26>
 801225e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012262:	2900      	cmp	r1, #0
 8012264:	d0f5      	beq.n	8012252 <__any_on+0x2a>
 8012266:	2001      	movs	r0, #1
 8012268:	e7f6      	b.n	8012258 <__any_on+0x30>

0801226a <_calloc_r>:
 801226a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801226c:	fba1 2402 	umull	r2, r4, r1, r2
 8012270:	b94c      	cbnz	r4, 8012286 <_calloc_r+0x1c>
 8012272:	4611      	mov	r1, r2
 8012274:	9201      	str	r2, [sp, #4]
 8012276:	f7fc f9ab 	bl	800e5d0 <_malloc_r>
 801227a:	9a01      	ldr	r2, [sp, #4]
 801227c:	4605      	mov	r5, r0
 801227e:	b930      	cbnz	r0, 801228e <_calloc_r+0x24>
 8012280:	4628      	mov	r0, r5
 8012282:	b003      	add	sp, #12
 8012284:	bd30      	pop	{r4, r5, pc}
 8012286:	220c      	movs	r2, #12
 8012288:	6002      	str	r2, [r0, #0]
 801228a:	2500      	movs	r5, #0
 801228c:	e7f8      	b.n	8012280 <_calloc_r+0x16>
 801228e:	4621      	mov	r1, r4
 8012290:	f7fc f975 	bl	800e57e <memset>
 8012294:	e7f4      	b.n	8012280 <_calloc_r+0x16>
	...

08012298 <_free_r>:
 8012298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801229a:	2900      	cmp	r1, #0
 801229c:	d044      	beq.n	8012328 <_free_r+0x90>
 801229e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122a2:	9001      	str	r0, [sp, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f1a1 0404 	sub.w	r4, r1, #4
 80122aa:	bfb8      	it	lt
 80122ac:	18e4      	addlt	r4, r4, r3
 80122ae:	f7ff fb0f 	bl	80118d0 <__malloc_lock>
 80122b2:	4a1e      	ldr	r2, [pc, #120]	; (801232c <_free_r+0x94>)
 80122b4:	9801      	ldr	r0, [sp, #4]
 80122b6:	6813      	ldr	r3, [r2, #0]
 80122b8:	b933      	cbnz	r3, 80122c8 <_free_r+0x30>
 80122ba:	6063      	str	r3, [r4, #4]
 80122bc:	6014      	str	r4, [r2, #0]
 80122be:	b003      	add	sp, #12
 80122c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122c4:	f7ff bb0a 	b.w	80118dc <__malloc_unlock>
 80122c8:	42a3      	cmp	r3, r4
 80122ca:	d908      	bls.n	80122de <_free_r+0x46>
 80122cc:	6825      	ldr	r5, [r4, #0]
 80122ce:	1961      	adds	r1, r4, r5
 80122d0:	428b      	cmp	r3, r1
 80122d2:	bf01      	itttt	eq
 80122d4:	6819      	ldreq	r1, [r3, #0]
 80122d6:	685b      	ldreq	r3, [r3, #4]
 80122d8:	1949      	addeq	r1, r1, r5
 80122da:	6021      	streq	r1, [r4, #0]
 80122dc:	e7ed      	b.n	80122ba <_free_r+0x22>
 80122de:	461a      	mov	r2, r3
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	b10b      	cbz	r3, 80122e8 <_free_r+0x50>
 80122e4:	42a3      	cmp	r3, r4
 80122e6:	d9fa      	bls.n	80122de <_free_r+0x46>
 80122e8:	6811      	ldr	r1, [r2, #0]
 80122ea:	1855      	adds	r5, r2, r1
 80122ec:	42a5      	cmp	r5, r4
 80122ee:	d10b      	bne.n	8012308 <_free_r+0x70>
 80122f0:	6824      	ldr	r4, [r4, #0]
 80122f2:	4421      	add	r1, r4
 80122f4:	1854      	adds	r4, r2, r1
 80122f6:	42a3      	cmp	r3, r4
 80122f8:	6011      	str	r1, [r2, #0]
 80122fa:	d1e0      	bne.n	80122be <_free_r+0x26>
 80122fc:	681c      	ldr	r4, [r3, #0]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	6053      	str	r3, [r2, #4]
 8012302:	4421      	add	r1, r4
 8012304:	6011      	str	r1, [r2, #0]
 8012306:	e7da      	b.n	80122be <_free_r+0x26>
 8012308:	d902      	bls.n	8012310 <_free_r+0x78>
 801230a:	230c      	movs	r3, #12
 801230c:	6003      	str	r3, [r0, #0]
 801230e:	e7d6      	b.n	80122be <_free_r+0x26>
 8012310:	6825      	ldr	r5, [r4, #0]
 8012312:	1961      	adds	r1, r4, r5
 8012314:	428b      	cmp	r3, r1
 8012316:	bf04      	itt	eq
 8012318:	6819      	ldreq	r1, [r3, #0]
 801231a:	685b      	ldreq	r3, [r3, #4]
 801231c:	6063      	str	r3, [r4, #4]
 801231e:	bf04      	itt	eq
 8012320:	1949      	addeq	r1, r1, r5
 8012322:	6021      	streq	r1, [r4, #0]
 8012324:	6054      	str	r4, [r2, #4]
 8012326:	e7ca      	b.n	80122be <_free_r+0x26>
 8012328:	b003      	add	sp, #12
 801232a:	bd30      	pop	{r4, r5, pc}
 801232c:	200036b8 	.word	0x200036b8

08012330 <__ssputs_r>:
 8012330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012334:	688e      	ldr	r6, [r1, #8]
 8012336:	429e      	cmp	r6, r3
 8012338:	4682      	mov	sl, r0
 801233a:	460c      	mov	r4, r1
 801233c:	4690      	mov	r8, r2
 801233e:	461f      	mov	r7, r3
 8012340:	d838      	bhi.n	80123b4 <__ssputs_r+0x84>
 8012342:	898a      	ldrh	r2, [r1, #12]
 8012344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012348:	d032      	beq.n	80123b0 <__ssputs_r+0x80>
 801234a:	6825      	ldr	r5, [r4, #0]
 801234c:	6909      	ldr	r1, [r1, #16]
 801234e:	eba5 0901 	sub.w	r9, r5, r1
 8012352:	6965      	ldr	r5, [r4, #20]
 8012354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801235c:	3301      	adds	r3, #1
 801235e:	444b      	add	r3, r9
 8012360:	106d      	asrs	r5, r5, #1
 8012362:	429d      	cmp	r5, r3
 8012364:	bf38      	it	cc
 8012366:	461d      	movcc	r5, r3
 8012368:	0553      	lsls	r3, r2, #21
 801236a:	d531      	bpl.n	80123d0 <__ssputs_r+0xa0>
 801236c:	4629      	mov	r1, r5
 801236e:	f7fc f92f 	bl	800e5d0 <_malloc_r>
 8012372:	4606      	mov	r6, r0
 8012374:	b950      	cbnz	r0, 801238c <__ssputs_r+0x5c>
 8012376:	230c      	movs	r3, #12
 8012378:	f8ca 3000 	str.w	r3, [sl]
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012382:	81a3      	strh	r3, [r4, #12]
 8012384:	f04f 30ff 	mov.w	r0, #4294967295
 8012388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801238c:	6921      	ldr	r1, [r4, #16]
 801238e:	464a      	mov	r2, r9
 8012390:	f7fc f8e7 	bl	800e562 <memcpy>
 8012394:	89a3      	ldrh	r3, [r4, #12]
 8012396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801239e:	81a3      	strh	r3, [r4, #12]
 80123a0:	6126      	str	r6, [r4, #16]
 80123a2:	6165      	str	r5, [r4, #20]
 80123a4:	444e      	add	r6, r9
 80123a6:	eba5 0509 	sub.w	r5, r5, r9
 80123aa:	6026      	str	r6, [r4, #0]
 80123ac:	60a5      	str	r5, [r4, #8]
 80123ae:	463e      	mov	r6, r7
 80123b0:	42be      	cmp	r6, r7
 80123b2:	d900      	bls.n	80123b6 <__ssputs_r+0x86>
 80123b4:	463e      	mov	r6, r7
 80123b6:	6820      	ldr	r0, [r4, #0]
 80123b8:	4632      	mov	r2, r6
 80123ba:	4641      	mov	r1, r8
 80123bc:	f000 f982 	bl	80126c4 <memmove>
 80123c0:	68a3      	ldr	r3, [r4, #8]
 80123c2:	1b9b      	subs	r3, r3, r6
 80123c4:	60a3      	str	r3, [r4, #8]
 80123c6:	6823      	ldr	r3, [r4, #0]
 80123c8:	4433      	add	r3, r6
 80123ca:	6023      	str	r3, [r4, #0]
 80123cc:	2000      	movs	r0, #0
 80123ce:	e7db      	b.n	8012388 <__ssputs_r+0x58>
 80123d0:	462a      	mov	r2, r5
 80123d2:	f000 f991 	bl	80126f8 <_realloc_r>
 80123d6:	4606      	mov	r6, r0
 80123d8:	2800      	cmp	r0, #0
 80123da:	d1e1      	bne.n	80123a0 <__ssputs_r+0x70>
 80123dc:	6921      	ldr	r1, [r4, #16]
 80123de:	4650      	mov	r0, sl
 80123e0:	f7ff ff5a 	bl	8012298 <_free_r>
 80123e4:	e7c7      	b.n	8012376 <__ssputs_r+0x46>
	...

080123e8 <_svfiprintf_r>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	4698      	mov	r8, r3
 80123ee:	898b      	ldrh	r3, [r1, #12]
 80123f0:	061b      	lsls	r3, r3, #24
 80123f2:	b09d      	sub	sp, #116	; 0x74
 80123f4:	4607      	mov	r7, r0
 80123f6:	460d      	mov	r5, r1
 80123f8:	4614      	mov	r4, r2
 80123fa:	d50e      	bpl.n	801241a <_svfiprintf_r+0x32>
 80123fc:	690b      	ldr	r3, [r1, #16]
 80123fe:	b963      	cbnz	r3, 801241a <_svfiprintf_r+0x32>
 8012400:	2140      	movs	r1, #64	; 0x40
 8012402:	f7fc f8e5 	bl	800e5d0 <_malloc_r>
 8012406:	6028      	str	r0, [r5, #0]
 8012408:	6128      	str	r0, [r5, #16]
 801240a:	b920      	cbnz	r0, 8012416 <_svfiprintf_r+0x2e>
 801240c:	230c      	movs	r3, #12
 801240e:	603b      	str	r3, [r7, #0]
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	e0d1      	b.n	80125ba <_svfiprintf_r+0x1d2>
 8012416:	2340      	movs	r3, #64	; 0x40
 8012418:	616b      	str	r3, [r5, #20]
 801241a:	2300      	movs	r3, #0
 801241c:	9309      	str	r3, [sp, #36]	; 0x24
 801241e:	2320      	movs	r3, #32
 8012420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012424:	f8cd 800c 	str.w	r8, [sp, #12]
 8012428:	2330      	movs	r3, #48	; 0x30
 801242a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80125d4 <_svfiprintf_r+0x1ec>
 801242e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012432:	f04f 0901 	mov.w	r9, #1
 8012436:	4623      	mov	r3, r4
 8012438:	469a      	mov	sl, r3
 801243a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801243e:	b10a      	cbz	r2, 8012444 <_svfiprintf_r+0x5c>
 8012440:	2a25      	cmp	r2, #37	; 0x25
 8012442:	d1f9      	bne.n	8012438 <_svfiprintf_r+0x50>
 8012444:	ebba 0b04 	subs.w	fp, sl, r4
 8012448:	d00b      	beq.n	8012462 <_svfiprintf_r+0x7a>
 801244a:	465b      	mov	r3, fp
 801244c:	4622      	mov	r2, r4
 801244e:	4629      	mov	r1, r5
 8012450:	4638      	mov	r0, r7
 8012452:	f7ff ff6d 	bl	8012330 <__ssputs_r>
 8012456:	3001      	adds	r0, #1
 8012458:	f000 80aa 	beq.w	80125b0 <_svfiprintf_r+0x1c8>
 801245c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801245e:	445a      	add	r2, fp
 8012460:	9209      	str	r2, [sp, #36]	; 0x24
 8012462:	f89a 3000 	ldrb.w	r3, [sl]
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 80a2 	beq.w	80125b0 <_svfiprintf_r+0x1c8>
 801246c:	2300      	movs	r3, #0
 801246e:	f04f 32ff 	mov.w	r2, #4294967295
 8012472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012476:	f10a 0a01 	add.w	sl, sl, #1
 801247a:	9304      	str	r3, [sp, #16]
 801247c:	9307      	str	r3, [sp, #28]
 801247e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012482:	931a      	str	r3, [sp, #104]	; 0x68
 8012484:	4654      	mov	r4, sl
 8012486:	2205      	movs	r2, #5
 8012488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801248c:	4851      	ldr	r0, [pc, #324]	; (80125d4 <_svfiprintf_r+0x1ec>)
 801248e:	f7ed fe7f 	bl	8000190 <memchr>
 8012492:	9a04      	ldr	r2, [sp, #16]
 8012494:	b9d8      	cbnz	r0, 80124ce <_svfiprintf_r+0xe6>
 8012496:	06d0      	lsls	r0, r2, #27
 8012498:	bf44      	itt	mi
 801249a:	2320      	movmi	r3, #32
 801249c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124a0:	0711      	lsls	r1, r2, #28
 80124a2:	bf44      	itt	mi
 80124a4:	232b      	movmi	r3, #43	; 0x2b
 80124a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124aa:	f89a 3000 	ldrb.w	r3, [sl]
 80124ae:	2b2a      	cmp	r3, #42	; 0x2a
 80124b0:	d015      	beq.n	80124de <_svfiprintf_r+0xf6>
 80124b2:	9a07      	ldr	r2, [sp, #28]
 80124b4:	4654      	mov	r4, sl
 80124b6:	2000      	movs	r0, #0
 80124b8:	f04f 0c0a 	mov.w	ip, #10
 80124bc:	4621      	mov	r1, r4
 80124be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124c2:	3b30      	subs	r3, #48	; 0x30
 80124c4:	2b09      	cmp	r3, #9
 80124c6:	d94e      	bls.n	8012566 <_svfiprintf_r+0x17e>
 80124c8:	b1b0      	cbz	r0, 80124f8 <_svfiprintf_r+0x110>
 80124ca:	9207      	str	r2, [sp, #28]
 80124cc:	e014      	b.n	80124f8 <_svfiprintf_r+0x110>
 80124ce:	eba0 0308 	sub.w	r3, r0, r8
 80124d2:	fa09 f303 	lsl.w	r3, r9, r3
 80124d6:	4313      	orrs	r3, r2
 80124d8:	9304      	str	r3, [sp, #16]
 80124da:	46a2      	mov	sl, r4
 80124dc:	e7d2      	b.n	8012484 <_svfiprintf_r+0x9c>
 80124de:	9b03      	ldr	r3, [sp, #12]
 80124e0:	1d19      	adds	r1, r3, #4
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	9103      	str	r1, [sp, #12]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	bfbb      	ittet	lt
 80124ea:	425b      	neglt	r3, r3
 80124ec:	f042 0202 	orrlt.w	r2, r2, #2
 80124f0:	9307      	strge	r3, [sp, #28]
 80124f2:	9307      	strlt	r3, [sp, #28]
 80124f4:	bfb8      	it	lt
 80124f6:	9204      	strlt	r2, [sp, #16]
 80124f8:	7823      	ldrb	r3, [r4, #0]
 80124fa:	2b2e      	cmp	r3, #46	; 0x2e
 80124fc:	d10c      	bne.n	8012518 <_svfiprintf_r+0x130>
 80124fe:	7863      	ldrb	r3, [r4, #1]
 8012500:	2b2a      	cmp	r3, #42	; 0x2a
 8012502:	d135      	bne.n	8012570 <_svfiprintf_r+0x188>
 8012504:	9b03      	ldr	r3, [sp, #12]
 8012506:	1d1a      	adds	r2, r3, #4
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	9203      	str	r2, [sp, #12]
 801250c:	2b00      	cmp	r3, #0
 801250e:	bfb8      	it	lt
 8012510:	f04f 33ff 	movlt.w	r3, #4294967295
 8012514:	3402      	adds	r4, #2
 8012516:	9305      	str	r3, [sp, #20]
 8012518:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80125e4 <_svfiprintf_r+0x1fc>
 801251c:	7821      	ldrb	r1, [r4, #0]
 801251e:	2203      	movs	r2, #3
 8012520:	4650      	mov	r0, sl
 8012522:	f7ed fe35 	bl	8000190 <memchr>
 8012526:	b140      	cbz	r0, 801253a <_svfiprintf_r+0x152>
 8012528:	2340      	movs	r3, #64	; 0x40
 801252a:	eba0 000a 	sub.w	r0, r0, sl
 801252e:	fa03 f000 	lsl.w	r0, r3, r0
 8012532:	9b04      	ldr	r3, [sp, #16]
 8012534:	4303      	orrs	r3, r0
 8012536:	3401      	adds	r4, #1
 8012538:	9304      	str	r3, [sp, #16]
 801253a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801253e:	4826      	ldr	r0, [pc, #152]	; (80125d8 <_svfiprintf_r+0x1f0>)
 8012540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012544:	2206      	movs	r2, #6
 8012546:	f7ed fe23 	bl	8000190 <memchr>
 801254a:	2800      	cmp	r0, #0
 801254c:	d038      	beq.n	80125c0 <_svfiprintf_r+0x1d8>
 801254e:	4b23      	ldr	r3, [pc, #140]	; (80125dc <_svfiprintf_r+0x1f4>)
 8012550:	bb1b      	cbnz	r3, 801259a <_svfiprintf_r+0x1b2>
 8012552:	9b03      	ldr	r3, [sp, #12]
 8012554:	3307      	adds	r3, #7
 8012556:	f023 0307 	bic.w	r3, r3, #7
 801255a:	3308      	adds	r3, #8
 801255c:	9303      	str	r3, [sp, #12]
 801255e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012560:	4433      	add	r3, r6
 8012562:	9309      	str	r3, [sp, #36]	; 0x24
 8012564:	e767      	b.n	8012436 <_svfiprintf_r+0x4e>
 8012566:	fb0c 3202 	mla	r2, ip, r2, r3
 801256a:	460c      	mov	r4, r1
 801256c:	2001      	movs	r0, #1
 801256e:	e7a5      	b.n	80124bc <_svfiprintf_r+0xd4>
 8012570:	2300      	movs	r3, #0
 8012572:	3401      	adds	r4, #1
 8012574:	9305      	str	r3, [sp, #20]
 8012576:	4619      	mov	r1, r3
 8012578:	f04f 0c0a 	mov.w	ip, #10
 801257c:	4620      	mov	r0, r4
 801257e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012582:	3a30      	subs	r2, #48	; 0x30
 8012584:	2a09      	cmp	r2, #9
 8012586:	d903      	bls.n	8012590 <_svfiprintf_r+0x1a8>
 8012588:	2b00      	cmp	r3, #0
 801258a:	d0c5      	beq.n	8012518 <_svfiprintf_r+0x130>
 801258c:	9105      	str	r1, [sp, #20]
 801258e:	e7c3      	b.n	8012518 <_svfiprintf_r+0x130>
 8012590:	fb0c 2101 	mla	r1, ip, r1, r2
 8012594:	4604      	mov	r4, r0
 8012596:	2301      	movs	r3, #1
 8012598:	e7f0      	b.n	801257c <_svfiprintf_r+0x194>
 801259a:	ab03      	add	r3, sp, #12
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	462a      	mov	r2, r5
 80125a0:	4b0f      	ldr	r3, [pc, #60]	; (80125e0 <_svfiprintf_r+0x1f8>)
 80125a2:	a904      	add	r1, sp, #16
 80125a4:	4638      	mov	r0, r7
 80125a6:	f7fc f927 	bl	800e7f8 <_printf_float>
 80125aa:	1c42      	adds	r2, r0, #1
 80125ac:	4606      	mov	r6, r0
 80125ae:	d1d6      	bne.n	801255e <_svfiprintf_r+0x176>
 80125b0:	89ab      	ldrh	r3, [r5, #12]
 80125b2:	065b      	lsls	r3, r3, #25
 80125b4:	f53f af2c 	bmi.w	8012410 <_svfiprintf_r+0x28>
 80125b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125ba:	b01d      	add	sp, #116	; 0x74
 80125bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c0:	ab03      	add	r3, sp, #12
 80125c2:	9300      	str	r3, [sp, #0]
 80125c4:	462a      	mov	r2, r5
 80125c6:	4b06      	ldr	r3, [pc, #24]	; (80125e0 <_svfiprintf_r+0x1f8>)
 80125c8:	a904      	add	r1, sp, #16
 80125ca:	4638      	mov	r0, r7
 80125cc:	f7fc fbb8 	bl	800ed40 <_printf_i>
 80125d0:	e7eb      	b.n	80125aa <_svfiprintf_r+0x1c2>
 80125d2:	bf00      	nop
 80125d4:	0801636c 	.word	0x0801636c
 80125d8:	08016376 	.word	0x08016376
 80125dc:	0800e7f9 	.word	0x0800e7f9
 80125e0:	08012331 	.word	0x08012331
 80125e4:	08016372 	.word	0x08016372

080125e8 <_read_r>:
 80125e8:	b538      	push	{r3, r4, r5, lr}
 80125ea:	4d07      	ldr	r5, [pc, #28]	; (8012608 <_read_r+0x20>)
 80125ec:	4604      	mov	r4, r0
 80125ee:	4608      	mov	r0, r1
 80125f0:	4611      	mov	r1, r2
 80125f2:	2200      	movs	r2, #0
 80125f4:	602a      	str	r2, [r5, #0]
 80125f6:	461a      	mov	r2, r3
 80125f8:	f7f3 fbfc 	bl	8005df4 <_read>
 80125fc:	1c43      	adds	r3, r0, #1
 80125fe:	d102      	bne.n	8012606 <_read_r+0x1e>
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	b103      	cbz	r3, 8012606 <_read_r+0x1e>
 8012604:	6023      	str	r3, [r4, #0]
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	200036c0 	.word	0x200036c0
 801260c:	00000000 	.word	0x00000000

08012610 <nan>:
 8012610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012618 <nan+0x8>
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	00000000 	.word	0x00000000
 801261c:	7ff80000 	.word	0x7ff80000

08012620 <strncmp>:
 8012620:	b510      	push	{r4, lr}
 8012622:	b17a      	cbz	r2, 8012644 <strncmp+0x24>
 8012624:	4603      	mov	r3, r0
 8012626:	3901      	subs	r1, #1
 8012628:	1884      	adds	r4, r0, r2
 801262a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801262e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012632:	4290      	cmp	r0, r2
 8012634:	d101      	bne.n	801263a <strncmp+0x1a>
 8012636:	42a3      	cmp	r3, r4
 8012638:	d101      	bne.n	801263e <strncmp+0x1e>
 801263a:	1a80      	subs	r0, r0, r2
 801263c:	bd10      	pop	{r4, pc}
 801263e:	2800      	cmp	r0, #0
 8012640:	d1f3      	bne.n	801262a <strncmp+0xa>
 8012642:	e7fa      	b.n	801263a <strncmp+0x1a>
 8012644:	4610      	mov	r0, r2
 8012646:	e7f9      	b.n	801263c <strncmp+0x1c>

08012648 <__ascii_wctomb>:
 8012648:	b149      	cbz	r1, 801265e <__ascii_wctomb+0x16>
 801264a:	2aff      	cmp	r2, #255	; 0xff
 801264c:	bf85      	ittet	hi
 801264e:	238a      	movhi	r3, #138	; 0x8a
 8012650:	6003      	strhi	r3, [r0, #0]
 8012652:	700a      	strbls	r2, [r1, #0]
 8012654:	f04f 30ff 	movhi.w	r0, #4294967295
 8012658:	bf98      	it	ls
 801265a:	2001      	movls	r0, #1
 801265c:	4770      	bx	lr
 801265e:	4608      	mov	r0, r1
 8012660:	4770      	bx	lr
	...

08012664 <__assert_func>:
 8012664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012666:	4614      	mov	r4, r2
 8012668:	461a      	mov	r2, r3
 801266a:	4b09      	ldr	r3, [pc, #36]	; (8012690 <__assert_func+0x2c>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4605      	mov	r5, r0
 8012670:	68d8      	ldr	r0, [r3, #12]
 8012672:	b14c      	cbz	r4, 8012688 <__assert_func+0x24>
 8012674:	4b07      	ldr	r3, [pc, #28]	; (8012694 <__assert_func+0x30>)
 8012676:	9100      	str	r1, [sp, #0]
 8012678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801267c:	4906      	ldr	r1, [pc, #24]	; (8012698 <__assert_func+0x34>)
 801267e:	462b      	mov	r3, r5
 8012680:	f000 f80e 	bl	80126a0 <fiprintf>
 8012684:	f000 fa80 	bl	8012b88 <abort>
 8012688:	4b04      	ldr	r3, [pc, #16]	; (801269c <__assert_func+0x38>)
 801268a:	461c      	mov	r4, r3
 801268c:	e7f3      	b.n	8012676 <__assert_func+0x12>
 801268e:	bf00      	nop
 8012690:	200000b4 	.word	0x200000b4
 8012694:	0801637d 	.word	0x0801637d
 8012698:	0801638a 	.word	0x0801638a
 801269c:	080163b8 	.word	0x080163b8

080126a0 <fiprintf>:
 80126a0:	b40e      	push	{r1, r2, r3}
 80126a2:	b503      	push	{r0, r1, lr}
 80126a4:	4601      	mov	r1, r0
 80126a6:	ab03      	add	r3, sp, #12
 80126a8:	4805      	ldr	r0, [pc, #20]	; (80126c0 <fiprintf+0x20>)
 80126aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	f000 f879 	bl	80127a8 <_vfiprintf_r>
 80126b6:	b002      	add	sp, #8
 80126b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126bc:	b003      	add	sp, #12
 80126be:	4770      	bx	lr
 80126c0:	200000b4 	.word	0x200000b4

080126c4 <memmove>:
 80126c4:	4288      	cmp	r0, r1
 80126c6:	b510      	push	{r4, lr}
 80126c8:	eb01 0402 	add.w	r4, r1, r2
 80126cc:	d902      	bls.n	80126d4 <memmove+0x10>
 80126ce:	4284      	cmp	r4, r0
 80126d0:	4623      	mov	r3, r4
 80126d2:	d807      	bhi.n	80126e4 <memmove+0x20>
 80126d4:	1e43      	subs	r3, r0, #1
 80126d6:	42a1      	cmp	r1, r4
 80126d8:	d008      	beq.n	80126ec <memmove+0x28>
 80126da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126e2:	e7f8      	b.n	80126d6 <memmove+0x12>
 80126e4:	4402      	add	r2, r0
 80126e6:	4601      	mov	r1, r0
 80126e8:	428a      	cmp	r2, r1
 80126ea:	d100      	bne.n	80126ee <memmove+0x2a>
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80126f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80126f6:	e7f7      	b.n	80126e8 <memmove+0x24>

080126f8 <_realloc_r>:
 80126f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126fc:	4680      	mov	r8, r0
 80126fe:	4614      	mov	r4, r2
 8012700:	460e      	mov	r6, r1
 8012702:	b921      	cbnz	r1, 801270e <_realloc_r+0x16>
 8012704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012708:	4611      	mov	r1, r2
 801270a:	f7fb bf61 	b.w	800e5d0 <_malloc_r>
 801270e:	b92a      	cbnz	r2, 801271c <_realloc_r+0x24>
 8012710:	f7ff fdc2 	bl	8012298 <_free_r>
 8012714:	4625      	mov	r5, r4
 8012716:	4628      	mov	r0, r5
 8012718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801271c:	f000 faa0 	bl	8012c60 <_malloc_usable_size_r>
 8012720:	4284      	cmp	r4, r0
 8012722:	4607      	mov	r7, r0
 8012724:	d802      	bhi.n	801272c <_realloc_r+0x34>
 8012726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801272a:	d812      	bhi.n	8012752 <_realloc_r+0x5a>
 801272c:	4621      	mov	r1, r4
 801272e:	4640      	mov	r0, r8
 8012730:	f7fb ff4e 	bl	800e5d0 <_malloc_r>
 8012734:	4605      	mov	r5, r0
 8012736:	2800      	cmp	r0, #0
 8012738:	d0ed      	beq.n	8012716 <_realloc_r+0x1e>
 801273a:	42bc      	cmp	r4, r7
 801273c:	4622      	mov	r2, r4
 801273e:	4631      	mov	r1, r6
 8012740:	bf28      	it	cs
 8012742:	463a      	movcs	r2, r7
 8012744:	f7fb ff0d 	bl	800e562 <memcpy>
 8012748:	4631      	mov	r1, r6
 801274a:	4640      	mov	r0, r8
 801274c:	f7ff fda4 	bl	8012298 <_free_r>
 8012750:	e7e1      	b.n	8012716 <_realloc_r+0x1e>
 8012752:	4635      	mov	r5, r6
 8012754:	e7df      	b.n	8012716 <_realloc_r+0x1e>

08012756 <__sfputc_r>:
 8012756:	6893      	ldr	r3, [r2, #8]
 8012758:	3b01      	subs	r3, #1
 801275a:	2b00      	cmp	r3, #0
 801275c:	b410      	push	{r4}
 801275e:	6093      	str	r3, [r2, #8]
 8012760:	da08      	bge.n	8012774 <__sfputc_r+0x1e>
 8012762:	6994      	ldr	r4, [r2, #24]
 8012764:	42a3      	cmp	r3, r4
 8012766:	db01      	blt.n	801276c <__sfputc_r+0x16>
 8012768:	290a      	cmp	r1, #10
 801276a:	d103      	bne.n	8012774 <__sfputc_r+0x1e>
 801276c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012770:	f000 b94a 	b.w	8012a08 <__swbuf_r>
 8012774:	6813      	ldr	r3, [r2, #0]
 8012776:	1c58      	adds	r0, r3, #1
 8012778:	6010      	str	r0, [r2, #0]
 801277a:	7019      	strb	r1, [r3, #0]
 801277c:	4608      	mov	r0, r1
 801277e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012782:	4770      	bx	lr

08012784 <__sfputs_r>:
 8012784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012786:	4606      	mov	r6, r0
 8012788:	460f      	mov	r7, r1
 801278a:	4614      	mov	r4, r2
 801278c:	18d5      	adds	r5, r2, r3
 801278e:	42ac      	cmp	r4, r5
 8012790:	d101      	bne.n	8012796 <__sfputs_r+0x12>
 8012792:	2000      	movs	r0, #0
 8012794:	e007      	b.n	80127a6 <__sfputs_r+0x22>
 8012796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801279a:	463a      	mov	r2, r7
 801279c:	4630      	mov	r0, r6
 801279e:	f7ff ffda 	bl	8012756 <__sfputc_r>
 80127a2:	1c43      	adds	r3, r0, #1
 80127a4:	d1f3      	bne.n	801278e <__sfputs_r+0xa>
 80127a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127a8 <_vfiprintf_r>:
 80127a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ac:	460d      	mov	r5, r1
 80127ae:	b09d      	sub	sp, #116	; 0x74
 80127b0:	4614      	mov	r4, r2
 80127b2:	4698      	mov	r8, r3
 80127b4:	4606      	mov	r6, r0
 80127b6:	b118      	cbz	r0, 80127c0 <_vfiprintf_r+0x18>
 80127b8:	6983      	ldr	r3, [r0, #24]
 80127ba:	b90b      	cbnz	r3, 80127c0 <_vfiprintf_r+0x18>
 80127bc:	f7fb fe0c 	bl	800e3d8 <__sinit>
 80127c0:	4b89      	ldr	r3, [pc, #548]	; (80129e8 <_vfiprintf_r+0x240>)
 80127c2:	429d      	cmp	r5, r3
 80127c4:	d11b      	bne.n	80127fe <_vfiprintf_r+0x56>
 80127c6:	6875      	ldr	r5, [r6, #4]
 80127c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127ca:	07d9      	lsls	r1, r3, #31
 80127cc:	d405      	bmi.n	80127da <_vfiprintf_r+0x32>
 80127ce:	89ab      	ldrh	r3, [r5, #12]
 80127d0:	059a      	lsls	r2, r3, #22
 80127d2:	d402      	bmi.n	80127da <_vfiprintf_r+0x32>
 80127d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127d6:	f7fb fec2 	bl	800e55e <__retarget_lock_acquire_recursive>
 80127da:	89ab      	ldrh	r3, [r5, #12]
 80127dc:	071b      	lsls	r3, r3, #28
 80127de:	d501      	bpl.n	80127e4 <_vfiprintf_r+0x3c>
 80127e0:	692b      	ldr	r3, [r5, #16]
 80127e2:	b9eb      	cbnz	r3, 8012820 <_vfiprintf_r+0x78>
 80127e4:	4629      	mov	r1, r5
 80127e6:	4630      	mov	r0, r6
 80127e8:	f000 f960 	bl	8012aac <__swsetup_r>
 80127ec:	b1c0      	cbz	r0, 8012820 <_vfiprintf_r+0x78>
 80127ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127f0:	07dc      	lsls	r4, r3, #31
 80127f2:	d50e      	bpl.n	8012812 <_vfiprintf_r+0x6a>
 80127f4:	f04f 30ff 	mov.w	r0, #4294967295
 80127f8:	b01d      	add	sp, #116	; 0x74
 80127fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127fe:	4b7b      	ldr	r3, [pc, #492]	; (80129ec <_vfiprintf_r+0x244>)
 8012800:	429d      	cmp	r5, r3
 8012802:	d101      	bne.n	8012808 <_vfiprintf_r+0x60>
 8012804:	68b5      	ldr	r5, [r6, #8]
 8012806:	e7df      	b.n	80127c8 <_vfiprintf_r+0x20>
 8012808:	4b79      	ldr	r3, [pc, #484]	; (80129f0 <_vfiprintf_r+0x248>)
 801280a:	429d      	cmp	r5, r3
 801280c:	bf08      	it	eq
 801280e:	68f5      	ldreq	r5, [r6, #12]
 8012810:	e7da      	b.n	80127c8 <_vfiprintf_r+0x20>
 8012812:	89ab      	ldrh	r3, [r5, #12]
 8012814:	0598      	lsls	r0, r3, #22
 8012816:	d4ed      	bmi.n	80127f4 <_vfiprintf_r+0x4c>
 8012818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801281a:	f7fb fea1 	bl	800e560 <__retarget_lock_release_recursive>
 801281e:	e7e9      	b.n	80127f4 <_vfiprintf_r+0x4c>
 8012820:	2300      	movs	r3, #0
 8012822:	9309      	str	r3, [sp, #36]	; 0x24
 8012824:	2320      	movs	r3, #32
 8012826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801282a:	f8cd 800c 	str.w	r8, [sp, #12]
 801282e:	2330      	movs	r3, #48	; 0x30
 8012830:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80129f4 <_vfiprintf_r+0x24c>
 8012834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012838:	f04f 0901 	mov.w	r9, #1
 801283c:	4623      	mov	r3, r4
 801283e:	469a      	mov	sl, r3
 8012840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012844:	b10a      	cbz	r2, 801284a <_vfiprintf_r+0xa2>
 8012846:	2a25      	cmp	r2, #37	; 0x25
 8012848:	d1f9      	bne.n	801283e <_vfiprintf_r+0x96>
 801284a:	ebba 0b04 	subs.w	fp, sl, r4
 801284e:	d00b      	beq.n	8012868 <_vfiprintf_r+0xc0>
 8012850:	465b      	mov	r3, fp
 8012852:	4622      	mov	r2, r4
 8012854:	4629      	mov	r1, r5
 8012856:	4630      	mov	r0, r6
 8012858:	f7ff ff94 	bl	8012784 <__sfputs_r>
 801285c:	3001      	adds	r0, #1
 801285e:	f000 80aa 	beq.w	80129b6 <_vfiprintf_r+0x20e>
 8012862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012864:	445a      	add	r2, fp
 8012866:	9209      	str	r2, [sp, #36]	; 0x24
 8012868:	f89a 3000 	ldrb.w	r3, [sl]
 801286c:	2b00      	cmp	r3, #0
 801286e:	f000 80a2 	beq.w	80129b6 <_vfiprintf_r+0x20e>
 8012872:	2300      	movs	r3, #0
 8012874:	f04f 32ff 	mov.w	r2, #4294967295
 8012878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801287c:	f10a 0a01 	add.w	sl, sl, #1
 8012880:	9304      	str	r3, [sp, #16]
 8012882:	9307      	str	r3, [sp, #28]
 8012884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012888:	931a      	str	r3, [sp, #104]	; 0x68
 801288a:	4654      	mov	r4, sl
 801288c:	2205      	movs	r2, #5
 801288e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012892:	4858      	ldr	r0, [pc, #352]	; (80129f4 <_vfiprintf_r+0x24c>)
 8012894:	f7ed fc7c 	bl	8000190 <memchr>
 8012898:	9a04      	ldr	r2, [sp, #16]
 801289a:	b9d8      	cbnz	r0, 80128d4 <_vfiprintf_r+0x12c>
 801289c:	06d1      	lsls	r1, r2, #27
 801289e:	bf44      	itt	mi
 80128a0:	2320      	movmi	r3, #32
 80128a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128a6:	0713      	lsls	r3, r2, #28
 80128a8:	bf44      	itt	mi
 80128aa:	232b      	movmi	r3, #43	; 0x2b
 80128ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128b0:	f89a 3000 	ldrb.w	r3, [sl]
 80128b4:	2b2a      	cmp	r3, #42	; 0x2a
 80128b6:	d015      	beq.n	80128e4 <_vfiprintf_r+0x13c>
 80128b8:	9a07      	ldr	r2, [sp, #28]
 80128ba:	4654      	mov	r4, sl
 80128bc:	2000      	movs	r0, #0
 80128be:	f04f 0c0a 	mov.w	ip, #10
 80128c2:	4621      	mov	r1, r4
 80128c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128c8:	3b30      	subs	r3, #48	; 0x30
 80128ca:	2b09      	cmp	r3, #9
 80128cc:	d94e      	bls.n	801296c <_vfiprintf_r+0x1c4>
 80128ce:	b1b0      	cbz	r0, 80128fe <_vfiprintf_r+0x156>
 80128d0:	9207      	str	r2, [sp, #28]
 80128d2:	e014      	b.n	80128fe <_vfiprintf_r+0x156>
 80128d4:	eba0 0308 	sub.w	r3, r0, r8
 80128d8:	fa09 f303 	lsl.w	r3, r9, r3
 80128dc:	4313      	orrs	r3, r2
 80128de:	9304      	str	r3, [sp, #16]
 80128e0:	46a2      	mov	sl, r4
 80128e2:	e7d2      	b.n	801288a <_vfiprintf_r+0xe2>
 80128e4:	9b03      	ldr	r3, [sp, #12]
 80128e6:	1d19      	adds	r1, r3, #4
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	9103      	str	r1, [sp, #12]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	bfbb      	ittet	lt
 80128f0:	425b      	neglt	r3, r3
 80128f2:	f042 0202 	orrlt.w	r2, r2, #2
 80128f6:	9307      	strge	r3, [sp, #28]
 80128f8:	9307      	strlt	r3, [sp, #28]
 80128fa:	bfb8      	it	lt
 80128fc:	9204      	strlt	r2, [sp, #16]
 80128fe:	7823      	ldrb	r3, [r4, #0]
 8012900:	2b2e      	cmp	r3, #46	; 0x2e
 8012902:	d10c      	bne.n	801291e <_vfiprintf_r+0x176>
 8012904:	7863      	ldrb	r3, [r4, #1]
 8012906:	2b2a      	cmp	r3, #42	; 0x2a
 8012908:	d135      	bne.n	8012976 <_vfiprintf_r+0x1ce>
 801290a:	9b03      	ldr	r3, [sp, #12]
 801290c:	1d1a      	adds	r2, r3, #4
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	9203      	str	r2, [sp, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	bfb8      	it	lt
 8012916:	f04f 33ff 	movlt.w	r3, #4294967295
 801291a:	3402      	adds	r4, #2
 801291c:	9305      	str	r3, [sp, #20]
 801291e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012a04 <_vfiprintf_r+0x25c>
 8012922:	7821      	ldrb	r1, [r4, #0]
 8012924:	2203      	movs	r2, #3
 8012926:	4650      	mov	r0, sl
 8012928:	f7ed fc32 	bl	8000190 <memchr>
 801292c:	b140      	cbz	r0, 8012940 <_vfiprintf_r+0x198>
 801292e:	2340      	movs	r3, #64	; 0x40
 8012930:	eba0 000a 	sub.w	r0, r0, sl
 8012934:	fa03 f000 	lsl.w	r0, r3, r0
 8012938:	9b04      	ldr	r3, [sp, #16]
 801293a:	4303      	orrs	r3, r0
 801293c:	3401      	adds	r4, #1
 801293e:	9304      	str	r3, [sp, #16]
 8012940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012944:	482c      	ldr	r0, [pc, #176]	; (80129f8 <_vfiprintf_r+0x250>)
 8012946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801294a:	2206      	movs	r2, #6
 801294c:	f7ed fc20 	bl	8000190 <memchr>
 8012950:	2800      	cmp	r0, #0
 8012952:	d03f      	beq.n	80129d4 <_vfiprintf_r+0x22c>
 8012954:	4b29      	ldr	r3, [pc, #164]	; (80129fc <_vfiprintf_r+0x254>)
 8012956:	bb1b      	cbnz	r3, 80129a0 <_vfiprintf_r+0x1f8>
 8012958:	9b03      	ldr	r3, [sp, #12]
 801295a:	3307      	adds	r3, #7
 801295c:	f023 0307 	bic.w	r3, r3, #7
 8012960:	3308      	adds	r3, #8
 8012962:	9303      	str	r3, [sp, #12]
 8012964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012966:	443b      	add	r3, r7
 8012968:	9309      	str	r3, [sp, #36]	; 0x24
 801296a:	e767      	b.n	801283c <_vfiprintf_r+0x94>
 801296c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012970:	460c      	mov	r4, r1
 8012972:	2001      	movs	r0, #1
 8012974:	e7a5      	b.n	80128c2 <_vfiprintf_r+0x11a>
 8012976:	2300      	movs	r3, #0
 8012978:	3401      	adds	r4, #1
 801297a:	9305      	str	r3, [sp, #20]
 801297c:	4619      	mov	r1, r3
 801297e:	f04f 0c0a 	mov.w	ip, #10
 8012982:	4620      	mov	r0, r4
 8012984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012988:	3a30      	subs	r2, #48	; 0x30
 801298a:	2a09      	cmp	r2, #9
 801298c:	d903      	bls.n	8012996 <_vfiprintf_r+0x1ee>
 801298e:	2b00      	cmp	r3, #0
 8012990:	d0c5      	beq.n	801291e <_vfiprintf_r+0x176>
 8012992:	9105      	str	r1, [sp, #20]
 8012994:	e7c3      	b.n	801291e <_vfiprintf_r+0x176>
 8012996:	fb0c 2101 	mla	r1, ip, r1, r2
 801299a:	4604      	mov	r4, r0
 801299c:	2301      	movs	r3, #1
 801299e:	e7f0      	b.n	8012982 <_vfiprintf_r+0x1da>
 80129a0:	ab03      	add	r3, sp, #12
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	462a      	mov	r2, r5
 80129a6:	4b16      	ldr	r3, [pc, #88]	; (8012a00 <_vfiprintf_r+0x258>)
 80129a8:	a904      	add	r1, sp, #16
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7fb ff24 	bl	800e7f8 <_printf_float>
 80129b0:	4607      	mov	r7, r0
 80129b2:	1c78      	adds	r0, r7, #1
 80129b4:	d1d6      	bne.n	8012964 <_vfiprintf_r+0x1bc>
 80129b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129b8:	07d9      	lsls	r1, r3, #31
 80129ba:	d405      	bmi.n	80129c8 <_vfiprintf_r+0x220>
 80129bc:	89ab      	ldrh	r3, [r5, #12]
 80129be:	059a      	lsls	r2, r3, #22
 80129c0:	d402      	bmi.n	80129c8 <_vfiprintf_r+0x220>
 80129c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129c4:	f7fb fdcc 	bl	800e560 <__retarget_lock_release_recursive>
 80129c8:	89ab      	ldrh	r3, [r5, #12]
 80129ca:	065b      	lsls	r3, r3, #25
 80129cc:	f53f af12 	bmi.w	80127f4 <_vfiprintf_r+0x4c>
 80129d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129d2:	e711      	b.n	80127f8 <_vfiprintf_r+0x50>
 80129d4:	ab03      	add	r3, sp, #12
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	462a      	mov	r2, r5
 80129da:	4b09      	ldr	r3, [pc, #36]	; (8012a00 <_vfiprintf_r+0x258>)
 80129dc:	a904      	add	r1, sp, #16
 80129de:	4630      	mov	r0, r6
 80129e0:	f7fc f9ae 	bl	800ed40 <_printf_i>
 80129e4:	e7e4      	b.n	80129b0 <_vfiprintf_r+0x208>
 80129e6:	bf00      	nop
 80129e8:	08015f38 	.word	0x08015f38
 80129ec:	08015f58 	.word	0x08015f58
 80129f0:	08015f18 	.word	0x08015f18
 80129f4:	0801636c 	.word	0x0801636c
 80129f8:	08016376 	.word	0x08016376
 80129fc:	0800e7f9 	.word	0x0800e7f9
 8012a00:	08012785 	.word	0x08012785
 8012a04:	08016372 	.word	0x08016372

08012a08 <__swbuf_r>:
 8012a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0a:	460e      	mov	r6, r1
 8012a0c:	4614      	mov	r4, r2
 8012a0e:	4605      	mov	r5, r0
 8012a10:	b118      	cbz	r0, 8012a1a <__swbuf_r+0x12>
 8012a12:	6983      	ldr	r3, [r0, #24]
 8012a14:	b90b      	cbnz	r3, 8012a1a <__swbuf_r+0x12>
 8012a16:	f7fb fcdf 	bl	800e3d8 <__sinit>
 8012a1a:	4b21      	ldr	r3, [pc, #132]	; (8012aa0 <__swbuf_r+0x98>)
 8012a1c:	429c      	cmp	r4, r3
 8012a1e:	d12b      	bne.n	8012a78 <__swbuf_r+0x70>
 8012a20:	686c      	ldr	r4, [r5, #4]
 8012a22:	69a3      	ldr	r3, [r4, #24]
 8012a24:	60a3      	str	r3, [r4, #8]
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	071a      	lsls	r2, r3, #28
 8012a2a:	d52f      	bpl.n	8012a8c <__swbuf_r+0x84>
 8012a2c:	6923      	ldr	r3, [r4, #16]
 8012a2e:	b36b      	cbz	r3, 8012a8c <__swbuf_r+0x84>
 8012a30:	6923      	ldr	r3, [r4, #16]
 8012a32:	6820      	ldr	r0, [r4, #0]
 8012a34:	1ac0      	subs	r0, r0, r3
 8012a36:	6963      	ldr	r3, [r4, #20]
 8012a38:	b2f6      	uxtb	r6, r6
 8012a3a:	4283      	cmp	r3, r0
 8012a3c:	4637      	mov	r7, r6
 8012a3e:	dc04      	bgt.n	8012a4a <__swbuf_r+0x42>
 8012a40:	4621      	mov	r1, r4
 8012a42:	4628      	mov	r0, r5
 8012a44:	f7fe fb68 	bl	8011118 <_fflush_r>
 8012a48:	bb30      	cbnz	r0, 8012a98 <__swbuf_r+0x90>
 8012a4a:	68a3      	ldr	r3, [r4, #8]
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	60a3      	str	r3, [r4, #8]
 8012a50:	6823      	ldr	r3, [r4, #0]
 8012a52:	1c5a      	adds	r2, r3, #1
 8012a54:	6022      	str	r2, [r4, #0]
 8012a56:	701e      	strb	r6, [r3, #0]
 8012a58:	6963      	ldr	r3, [r4, #20]
 8012a5a:	3001      	adds	r0, #1
 8012a5c:	4283      	cmp	r3, r0
 8012a5e:	d004      	beq.n	8012a6a <__swbuf_r+0x62>
 8012a60:	89a3      	ldrh	r3, [r4, #12]
 8012a62:	07db      	lsls	r3, r3, #31
 8012a64:	d506      	bpl.n	8012a74 <__swbuf_r+0x6c>
 8012a66:	2e0a      	cmp	r6, #10
 8012a68:	d104      	bne.n	8012a74 <__swbuf_r+0x6c>
 8012a6a:	4621      	mov	r1, r4
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	f7fe fb53 	bl	8011118 <_fflush_r>
 8012a72:	b988      	cbnz	r0, 8012a98 <__swbuf_r+0x90>
 8012a74:	4638      	mov	r0, r7
 8012a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a78:	4b0a      	ldr	r3, [pc, #40]	; (8012aa4 <__swbuf_r+0x9c>)
 8012a7a:	429c      	cmp	r4, r3
 8012a7c:	d101      	bne.n	8012a82 <__swbuf_r+0x7a>
 8012a7e:	68ac      	ldr	r4, [r5, #8]
 8012a80:	e7cf      	b.n	8012a22 <__swbuf_r+0x1a>
 8012a82:	4b09      	ldr	r3, [pc, #36]	; (8012aa8 <__swbuf_r+0xa0>)
 8012a84:	429c      	cmp	r4, r3
 8012a86:	bf08      	it	eq
 8012a88:	68ec      	ldreq	r4, [r5, #12]
 8012a8a:	e7ca      	b.n	8012a22 <__swbuf_r+0x1a>
 8012a8c:	4621      	mov	r1, r4
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f000 f80c 	bl	8012aac <__swsetup_r>
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d0cb      	beq.n	8012a30 <__swbuf_r+0x28>
 8012a98:	f04f 37ff 	mov.w	r7, #4294967295
 8012a9c:	e7ea      	b.n	8012a74 <__swbuf_r+0x6c>
 8012a9e:	bf00      	nop
 8012aa0:	08015f38 	.word	0x08015f38
 8012aa4:	08015f58 	.word	0x08015f58
 8012aa8:	08015f18 	.word	0x08015f18

08012aac <__swsetup_r>:
 8012aac:	4b32      	ldr	r3, [pc, #200]	; (8012b78 <__swsetup_r+0xcc>)
 8012aae:	b570      	push	{r4, r5, r6, lr}
 8012ab0:	681d      	ldr	r5, [r3, #0]
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	b125      	cbz	r5, 8012ac2 <__swsetup_r+0x16>
 8012ab8:	69ab      	ldr	r3, [r5, #24]
 8012aba:	b913      	cbnz	r3, 8012ac2 <__swsetup_r+0x16>
 8012abc:	4628      	mov	r0, r5
 8012abe:	f7fb fc8b 	bl	800e3d8 <__sinit>
 8012ac2:	4b2e      	ldr	r3, [pc, #184]	; (8012b7c <__swsetup_r+0xd0>)
 8012ac4:	429c      	cmp	r4, r3
 8012ac6:	d10f      	bne.n	8012ae8 <__swsetup_r+0x3c>
 8012ac8:	686c      	ldr	r4, [r5, #4]
 8012aca:	89a3      	ldrh	r3, [r4, #12]
 8012acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ad0:	0719      	lsls	r1, r3, #28
 8012ad2:	d42c      	bmi.n	8012b2e <__swsetup_r+0x82>
 8012ad4:	06dd      	lsls	r5, r3, #27
 8012ad6:	d411      	bmi.n	8012afc <__swsetup_r+0x50>
 8012ad8:	2309      	movs	r3, #9
 8012ada:	6033      	str	r3, [r6, #0]
 8012adc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ae0:	81a3      	strh	r3, [r4, #12]
 8012ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae6:	e03e      	b.n	8012b66 <__swsetup_r+0xba>
 8012ae8:	4b25      	ldr	r3, [pc, #148]	; (8012b80 <__swsetup_r+0xd4>)
 8012aea:	429c      	cmp	r4, r3
 8012aec:	d101      	bne.n	8012af2 <__swsetup_r+0x46>
 8012aee:	68ac      	ldr	r4, [r5, #8]
 8012af0:	e7eb      	b.n	8012aca <__swsetup_r+0x1e>
 8012af2:	4b24      	ldr	r3, [pc, #144]	; (8012b84 <__swsetup_r+0xd8>)
 8012af4:	429c      	cmp	r4, r3
 8012af6:	bf08      	it	eq
 8012af8:	68ec      	ldreq	r4, [r5, #12]
 8012afa:	e7e6      	b.n	8012aca <__swsetup_r+0x1e>
 8012afc:	0758      	lsls	r0, r3, #29
 8012afe:	d512      	bpl.n	8012b26 <__swsetup_r+0x7a>
 8012b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b02:	b141      	cbz	r1, 8012b16 <__swsetup_r+0x6a>
 8012b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b08:	4299      	cmp	r1, r3
 8012b0a:	d002      	beq.n	8012b12 <__swsetup_r+0x66>
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f7ff fbc3 	bl	8012298 <_free_r>
 8012b12:	2300      	movs	r3, #0
 8012b14:	6363      	str	r3, [r4, #52]	; 0x34
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b1c:	81a3      	strh	r3, [r4, #12]
 8012b1e:	2300      	movs	r3, #0
 8012b20:	6063      	str	r3, [r4, #4]
 8012b22:	6923      	ldr	r3, [r4, #16]
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	89a3      	ldrh	r3, [r4, #12]
 8012b28:	f043 0308 	orr.w	r3, r3, #8
 8012b2c:	81a3      	strh	r3, [r4, #12]
 8012b2e:	6923      	ldr	r3, [r4, #16]
 8012b30:	b94b      	cbnz	r3, 8012b46 <__swsetup_r+0x9a>
 8012b32:	89a3      	ldrh	r3, [r4, #12]
 8012b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b3c:	d003      	beq.n	8012b46 <__swsetup_r+0x9a>
 8012b3e:	4621      	mov	r1, r4
 8012b40:	4630      	mov	r0, r6
 8012b42:	f000 f84d 	bl	8012be0 <__smakebuf_r>
 8012b46:	89a0      	ldrh	r0, [r4, #12]
 8012b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b4c:	f010 0301 	ands.w	r3, r0, #1
 8012b50:	d00a      	beq.n	8012b68 <__swsetup_r+0xbc>
 8012b52:	2300      	movs	r3, #0
 8012b54:	60a3      	str	r3, [r4, #8]
 8012b56:	6963      	ldr	r3, [r4, #20]
 8012b58:	425b      	negs	r3, r3
 8012b5a:	61a3      	str	r3, [r4, #24]
 8012b5c:	6923      	ldr	r3, [r4, #16]
 8012b5e:	b943      	cbnz	r3, 8012b72 <__swsetup_r+0xc6>
 8012b60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b64:	d1ba      	bne.n	8012adc <__swsetup_r+0x30>
 8012b66:	bd70      	pop	{r4, r5, r6, pc}
 8012b68:	0781      	lsls	r1, r0, #30
 8012b6a:	bf58      	it	pl
 8012b6c:	6963      	ldrpl	r3, [r4, #20]
 8012b6e:	60a3      	str	r3, [r4, #8]
 8012b70:	e7f4      	b.n	8012b5c <__swsetup_r+0xb0>
 8012b72:	2000      	movs	r0, #0
 8012b74:	e7f7      	b.n	8012b66 <__swsetup_r+0xba>
 8012b76:	bf00      	nop
 8012b78:	200000b4 	.word	0x200000b4
 8012b7c:	08015f38 	.word	0x08015f38
 8012b80:	08015f58 	.word	0x08015f58
 8012b84:	08015f18 	.word	0x08015f18

08012b88 <abort>:
 8012b88:	b508      	push	{r3, lr}
 8012b8a:	2006      	movs	r0, #6
 8012b8c:	f000 f898 	bl	8012cc0 <raise>
 8012b90:	2001      	movs	r0, #1
 8012b92:	f7f3 f925 	bl	8005de0 <_exit>

08012b96 <__swhatbuf_r>:
 8012b96:	b570      	push	{r4, r5, r6, lr}
 8012b98:	460e      	mov	r6, r1
 8012b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b9e:	2900      	cmp	r1, #0
 8012ba0:	b096      	sub	sp, #88	; 0x58
 8012ba2:	4614      	mov	r4, r2
 8012ba4:	461d      	mov	r5, r3
 8012ba6:	da08      	bge.n	8012bba <__swhatbuf_r+0x24>
 8012ba8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012bac:	2200      	movs	r2, #0
 8012bae:	602a      	str	r2, [r5, #0]
 8012bb0:	061a      	lsls	r2, r3, #24
 8012bb2:	d410      	bmi.n	8012bd6 <__swhatbuf_r+0x40>
 8012bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bb8:	e00e      	b.n	8012bd8 <__swhatbuf_r+0x42>
 8012bba:	466a      	mov	r2, sp
 8012bbc:	f000 f89c 	bl	8012cf8 <_fstat_r>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	dbf1      	blt.n	8012ba8 <__swhatbuf_r+0x12>
 8012bc4:	9a01      	ldr	r2, [sp, #4]
 8012bc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012bce:	425a      	negs	r2, r3
 8012bd0:	415a      	adcs	r2, r3
 8012bd2:	602a      	str	r2, [r5, #0]
 8012bd4:	e7ee      	b.n	8012bb4 <__swhatbuf_r+0x1e>
 8012bd6:	2340      	movs	r3, #64	; 0x40
 8012bd8:	2000      	movs	r0, #0
 8012bda:	6023      	str	r3, [r4, #0]
 8012bdc:	b016      	add	sp, #88	; 0x58
 8012bde:	bd70      	pop	{r4, r5, r6, pc}

08012be0 <__smakebuf_r>:
 8012be0:	898b      	ldrh	r3, [r1, #12]
 8012be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012be4:	079d      	lsls	r5, r3, #30
 8012be6:	4606      	mov	r6, r0
 8012be8:	460c      	mov	r4, r1
 8012bea:	d507      	bpl.n	8012bfc <__smakebuf_r+0x1c>
 8012bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	6123      	str	r3, [r4, #16]
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	6163      	str	r3, [r4, #20]
 8012bf8:	b002      	add	sp, #8
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	ab01      	add	r3, sp, #4
 8012bfe:	466a      	mov	r2, sp
 8012c00:	f7ff ffc9 	bl	8012b96 <__swhatbuf_r>
 8012c04:	9900      	ldr	r1, [sp, #0]
 8012c06:	4605      	mov	r5, r0
 8012c08:	4630      	mov	r0, r6
 8012c0a:	f7fb fce1 	bl	800e5d0 <_malloc_r>
 8012c0e:	b948      	cbnz	r0, 8012c24 <__smakebuf_r+0x44>
 8012c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c14:	059a      	lsls	r2, r3, #22
 8012c16:	d4ef      	bmi.n	8012bf8 <__smakebuf_r+0x18>
 8012c18:	f023 0303 	bic.w	r3, r3, #3
 8012c1c:	f043 0302 	orr.w	r3, r3, #2
 8012c20:	81a3      	strh	r3, [r4, #12]
 8012c22:	e7e3      	b.n	8012bec <__smakebuf_r+0xc>
 8012c24:	4b0d      	ldr	r3, [pc, #52]	; (8012c5c <__smakebuf_r+0x7c>)
 8012c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	6020      	str	r0, [r4, #0]
 8012c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c30:	81a3      	strh	r3, [r4, #12]
 8012c32:	9b00      	ldr	r3, [sp, #0]
 8012c34:	6163      	str	r3, [r4, #20]
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	6120      	str	r0, [r4, #16]
 8012c3a:	b15b      	cbz	r3, 8012c54 <__smakebuf_r+0x74>
 8012c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c40:	4630      	mov	r0, r6
 8012c42:	f000 f86b 	bl	8012d1c <_isatty_r>
 8012c46:	b128      	cbz	r0, 8012c54 <__smakebuf_r+0x74>
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	f023 0303 	bic.w	r3, r3, #3
 8012c4e:	f043 0301 	orr.w	r3, r3, #1
 8012c52:	81a3      	strh	r3, [r4, #12]
 8012c54:	89a0      	ldrh	r0, [r4, #12]
 8012c56:	4305      	orrs	r5, r0
 8012c58:	81a5      	strh	r5, [r4, #12]
 8012c5a:	e7cd      	b.n	8012bf8 <__smakebuf_r+0x18>
 8012c5c:	0800e371 	.word	0x0800e371

08012c60 <_malloc_usable_size_r>:
 8012c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c64:	1f18      	subs	r0, r3, #4
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	bfbc      	itt	lt
 8012c6a:	580b      	ldrlt	r3, [r1, r0]
 8012c6c:	18c0      	addlt	r0, r0, r3
 8012c6e:	4770      	bx	lr

08012c70 <_raise_r>:
 8012c70:	291f      	cmp	r1, #31
 8012c72:	b538      	push	{r3, r4, r5, lr}
 8012c74:	4604      	mov	r4, r0
 8012c76:	460d      	mov	r5, r1
 8012c78:	d904      	bls.n	8012c84 <_raise_r+0x14>
 8012c7a:	2316      	movs	r3, #22
 8012c7c:	6003      	str	r3, [r0, #0]
 8012c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c82:	bd38      	pop	{r3, r4, r5, pc}
 8012c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c86:	b112      	cbz	r2, 8012c8e <_raise_r+0x1e>
 8012c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c8c:	b94b      	cbnz	r3, 8012ca2 <_raise_r+0x32>
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 f830 	bl	8012cf4 <_getpid_r>
 8012c94:	462a      	mov	r2, r5
 8012c96:	4601      	mov	r1, r0
 8012c98:	4620      	mov	r0, r4
 8012c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c9e:	f000 b817 	b.w	8012cd0 <_kill_r>
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d00a      	beq.n	8012cbc <_raise_r+0x4c>
 8012ca6:	1c59      	adds	r1, r3, #1
 8012ca8:	d103      	bne.n	8012cb2 <_raise_r+0x42>
 8012caa:	2316      	movs	r3, #22
 8012cac:	6003      	str	r3, [r0, #0]
 8012cae:	2001      	movs	r0, #1
 8012cb0:	e7e7      	b.n	8012c82 <_raise_r+0x12>
 8012cb2:	2400      	movs	r4, #0
 8012cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012cb8:	4628      	mov	r0, r5
 8012cba:	4798      	blx	r3
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	e7e0      	b.n	8012c82 <_raise_r+0x12>

08012cc0 <raise>:
 8012cc0:	4b02      	ldr	r3, [pc, #8]	; (8012ccc <raise+0xc>)
 8012cc2:	4601      	mov	r1, r0
 8012cc4:	6818      	ldr	r0, [r3, #0]
 8012cc6:	f7ff bfd3 	b.w	8012c70 <_raise_r>
 8012cca:	bf00      	nop
 8012ccc:	200000b4 	.word	0x200000b4

08012cd0 <_kill_r>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4d07      	ldr	r5, [pc, #28]	; (8012cf0 <_kill_r+0x20>)
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	4608      	mov	r0, r1
 8012cda:	4611      	mov	r1, r2
 8012cdc:	602b      	str	r3, [r5, #0]
 8012cde:	f7f3 f86f 	bl	8005dc0 <_kill>
 8012ce2:	1c43      	adds	r3, r0, #1
 8012ce4:	d102      	bne.n	8012cec <_kill_r+0x1c>
 8012ce6:	682b      	ldr	r3, [r5, #0]
 8012ce8:	b103      	cbz	r3, 8012cec <_kill_r+0x1c>
 8012cea:	6023      	str	r3, [r4, #0]
 8012cec:	bd38      	pop	{r3, r4, r5, pc}
 8012cee:	bf00      	nop
 8012cf0:	200036c0 	.word	0x200036c0

08012cf4 <_getpid_r>:
 8012cf4:	f7f3 b85c 	b.w	8005db0 <_getpid>

08012cf8 <_fstat_r>:
 8012cf8:	b538      	push	{r3, r4, r5, lr}
 8012cfa:	4d07      	ldr	r5, [pc, #28]	; (8012d18 <_fstat_r+0x20>)
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	4604      	mov	r4, r0
 8012d00:	4608      	mov	r0, r1
 8012d02:	4611      	mov	r1, r2
 8012d04:	602b      	str	r3, [r5, #0]
 8012d06:	f7f3 f8ba 	bl	8005e7e <_fstat>
 8012d0a:	1c43      	adds	r3, r0, #1
 8012d0c:	d102      	bne.n	8012d14 <_fstat_r+0x1c>
 8012d0e:	682b      	ldr	r3, [r5, #0]
 8012d10:	b103      	cbz	r3, 8012d14 <_fstat_r+0x1c>
 8012d12:	6023      	str	r3, [r4, #0]
 8012d14:	bd38      	pop	{r3, r4, r5, pc}
 8012d16:	bf00      	nop
 8012d18:	200036c0 	.word	0x200036c0

08012d1c <_isatty_r>:
 8012d1c:	b538      	push	{r3, r4, r5, lr}
 8012d1e:	4d06      	ldr	r5, [pc, #24]	; (8012d38 <_isatty_r+0x1c>)
 8012d20:	2300      	movs	r3, #0
 8012d22:	4604      	mov	r4, r0
 8012d24:	4608      	mov	r0, r1
 8012d26:	602b      	str	r3, [r5, #0]
 8012d28:	f7f3 f8b9 	bl	8005e9e <_isatty>
 8012d2c:	1c43      	adds	r3, r0, #1
 8012d2e:	d102      	bne.n	8012d36 <_isatty_r+0x1a>
 8012d30:	682b      	ldr	r3, [r5, #0]
 8012d32:	b103      	cbz	r3, 8012d36 <_isatty_r+0x1a>
 8012d34:	6023      	str	r3, [r4, #0]
 8012d36:	bd38      	pop	{r3, r4, r5, pc}
 8012d38:	200036c0 	.word	0x200036c0

08012d3c <atan2>:
 8012d3c:	f000 b800 	b.w	8012d40 <__ieee754_atan2>

08012d40 <__ieee754_atan2>:
 8012d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d44:	ec57 6b11 	vmov	r6, r7, d1
 8012d48:	4273      	negs	r3, r6
 8012d4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8012ed0 <__ieee754_atan2+0x190>
 8012d4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012d52:	4333      	orrs	r3, r6
 8012d54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012d58:	4573      	cmp	r3, lr
 8012d5a:	ec51 0b10 	vmov	r0, r1, d0
 8012d5e:	ee11 8a10 	vmov	r8, s2
 8012d62:	d80a      	bhi.n	8012d7a <__ieee754_atan2+0x3a>
 8012d64:	4244      	negs	r4, r0
 8012d66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d6a:	4304      	orrs	r4, r0
 8012d6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012d70:	4574      	cmp	r4, lr
 8012d72:	ee10 9a10 	vmov	r9, s0
 8012d76:	468c      	mov	ip, r1
 8012d78:	d907      	bls.n	8012d8a <__ieee754_atan2+0x4a>
 8012d7a:	4632      	mov	r2, r6
 8012d7c:	463b      	mov	r3, r7
 8012d7e:	f7ed fa5d 	bl	800023c <__adddf3>
 8012d82:	ec41 0b10 	vmov	d0, r0, r1
 8012d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012d8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012d92:	4334      	orrs	r4, r6
 8012d94:	d103      	bne.n	8012d9e <__ieee754_atan2+0x5e>
 8012d96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d9a:	f000 b89d 	b.w	8012ed8 <atan>
 8012d9e:	17bc      	asrs	r4, r7, #30
 8012da0:	f004 0402 	and.w	r4, r4, #2
 8012da4:	ea53 0909 	orrs.w	r9, r3, r9
 8012da8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012dac:	d107      	bne.n	8012dbe <__ieee754_atan2+0x7e>
 8012dae:	2c02      	cmp	r4, #2
 8012db0:	d060      	beq.n	8012e74 <__ieee754_atan2+0x134>
 8012db2:	2c03      	cmp	r4, #3
 8012db4:	d1e5      	bne.n	8012d82 <__ieee754_atan2+0x42>
 8012db6:	a142      	add	r1, pc, #264	; (adr r1, 8012ec0 <__ieee754_atan2+0x180>)
 8012db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dbc:	e7e1      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012dbe:	ea52 0808 	orrs.w	r8, r2, r8
 8012dc2:	d106      	bne.n	8012dd2 <__ieee754_atan2+0x92>
 8012dc4:	f1bc 0f00 	cmp.w	ip, #0
 8012dc8:	da5f      	bge.n	8012e8a <__ieee754_atan2+0x14a>
 8012dca:	a13f      	add	r1, pc, #252	; (adr r1, 8012ec8 <__ieee754_atan2+0x188>)
 8012dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dd0:	e7d7      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012dd2:	4572      	cmp	r2, lr
 8012dd4:	d10f      	bne.n	8012df6 <__ieee754_atan2+0xb6>
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	f104 34ff 	add.w	r4, r4, #4294967295
 8012ddc:	d107      	bne.n	8012dee <__ieee754_atan2+0xae>
 8012dde:	2c02      	cmp	r4, #2
 8012de0:	d84c      	bhi.n	8012e7c <__ieee754_atan2+0x13c>
 8012de2:	4b35      	ldr	r3, [pc, #212]	; (8012eb8 <__ieee754_atan2+0x178>)
 8012de4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012de8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012dec:	e7c9      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012dee:	2c02      	cmp	r4, #2
 8012df0:	d848      	bhi.n	8012e84 <__ieee754_atan2+0x144>
 8012df2:	4b32      	ldr	r3, [pc, #200]	; (8012ebc <__ieee754_atan2+0x17c>)
 8012df4:	e7f6      	b.n	8012de4 <__ieee754_atan2+0xa4>
 8012df6:	4573      	cmp	r3, lr
 8012df8:	d0e4      	beq.n	8012dc4 <__ieee754_atan2+0x84>
 8012dfa:	1a9b      	subs	r3, r3, r2
 8012dfc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012e00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012e04:	da1e      	bge.n	8012e44 <__ieee754_atan2+0x104>
 8012e06:	2f00      	cmp	r7, #0
 8012e08:	da01      	bge.n	8012e0e <__ieee754_atan2+0xce>
 8012e0a:	323c      	adds	r2, #60	; 0x3c
 8012e0c:	db1e      	blt.n	8012e4c <__ieee754_atan2+0x10c>
 8012e0e:	4632      	mov	r2, r6
 8012e10:	463b      	mov	r3, r7
 8012e12:	f7ed fcf3 	bl	80007fc <__aeabi_ddiv>
 8012e16:	ec41 0b10 	vmov	d0, r0, r1
 8012e1a:	f000 f9fd 	bl	8013218 <fabs>
 8012e1e:	f000 f85b 	bl	8012ed8 <atan>
 8012e22:	ec51 0b10 	vmov	r0, r1, d0
 8012e26:	2c01      	cmp	r4, #1
 8012e28:	d013      	beq.n	8012e52 <__ieee754_atan2+0x112>
 8012e2a:	2c02      	cmp	r4, #2
 8012e2c:	d015      	beq.n	8012e5a <__ieee754_atan2+0x11a>
 8012e2e:	2c00      	cmp	r4, #0
 8012e30:	d0a7      	beq.n	8012d82 <__ieee754_atan2+0x42>
 8012e32:	a319      	add	r3, pc, #100	; (adr r3, 8012e98 <__ieee754_atan2+0x158>)
 8012e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e38:	f7ed f9fe 	bl	8000238 <__aeabi_dsub>
 8012e3c:	a318      	add	r3, pc, #96	; (adr r3, 8012ea0 <__ieee754_atan2+0x160>)
 8012e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e42:	e014      	b.n	8012e6e <__ieee754_atan2+0x12e>
 8012e44:	a118      	add	r1, pc, #96	; (adr r1, 8012ea8 <__ieee754_atan2+0x168>)
 8012e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e4a:	e7ec      	b.n	8012e26 <__ieee754_atan2+0xe6>
 8012e4c:	2000      	movs	r0, #0
 8012e4e:	2100      	movs	r1, #0
 8012e50:	e7e9      	b.n	8012e26 <__ieee754_atan2+0xe6>
 8012e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e56:	4619      	mov	r1, r3
 8012e58:	e793      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012e5a:	a30f      	add	r3, pc, #60	; (adr r3, 8012e98 <__ieee754_atan2+0x158>)
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	f7ed f9ea 	bl	8000238 <__aeabi_dsub>
 8012e64:	4602      	mov	r2, r0
 8012e66:	460b      	mov	r3, r1
 8012e68:	a10d      	add	r1, pc, #52	; (adr r1, 8012ea0 <__ieee754_atan2+0x160>)
 8012e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e6e:	f7ed f9e3 	bl	8000238 <__aeabi_dsub>
 8012e72:	e786      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012e74:	a10a      	add	r1, pc, #40	; (adr r1, 8012ea0 <__ieee754_atan2+0x160>)
 8012e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e7a:	e782      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012e7c:	a10c      	add	r1, pc, #48	; (adr r1, 8012eb0 <__ieee754_atan2+0x170>)
 8012e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e82:	e77e      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012e84:	2000      	movs	r0, #0
 8012e86:	2100      	movs	r1, #0
 8012e88:	e77b      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012e8a:	a107      	add	r1, pc, #28	; (adr r1, 8012ea8 <__ieee754_atan2+0x168>)
 8012e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e90:	e777      	b.n	8012d82 <__ieee754_atan2+0x42>
 8012e92:	bf00      	nop
 8012e94:	f3af 8000 	nop.w
 8012e98:	33145c07 	.word	0x33145c07
 8012e9c:	3ca1a626 	.word	0x3ca1a626
 8012ea0:	54442d18 	.word	0x54442d18
 8012ea4:	400921fb 	.word	0x400921fb
 8012ea8:	54442d18 	.word	0x54442d18
 8012eac:	3ff921fb 	.word	0x3ff921fb
 8012eb0:	54442d18 	.word	0x54442d18
 8012eb4:	3fe921fb 	.word	0x3fe921fb
 8012eb8:	080163c0 	.word	0x080163c0
 8012ebc:	080163d8 	.word	0x080163d8
 8012ec0:	54442d18 	.word	0x54442d18
 8012ec4:	c00921fb 	.word	0xc00921fb
 8012ec8:	54442d18 	.word	0x54442d18
 8012ecc:	bff921fb 	.word	0xbff921fb
 8012ed0:	7ff00000 	.word	0x7ff00000
 8012ed4:	00000000 	.word	0x00000000

08012ed8 <atan>:
 8012ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012edc:	ec55 4b10 	vmov	r4, r5, d0
 8012ee0:	4bc3      	ldr	r3, [pc, #780]	; (80131f0 <atan+0x318>)
 8012ee2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012ee6:	429e      	cmp	r6, r3
 8012ee8:	46ab      	mov	fp, r5
 8012eea:	dd18      	ble.n	8012f1e <atan+0x46>
 8012eec:	4bc1      	ldr	r3, [pc, #772]	; (80131f4 <atan+0x31c>)
 8012eee:	429e      	cmp	r6, r3
 8012ef0:	dc01      	bgt.n	8012ef6 <atan+0x1e>
 8012ef2:	d109      	bne.n	8012f08 <atan+0x30>
 8012ef4:	b144      	cbz	r4, 8012f08 <atan+0x30>
 8012ef6:	4622      	mov	r2, r4
 8012ef8:	462b      	mov	r3, r5
 8012efa:	4620      	mov	r0, r4
 8012efc:	4629      	mov	r1, r5
 8012efe:	f7ed f99d 	bl	800023c <__adddf3>
 8012f02:	4604      	mov	r4, r0
 8012f04:	460d      	mov	r5, r1
 8012f06:	e006      	b.n	8012f16 <atan+0x3e>
 8012f08:	f1bb 0f00 	cmp.w	fp, #0
 8012f0c:	f300 8131 	bgt.w	8013172 <atan+0x29a>
 8012f10:	a59b      	add	r5, pc, #620	; (adr r5, 8013180 <atan+0x2a8>)
 8012f12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f16:	ec45 4b10 	vmov	d0, r4, r5
 8012f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f1e:	4bb6      	ldr	r3, [pc, #728]	; (80131f8 <atan+0x320>)
 8012f20:	429e      	cmp	r6, r3
 8012f22:	dc14      	bgt.n	8012f4e <atan+0x76>
 8012f24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012f28:	429e      	cmp	r6, r3
 8012f2a:	dc0d      	bgt.n	8012f48 <atan+0x70>
 8012f2c:	a396      	add	r3, pc, #600	; (adr r3, 8013188 <atan+0x2b0>)
 8012f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f32:	ee10 0a10 	vmov	r0, s0
 8012f36:	4629      	mov	r1, r5
 8012f38:	f7ed f980 	bl	800023c <__adddf3>
 8012f3c:	4baf      	ldr	r3, [pc, #700]	; (80131fc <atan+0x324>)
 8012f3e:	2200      	movs	r2, #0
 8012f40:	f7ed fdc2 	bl	8000ac8 <__aeabi_dcmpgt>
 8012f44:	2800      	cmp	r0, #0
 8012f46:	d1e6      	bne.n	8012f16 <atan+0x3e>
 8012f48:	f04f 3aff 	mov.w	sl, #4294967295
 8012f4c:	e02b      	b.n	8012fa6 <atan+0xce>
 8012f4e:	f000 f963 	bl	8013218 <fabs>
 8012f52:	4bab      	ldr	r3, [pc, #684]	; (8013200 <atan+0x328>)
 8012f54:	429e      	cmp	r6, r3
 8012f56:	ec55 4b10 	vmov	r4, r5, d0
 8012f5a:	f300 80bf 	bgt.w	80130dc <atan+0x204>
 8012f5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012f62:	429e      	cmp	r6, r3
 8012f64:	f300 80a0 	bgt.w	80130a8 <atan+0x1d0>
 8012f68:	ee10 2a10 	vmov	r2, s0
 8012f6c:	ee10 0a10 	vmov	r0, s0
 8012f70:	462b      	mov	r3, r5
 8012f72:	4629      	mov	r1, r5
 8012f74:	f7ed f962 	bl	800023c <__adddf3>
 8012f78:	4ba0      	ldr	r3, [pc, #640]	; (80131fc <atan+0x324>)
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f7ed f95c 	bl	8000238 <__aeabi_dsub>
 8012f80:	2200      	movs	r2, #0
 8012f82:	4606      	mov	r6, r0
 8012f84:	460f      	mov	r7, r1
 8012f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	4629      	mov	r1, r5
 8012f8e:	f7ed f955 	bl	800023c <__adddf3>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	4630      	mov	r0, r6
 8012f98:	4639      	mov	r1, r7
 8012f9a:	f7ed fc2f 	bl	80007fc <__aeabi_ddiv>
 8012f9e:	f04f 0a00 	mov.w	sl, #0
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	460d      	mov	r5, r1
 8012fa6:	4622      	mov	r2, r4
 8012fa8:	462b      	mov	r3, r5
 8012faa:	4620      	mov	r0, r4
 8012fac:	4629      	mov	r1, r5
 8012fae:	f7ed fafb 	bl	80005a8 <__aeabi_dmul>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	4680      	mov	r8, r0
 8012fb8:	4689      	mov	r9, r1
 8012fba:	f7ed faf5 	bl	80005a8 <__aeabi_dmul>
 8012fbe:	a374      	add	r3, pc, #464	; (adr r3, 8013190 <atan+0x2b8>)
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	4606      	mov	r6, r0
 8012fc6:	460f      	mov	r7, r1
 8012fc8:	f7ed faee 	bl	80005a8 <__aeabi_dmul>
 8012fcc:	a372      	add	r3, pc, #456	; (adr r3, 8013198 <atan+0x2c0>)
 8012fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd2:	f7ed f933 	bl	800023c <__adddf3>
 8012fd6:	4632      	mov	r2, r6
 8012fd8:	463b      	mov	r3, r7
 8012fda:	f7ed fae5 	bl	80005a8 <__aeabi_dmul>
 8012fde:	a370      	add	r3, pc, #448	; (adr r3, 80131a0 <atan+0x2c8>)
 8012fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe4:	f7ed f92a 	bl	800023c <__adddf3>
 8012fe8:	4632      	mov	r2, r6
 8012fea:	463b      	mov	r3, r7
 8012fec:	f7ed fadc 	bl	80005a8 <__aeabi_dmul>
 8012ff0:	a36d      	add	r3, pc, #436	; (adr r3, 80131a8 <atan+0x2d0>)
 8012ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff6:	f7ed f921 	bl	800023c <__adddf3>
 8012ffa:	4632      	mov	r2, r6
 8012ffc:	463b      	mov	r3, r7
 8012ffe:	f7ed fad3 	bl	80005a8 <__aeabi_dmul>
 8013002:	a36b      	add	r3, pc, #428	; (adr r3, 80131b0 <atan+0x2d8>)
 8013004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013008:	f7ed f918 	bl	800023c <__adddf3>
 801300c:	4632      	mov	r2, r6
 801300e:	463b      	mov	r3, r7
 8013010:	f7ed faca 	bl	80005a8 <__aeabi_dmul>
 8013014:	a368      	add	r3, pc, #416	; (adr r3, 80131b8 <atan+0x2e0>)
 8013016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301a:	f7ed f90f 	bl	800023c <__adddf3>
 801301e:	4642      	mov	r2, r8
 8013020:	464b      	mov	r3, r9
 8013022:	f7ed fac1 	bl	80005a8 <__aeabi_dmul>
 8013026:	a366      	add	r3, pc, #408	; (adr r3, 80131c0 <atan+0x2e8>)
 8013028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302c:	4680      	mov	r8, r0
 801302e:	4689      	mov	r9, r1
 8013030:	4630      	mov	r0, r6
 8013032:	4639      	mov	r1, r7
 8013034:	f7ed fab8 	bl	80005a8 <__aeabi_dmul>
 8013038:	a363      	add	r3, pc, #396	; (adr r3, 80131c8 <atan+0x2f0>)
 801303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303e:	f7ed f8fb 	bl	8000238 <__aeabi_dsub>
 8013042:	4632      	mov	r2, r6
 8013044:	463b      	mov	r3, r7
 8013046:	f7ed faaf 	bl	80005a8 <__aeabi_dmul>
 801304a:	a361      	add	r3, pc, #388	; (adr r3, 80131d0 <atan+0x2f8>)
 801304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013050:	f7ed f8f2 	bl	8000238 <__aeabi_dsub>
 8013054:	4632      	mov	r2, r6
 8013056:	463b      	mov	r3, r7
 8013058:	f7ed faa6 	bl	80005a8 <__aeabi_dmul>
 801305c:	a35e      	add	r3, pc, #376	; (adr r3, 80131d8 <atan+0x300>)
 801305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013062:	f7ed f8e9 	bl	8000238 <__aeabi_dsub>
 8013066:	4632      	mov	r2, r6
 8013068:	463b      	mov	r3, r7
 801306a:	f7ed fa9d 	bl	80005a8 <__aeabi_dmul>
 801306e:	a35c      	add	r3, pc, #368	; (adr r3, 80131e0 <atan+0x308>)
 8013070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013074:	f7ed f8e0 	bl	8000238 <__aeabi_dsub>
 8013078:	4632      	mov	r2, r6
 801307a:	463b      	mov	r3, r7
 801307c:	f7ed fa94 	bl	80005a8 <__aeabi_dmul>
 8013080:	4602      	mov	r2, r0
 8013082:	460b      	mov	r3, r1
 8013084:	4640      	mov	r0, r8
 8013086:	4649      	mov	r1, r9
 8013088:	f7ed f8d8 	bl	800023c <__adddf3>
 801308c:	4622      	mov	r2, r4
 801308e:	462b      	mov	r3, r5
 8013090:	f7ed fa8a 	bl	80005a8 <__aeabi_dmul>
 8013094:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013098:	4602      	mov	r2, r0
 801309a:	460b      	mov	r3, r1
 801309c:	d14b      	bne.n	8013136 <atan+0x25e>
 801309e:	4620      	mov	r0, r4
 80130a0:	4629      	mov	r1, r5
 80130a2:	f7ed f8c9 	bl	8000238 <__aeabi_dsub>
 80130a6:	e72c      	b.n	8012f02 <atan+0x2a>
 80130a8:	ee10 0a10 	vmov	r0, s0
 80130ac:	4b53      	ldr	r3, [pc, #332]	; (80131fc <atan+0x324>)
 80130ae:	2200      	movs	r2, #0
 80130b0:	4629      	mov	r1, r5
 80130b2:	f7ed f8c1 	bl	8000238 <__aeabi_dsub>
 80130b6:	4b51      	ldr	r3, [pc, #324]	; (80131fc <atan+0x324>)
 80130b8:	4606      	mov	r6, r0
 80130ba:	460f      	mov	r7, r1
 80130bc:	2200      	movs	r2, #0
 80130be:	4620      	mov	r0, r4
 80130c0:	4629      	mov	r1, r5
 80130c2:	f7ed f8bb 	bl	800023c <__adddf3>
 80130c6:	4602      	mov	r2, r0
 80130c8:	460b      	mov	r3, r1
 80130ca:	4630      	mov	r0, r6
 80130cc:	4639      	mov	r1, r7
 80130ce:	f7ed fb95 	bl	80007fc <__aeabi_ddiv>
 80130d2:	f04f 0a01 	mov.w	sl, #1
 80130d6:	4604      	mov	r4, r0
 80130d8:	460d      	mov	r5, r1
 80130da:	e764      	b.n	8012fa6 <atan+0xce>
 80130dc:	4b49      	ldr	r3, [pc, #292]	; (8013204 <atan+0x32c>)
 80130de:	429e      	cmp	r6, r3
 80130e0:	da1d      	bge.n	801311e <atan+0x246>
 80130e2:	ee10 0a10 	vmov	r0, s0
 80130e6:	4b48      	ldr	r3, [pc, #288]	; (8013208 <atan+0x330>)
 80130e8:	2200      	movs	r2, #0
 80130ea:	4629      	mov	r1, r5
 80130ec:	f7ed f8a4 	bl	8000238 <__aeabi_dsub>
 80130f0:	4b45      	ldr	r3, [pc, #276]	; (8013208 <atan+0x330>)
 80130f2:	4606      	mov	r6, r0
 80130f4:	460f      	mov	r7, r1
 80130f6:	2200      	movs	r2, #0
 80130f8:	4620      	mov	r0, r4
 80130fa:	4629      	mov	r1, r5
 80130fc:	f7ed fa54 	bl	80005a8 <__aeabi_dmul>
 8013100:	4b3e      	ldr	r3, [pc, #248]	; (80131fc <atan+0x324>)
 8013102:	2200      	movs	r2, #0
 8013104:	f7ed f89a 	bl	800023c <__adddf3>
 8013108:	4602      	mov	r2, r0
 801310a:	460b      	mov	r3, r1
 801310c:	4630      	mov	r0, r6
 801310e:	4639      	mov	r1, r7
 8013110:	f7ed fb74 	bl	80007fc <__aeabi_ddiv>
 8013114:	f04f 0a02 	mov.w	sl, #2
 8013118:	4604      	mov	r4, r0
 801311a:	460d      	mov	r5, r1
 801311c:	e743      	b.n	8012fa6 <atan+0xce>
 801311e:	462b      	mov	r3, r5
 8013120:	ee10 2a10 	vmov	r2, s0
 8013124:	4939      	ldr	r1, [pc, #228]	; (801320c <atan+0x334>)
 8013126:	2000      	movs	r0, #0
 8013128:	f7ed fb68 	bl	80007fc <__aeabi_ddiv>
 801312c:	f04f 0a03 	mov.w	sl, #3
 8013130:	4604      	mov	r4, r0
 8013132:	460d      	mov	r5, r1
 8013134:	e737      	b.n	8012fa6 <atan+0xce>
 8013136:	4b36      	ldr	r3, [pc, #216]	; (8013210 <atan+0x338>)
 8013138:	4e36      	ldr	r6, [pc, #216]	; (8013214 <atan+0x33c>)
 801313a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801313e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013142:	e9da 2300 	ldrd	r2, r3, [sl]
 8013146:	f7ed f877 	bl	8000238 <__aeabi_dsub>
 801314a:	4622      	mov	r2, r4
 801314c:	462b      	mov	r3, r5
 801314e:	f7ed f873 	bl	8000238 <__aeabi_dsub>
 8013152:	4602      	mov	r2, r0
 8013154:	460b      	mov	r3, r1
 8013156:	e9d6 0100 	ldrd	r0, r1, [r6]
 801315a:	f7ed f86d 	bl	8000238 <__aeabi_dsub>
 801315e:	f1bb 0f00 	cmp.w	fp, #0
 8013162:	4604      	mov	r4, r0
 8013164:	460d      	mov	r5, r1
 8013166:	f6bf aed6 	bge.w	8012f16 <atan+0x3e>
 801316a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801316e:	461d      	mov	r5, r3
 8013170:	e6d1      	b.n	8012f16 <atan+0x3e>
 8013172:	a51d      	add	r5, pc, #116	; (adr r5, 80131e8 <atan+0x310>)
 8013174:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013178:	e6cd      	b.n	8012f16 <atan+0x3e>
 801317a:	bf00      	nop
 801317c:	f3af 8000 	nop.w
 8013180:	54442d18 	.word	0x54442d18
 8013184:	bff921fb 	.word	0xbff921fb
 8013188:	8800759c 	.word	0x8800759c
 801318c:	7e37e43c 	.word	0x7e37e43c
 8013190:	e322da11 	.word	0xe322da11
 8013194:	3f90ad3a 	.word	0x3f90ad3a
 8013198:	24760deb 	.word	0x24760deb
 801319c:	3fa97b4b 	.word	0x3fa97b4b
 80131a0:	a0d03d51 	.word	0xa0d03d51
 80131a4:	3fb10d66 	.word	0x3fb10d66
 80131a8:	c54c206e 	.word	0xc54c206e
 80131ac:	3fb745cd 	.word	0x3fb745cd
 80131b0:	920083ff 	.word	0x920083ff
 80131b4:	3fc24924 	.word	0x3fc24924
 80131b8:	5555550d 	.word	0x5555550d
 80131bc:	3fd55555 	.word	0x3fd55555
 80131c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80131c4:	bfa2b444 	.word	0xbfa2b444
 80131c8:	52defd9a 	.word	0x52defd9a
 80131cc:	3fadde2d 	.word	0x3fadde2d
 80131d0:	af749a6d 	.word	0xaf749a6d
 80131d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80131d8:	fe231671 	.word	0xfe231671
 80131dc:	3fbc71c6 	.word	0x3fbc71c6
 80131e0:	9998ebc4 	.word	0x9998ebc4
 80131e4:	3fc99999 	.word	0x3fc99999
 80131e8:	54442d18 	.word	0x54442d18
 80131ec:	3ff921fb 	.word	0x3ff921fb
 80131f0:	440fffff 	.word	0x440fffff
 80131f4:	7ff00000 	.word	0x7ff00000
 80131f8:	3fdbffff 	.word	0x3fdbffff
 80131fc:	3ff00000 	.word	0x3ff00000
 8013200:	3ff2ffff 	.word	0x3ff2ffff
 8013204:	40038000 	.word	0x40038000
 8013208:	3ff80000 	.word	0x3ff80000
 801320c:	bff00000 	.word	0xbff00000
 8013210:	08016410 	.word	0x08016410
 8013214:	080163f0 	.word	0x080163f0

08013218 <fabs>:
 8013218:	ec51 0b10 	vmov	r0, r1, d0
 801321c:	ee10 2a10 	vmov	r2, s0
 8013220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013224:	ec43 2b10 	vmov	d0, r2, r3
 8013228:	4770      	bx	lr
	...

0801322c <_init>:
 801322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801322e:	bf00      	nop
 8013230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013232:	bc08      	pop	{r3}
 8013234:	469e      	mov	lr, r3
 8013236:	4770      	bx	lr

08013238 <_fini>:
 8013238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801323a:	bf00      	nop
 801323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801323e:	bc08      	pop	{r3}
 8013240:	469e      	mov	lr, r3
 8013242:	4770      	bx	lr
